% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_functions.R
\name{plot_values}
\alias{plot_values}
\title{Plot the ensemble output}
\usage{
plot_values(
  fit,
  sample,
  variable = 1,
  ggplot = TRUE,
  quantiles = c(0.05, 0.95)
)
}
\arguments{
\item{fit}{An \code{EnsembleFit} object output from \code{fit_ensemble_model}.}

\item{sample}{An \code{EnsembleSample} object output from \code{generate_sample}.}

\item{variable}{The name of the variable / species to plot. This can either be a \code{character} string in the same
form as the observation variable, or an index for the column in the observations data frame.}

\item{ggplot}{A \code{logical} which plots the graphs using ggplot if \code{TRUE} and base R if \code{FALSE}.}

\item{quantiles}{A \code{numeric} vector of length 2 giving the quantiles for which to plot ribbons if doing a full sampling of the ensemble model.}
}
\value{
If \code{ggplot = TRUE}, returns a ggplot object. Otherwise returns nothing.
}
\description{
Plots the latent truth predicted by the ensemble model, along with simulator outputs and observations.
}
\examples{
fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
                         simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
                                           list(SSB_fs,  Sigma_fs, "FishSUMS"),
                                           list(SSB_lm,  Sigma_lm, "LeMans"),
                                           list(SSB_miz, Sigma_miz, "Mizer")),
                         priors = priors)
sample <- generate_sample(fit_sample, num_samples = 2000)
plot_values(fit_sample, sample, variable = "Cod", quantiles=c(0.2, 0.8))

fit_point <-fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
                              simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
                                           list(SSB_fs,  Sigma_fs, "FishSUMS"),
                                           list(SSB_lm,  Sigma_lm, "LeMans"),
                                           list(SSB_miz, Sigma_miz, "Mizer")),
                               priors = priors,
                               full_sample = FALSE)
sample1 <- generate_sample(fit_sample, num_samples = 2000)
plot_values(fit_point, sample1, variable="Herring", ggplot=FALSE)
}
