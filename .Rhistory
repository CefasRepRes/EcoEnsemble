#'plot(samples1, variable="Herring")
#'}
plot.EnsembleSample <- function(x, variable = NULL, quantiles=c(0.05, 0.95), ...){
if(!is.null(variable)){
return(plot_single(x, variable, quantiles, ...))
}
d <- x@ensemble_fit@ensemble_data@priors@d
plots_all <- lapply(1:d, function(i){plot_single(x, i, quantiles, ...) + ggplot2::theme(legend.position = "none")})
legend <- cowplot::get_legend(plot_single(x, 1))
plots_all <- append(plots_all, list(legend))
return(
do.call(cowplot::plot_grid, plots_all)
)
}
# Fudge to get past "no visible binding for global variable" in R-CMD check
utils::globalVariables(c("Year", "EnsembleLower", "EnsembleUpper", "value", "Simulator"))
plot_single <- function(samples, variable=1, quantiles=c(0.05, 0.95), ...){
fit <- samples@ensemble_fit
ensemble_data <- fit@ensemble_data
observations <- ensemble_data@observations[[1]]
simulators <- ensemble_data@simulators
stan_input <- ensemble_data@stan_input
# Find which variable we are interested in
if(is.double(variable) || is.integer(variable)){
if (abs(variable - round(variable)) > .Machine$double.eps^0.5){
warning("Non-integer variable specified. variable will be taken as floor(variable). This is done by R, strange isn't it?!")
}
variable <- colnames(observations)[variable]
}
if (is.na(variable)
|| !(variable %in% colnames(observations) )){
stop(paste0("Invalid variable. This should be the name of a species or an index less than ",
ncol(observations) + 1))
}
df <- tibble::rownames_to_column(observations)[, c("rowname", variable)]
colnames(df) <- c("Year", "Observations")
for (i in 1:length(simulators)) {
simulator <- simulators[[i]]
#Skip simulators that dont have the species
if (!(variable %in% colnames(simulator[[1]]))){
next
}
df_sim <- tibble::rownames_to_column(simulator[[1]], var = "Year")[, c("Year", variable)]
#Use the name if available
colnames(df_sim)[2] <- paste0("Simulator ", i)
if (length(simulator) == 3){
colnames(df_sim)[2] <- simulator[[3]]
}
df <- dplyr::full_join(df, df_sim, by = "Year")
}
var_index = which(colnames(observations) == variable)
if(!is.null(fit@samples)){
df <- cbind(df, apply(samples@mle[, var_index, ], 1, median))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, min(quantiles), na.rm = TRUE))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, max(quantiles), na.rm = TRUE))
df <- data.frame(df)
df$Year <- as.numeric(df$Year)
colnames(df)[(ncol(df) - 2):ncol(df)] <- c("Ensemble Model Prediction", "EnsembleLower", "EnsembleUpper")
df_plot <-  reshape2::melt(df, id.vars=c("Year", "EnsembleLower", "EnsembleUpper"), variable.name="Simulator")
df_plot[df_plot$Simulator != "Ensemble Model Prediction", c("EnsembleLower", "EnsembleUpper")] <- c(NA, NA)
return(plot_values_sample_gg(df_plot, variable, ...))
}else{
df <- cbind(df, samples@mle[, var_index])
df <- data.frame(df)
df$Year <- as.numeric(df$Year)
colnames(df)[ncol(df)] <- "Ensemble Model Prediction"
df_plot <-  reshape2::melt(df, id.vars=c("Year"), variable.name="Simulator")
return(plot_values_optimised_gg(df_plot, variable, ...))
}
}
plot_values_optimised_gg<- function(df, title, ...){
p <- ggplot2::ggplot(data=df, ggplot2::aes(x=`Year`, y=`value`, na.rm = TRUE), ...) + ggplot2::geom_line(ggplot2::aes(group=`Simulator`,colour=`Simulator`), na.rm = TRUE) + ggplot2::ggtitle(title)
return(p)
}
plot_values_sample_gg<- function(df, title, ...){
return(plot_values_optimised_gg(df, title, ...) + ggplot2::geom_ribbon(ggplot2::aes(ymin=`EnsembleLower`, ymax =`EnsembleUpper`, fill = `Simulator`), alpha=0.2))
}
plot(lil_sammy_sample)
plot(lil_sammy_sample)
missing
missing(mjfs])
missing(mjfs)
rm("sam_priors")
if(exists(sam_priors))
sam_priors <- prior_ensemble_model(priors, full_sample = full_sample,M=length(simulators), ...)
?list
sam_priors <- list(samples=samples, point_estimate=point_estimate)
sam_priors
sam_priors$samples
colnames(sam_priors$samples)
prior_ensemble_model(priors, full_sample = full_sample,M=lengt
h(simulators))
?EnsemblePrior
roxygen2::roxygenise()
devtools::install(quick = TRUE)
roxygen2::roxygenise()
rm(list = c("plot.EnsembleSample", "plot_single", "plot_values_optimised_gg", "plot_values_sample_gg"))
load_all()
devtools::load_all()
roxygen2::roxygenise()
?sample_prior
?prior_ensemble_model
devtools::install()
devtools::install(quick = TRUE
)
roxygen2::roxygenise()
library(devtools)
check_win_devel()
library(devtools)
document()
check_win_devel()
roxygen2::roxygenise()
document()
check_win_devel()
Rcpp::compileAttributes()
.Last.error.trace
gfdgfd
check_win_devel()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
f dslfd
pkgbuild::compile_dll()
pkgbuild::compile_dll()
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise()
devtools::install()
library(devtools)
?check_win_devel()
check_win_devel()
roxygen2::roxygenise()
check_win_devel()
devtools::install()
check_win_deve()
check_win_release()
check_win_devel()
.Last.error.trace
pkgbuild::build()
pkgbuild::build()
pkgbuild::build()
check_win_devel()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?.Call
roxygen2::roxygenise()
roxygen2::roxygenise()
check_win_devel()
roxygen2::roxygenise()
check_win_devel()
devtools::install()
AGFCEM(10)
AGFCEM(1)
library(EcoEnsemble)
AGFCEM(1)
library(EcoEnsemble)
AGFCEM(10)
AGFCEM(1)
AGFCEM(100)
AGFCEM(1)
AGFCEM(11561)
AGFCEM(115612313121)
library(devtools)
check_win_devel()
roxygen2::roxygenise()
devtools::insinstall()
devtools::install()
roxygen2::roxygenise()
?sample_prior
?prior_ensemble_model
check_win_devel()
check_rhub
check_rhub()
devtools::build()
spell_check()
release()
rcmdcheck::rcmdcheck(args = c("--as-cran"))
devtools::release()
setwd("~/")
rstantools::rstan_create_package("Blerg")
library(devtools)
check_win_devel()
rcmdcheck::rcmdcheck(args = c("--as-cran"))
hist(sin(pi*rbeta(1e3, 40,40)))
hist(sin(pi*rbeta(1e3, 40,40)))
check_win_devel()
library(devtools)
check_win_devel()
devtools::build()
library(devtools)
check_win_devel()
check_rhub()
getwd()
rstantools::rstan_create_package("../EcoEnsembleMk2")
X <- rnorm(200, mean = 4, sd = 1)
plt.hist(X)
hist(X)
plot(xxxx, dnorm(xxxx, 4, 1))
xxxx <- seq(0, 8, 0.01)
plot(xxxx, dnorm(xxxx, 4, 1))
plot(xxxx, dnorm(xxxx, 4, 1), type="l")
mu_u <- function(E_sigma_squared, x, mu_0, sigma_0){
(sum(x)*E_sigma_squared + mu_0/sigma_0^2) / (length(x)*E_sigma_squared + 1/sigma_0^2)
}
sigma_u <- function(E_sigma_squared, x, sigma_0){
1/(length(x)*E_sigma_squared + 1/sigma_0^2)
})
sigma_u <- function(E_sigma_squared, x, sigma_0){
1/(length(x)*E_sigma_squared + 1/sigma_0^2)
}
hist(1/rgamma(200, A0, B0))
#Prior params
A0 <- 0.1
B0 <- 0.5
hist(1/rgamma(200, A0, B0))
#Prior params
A0 <- 1
B0 <- 1
hist(1/rgamma(200, A0, B0))
hist(s[s < 30])
s <- 1/rgamma(200, A0, B0)
hist(s[s < 30])
hist(s[s < 10])
hist(s[s < 5])
A <- A + length(x)/2
hist(rnorm(200, mu_0, sigma_0))
mu_0 <- 5
sigma_0 <- 4
hist(rnorm(200, mu_0, sigma_0))
hist(rnorm(200, mu_0, sigma_0))
sigmas <- c()
mus <- c()
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- append(sigmas, 1/(length(x)*A / Bs[i-1])
}
for (i in 1:1) {
}
for (i in 1:1) {
sigmas[i] <- append(sigmas, 1/(length(x)*A / Bs[i-1]))
}
for (i in 1:1) {
sigmas[i] <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
A <- A0 + length(x)/2
A <- A0 + length(x)/2
A <- A0 + length(X)/2
for (i in 1:1) {
sigmas[i] <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:1) {
sigmas[i] <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
sigmas
for (i in 1:1) {
sigmas[i] <- 1/(length(X)*A / Bs[i-1])
}
sigmas
sigmas <- c()
mus <- c()
for (i in 1:1) {
sigmas[i] <- 1/(length(X)*A / Bs[i-1])
}
sigmas
sigmas <- c()
mus <- c()
for (i in 1:1) {
sigmas <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
sigmas
for (i in 1:1) {
sigmas <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
append(sigmas, 1/(length(X)*A / Bs[i-1]))
for (i in 2) {
sigmas <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
sigmas
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- append(sigmas, 1/(length(X)*A / Bs[i] + 1/sigma_0^2))
}
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
}
sigmas
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
}
mus
sigmas
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B + 0.5*(length(X)*sigmas[i] + sum((x - mus[i])**2)/length(X))
}
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((x - mus[i])**2)/length(X))
}
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
Bs
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:20) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
plt.ts(Bs)
plot.ts(Bs)
plot.ts(sigmas)
plot.ts(mus)
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:5) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
plot.ts(Bs)
plot.ts(sigmas)
plot.ts(mus)
mus
mean(X)
mu_0 <- 10
sigma_0 <- 2
hist(rnorm(200, mu_0, sigma_0))
s <- 1/rgamma(200, A0, B0)
hist(s[s < 5])
A <- A0 + length(X)/2
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:5) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
plot.ts(Bs)
plot.ts(sigmas)
plot.ts(mus)
mus
sigmas
Bs
X <- rnorm(30, mean = 4, sd = 1)
#Prior params
A0 <- 1
B0 <- 1
mu_0 <- 10
sigma_0 <- 2
hist(rnorm(200, mu_0, sigma_0))
s <- 1/rgamma(200, A0, B0)
hist(s[s < 5])
A <- A0 + length(X)/2
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:5) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
plot.ts(Bs)
plot.ts(sigmas)
plot.ts(mus)
hist(1/rgamma(1,1))
hist(1/rgamma(200, 1,1))
library(devtools)
check_win
check_win_devel()
library(devtools)
check_win_devel()
check_win_release()
example(source) # defines the sourceDir() function
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
roxygen2::roxygenize()
instal()
gfdgfd
pkgbuild::compile_dll()
?pkgbuild::compile_dll()
library(pkgbuild)
compile_dll()
needs_compile()
needs_compile()
compile_dll()
library(roxygen2)
roxygenize()
install()
needs_compile()
compile_dll()
library(roxygen2)
roxygenize()
install()
library(devtools)
check_win_devel()
needs_compile()
compile_dll()
roxygenize()
install()
needs_compile()
compile_dll()
roxygenize()
roxygenize()
install()
roxygenize()
roxygenize()
install()
?check_rhub
check_win_devel()
check_win_release()
?pluralise
?utils::menu
??pluralise
nfile <- 0; pluralize("Found {nfile} file{?s}.")
nfile <- 1; pluralize("Found {nfile} file{?s}.")
nfile <- 2; pluralize("Found {nfile} file{?s}.")
library(cli)
nfile <- 0; pluralize("Found {nfile} file{?s}.")
nfile <- 1; pluralize("Found {nfile} file{?s}.")
nfile <- 2; pluralize("Found {nfile} file{?s}.")
utils::menu(c("Lol", "Absolutely Not", "Bruh"))
k <- utils::menu(c("Lol", "Absolutely Not", "Bruh"))
k
k <- utils::menu(c("Lol", "Absolutely Not", "Bruh"), title = "How dare you!")
check_rhub(env_vars = c(`_R_CHECK_DONTTEST_EXAMPLES_` = "false"))
check_win_oldrelease()
library(roxygen2)
devtools::install
pkgbuild::compile_dll()
library(devtools)
install()
.Last.error.trace
version
R.version
devtools::install()
rm(list = ls())
library(EcoEnsemble)
setwd("C:/Users/JM34/Documents/EcoEnsemble Paper/Vignette Scripts")
options(mc.cores = parallel::detectCores() - 1)
# inital prior configuration and run
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("lkj", list(25, 0.25), 30),
ind_lt_params = list(
"beta",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(matrix(40, 4, 4), matrix(40, 4, 4))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 3)
# inital prior configuration and run
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("lkj", list(25, 0.25), 30),
ind_lt_params = list(
"hierarchical_betaBOI",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(c(10,10,10,10))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 3)
# inital prior configuration and run
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("lkj", list(25, 0.25), 30),
ind_lt_params = list(
"hierarchical_beta",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(c(10,10,10,10))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 3)
devtools::install(quick = TRUE)
setwd("~/EcoEnsemble")
devtools::install(quick = TRUE)
devtools::install(quick = TRUE)
devtools::install(quick = TRUE)
