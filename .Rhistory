gfdgfd
check_win_devel()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
f dslfd
pkgbuild::compile_dll()
pkgbuild::compile_dll()
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise()
devtools::install()
library(devtools)
?check_win_devel()
check_win_devel()
roxygen2::roxygenise()
check_win_devel()
devtools::install()
check_win_deve()
check_win_release()
check_win_devel()
.Last.error.trace
pkgbuild::build()
pkgbuild::build()
pkgbuild::build()
check_win_devel()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?.Call
roxygen2::roxygenise()
roxygen2::roxygenise()
check_win_devel()
roxygen2::roxygenise()
check_win_devel()
devtools::install()
AGFCEM(10)
AGFCEM(1)
library(EcoEnsemble)
AGFCEM(1)
library(EcoEnsemble)
AGFCEM(10)
AGFCEM(1)
AGFCEM(100)
AGFCEM(1)
AGFCEM(11561)
AGFCEM(115612313121)
library(devtools)
check_win_devel()
roxygen2::roxygenise()
devtools::insinstall()
devtools::install()
roxygen2::roxygenise()
?sample_prior
?prior_ensemble_model
check_win_devel()
check_rhub
check_rhub()
devtools::build()
spell_check()
release()
rcmdcheck::rcmdcheck(args = c("--as-cran"))
devtools::release()
setwd("~/")
rstantools::rstan_create_package("Blerg")
library(devtools)
check_win_devel()
rcmdcheck::rcmdcheck(args = c("--as-cran"))
hist(sin(pi*rbeta(1e3, 40,40)))
hist(sin(pi*rbeta(1e3, 40,40)))
check_win_devel()
library(devtools)
check_win_devel()
devtools::build()
library(devtools)
check_win_devel()
check_rhub()
getwd()
rstantools::rstan_create_package("../EcoEnsembleMk2")
X <- rnorm(200, mean = 4, sd = 1)
plt.hist(X)
hist(X)
plot(xxxx, dnorm(xxxx, 4, 1))
xxxx <- seq(0, 8, 0.01)
plot(xxxx, dnorm(xxxx, 4, 1))
plot(xxxx, dnorm(xxxx, 4, 1), type="l")
mu_u <- function(E_sigma_squared, x, mu_0, sigma_0){
(sum(x)*E_sigma_squared + mu_0/sigma_0^2) / (length(x)*E_sigma_squared + 1/sigma_0^2)
}
sigma_u <- function(E_sigma_squared, x, sigma_0){
1/(length(x)*E_sigma_squared + 1/sigma_0^2)
})
sigma_u <- function(E_sigma_squared, x, sigma_0){
1/(length(x)*E_sigma_squared + 1/sigma_0^2)
}
hist(1/rgamma(200, A0, B0))
#Prior params
A0 <- 0.1
B0 <- 0.5
hist(1/rgamma(200, A0, B0))
#Prior params
A0 <- 1
B0 <- 1
hist(1/rgamma(200, A0, B0))
hist(s[s < 30])
s <- 1/rgamma(200, A0, B0)
hist(s[s < 30])
hist(s[s < 10])
hist(s[s < 5])
A <- A + length(x)/2
hist(rnorm(200, mu_0, sigma_0))
mu_0 <- 5
sigma_0 <- 4
hist(rnorm(200, mu_0, sigma_0))
hist(rnorm(200, mu_0, sigma_0))
sigmas <- c()
mus <- c()
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- append(sigmas, 1/(length(x)*A / Bs[i-1])
}
for (i in 1:1) {
}
for (i in 1:1) {
sigmas[i] <- append(sigmas, 1/(length(x)*A / Bs[i-1]))
}
for (i in 1:1) {
sigmas[i] <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
A <- A0 + length(x)/2
A <- A0 + length(x)/2
A <- A0 + length(X)/2
for (i in 1:1) {
sigmas[i] <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:1) {
sigmas[i] <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
sigmas
for (i in 1:1) {
sigmas[i] <- 1/(length(X)*A / Bs[i-1])
}
sigmas
sigmas <- c()
mus <- c()
for (i in 1:1) {
sigmas[i] <- 1/(length(X)*A / Bs[i-1])
}
sigmas
sigmas <- c()
mus <- c()
for (i in 1:1) {
sigmas <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
sigmas
for (i in 1:1) {
sigmas <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
append(sigmas, 1/(length(X)*A / Bs[i-1]))
for (i in 2) {
sigmas <- append(sigmas, 1/(length(X)*A / Bs[i-1]))
}
sigmas
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- append(sigmas, 1/(length(X)*A / Bs[i] + 1/sigma_0^2))
}
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
}
sigmas
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
}
mus
sigmas
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B + 0.5*(length(X)*sigmas[i] + sum((x - mus[i])**2)/length(X))
}
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((x - mus[i])**2)/length(X))
}
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
Bs
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:20) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
plt.ts(Bs)
plot.ts(Bs)
plot.ts(sigmas)
plot.ts(mus)
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:5) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
plot.ts(Bs)
plot.ts(sigmas)
plot.ts(mus)
mus
mean(X)
mu_0 <- 10
sigma_0 <- 2
hist(rnorm(200, mu_0, sigma_0))
s <- 1/rgamma(200, A0, B0)
hist(s[s < 5])
A <- A0 + length(X)/2
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:5) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
plot.ts(Bs)
plot.ts(sigmas)
plot.ts(mus)
mus
sigmas
Bs
X <- rnorm(30, mean = 4, sd = 1)
#Prior params
A0 <- 1
B0 <- 1
mu_0 <- 10
sigma_0 <- 2
hist(rnorm(200, mu_0, sigma_0))
s <- 1/rgamma(200, A0, B0)
hist(s[s < 5])
A <- A0 + length(X)/2
Bs <- c(1)
sigmas <- c()
mus <- c()
for (i in 1:5) {
sigmas[i] <- 1/(length(X)*A / Bs[i] + 1/sigma_0^2)
mus[i]    <- sigmas[i] * (sum(X)*A/Bs[i] + mu_0/sigma_0^2)
Bs[i+1]   <- B0 + 0.5*(length(X)*sigmas[i] + sum((X - mus[i])**2)/length(X))
}
plot.ts(Bs)
plot.ts(sigmas)
plot.ts(mus)
hist(1/rgamma(1,1))
hist(1/rgamma(200, 1,1))
library(devtools)
check_win
check_win_devel()
library(devtools)
check_win_devel()
check_win_release()
example(source) # defines the sourceDir() function
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
roxygen2::roxygenize()
instal()
gfdgfd
pkgbuild::compile_dll()
?pkgbuild::compile_dll()
library(pkgbuild)
compile_dll()
needs_compile()
needs_compile()
compile_dll()
library(roxygen2)
roxygenize()
install()
needs_compile()
compile_dll()
library(roxygen2)
roxygenize()
install()
library(devtools)
check_win_devel()
needs_compile()
compile_dll()
roxygenize()
install()
needs_compile()
compile_dll()
roxygenize()
roxygenize()
install()
roxygenize()
roxygenize()
install()
?check_rhub
check_win_devel()
check_win_release()
?pluralise
?utils::menu
??pluralise
nfile <- 0; pluralize("Found {nfile} file{?s}.")
nfile <- 1; pluralize("Found {nfile} file{?s}.")
nfile <- 2; pluralize("Found {nfile} file{?s}.")
library(cli)
nfile <- 0; pluralize("Found {nfile} file{?s}.")
nfile <- 1; pluralize("Found {nfile} file{?s}.")
nfile <- 2; pluralize("Found {nfile} file{?s}.")
utils::menu(c("Lol", "Absolutely Not", "Bruh"))
k <- utils::menu(c("Lol", "Absolutely Not", "Bruh"))
k
k <- utils::menu(c("Lol", "Absolutely Not", "Bruh"), title = "How dare you!")
check_rhub(env_vars = c(`_R_CHECK_DONTTEST_EXAMPLES_` = "false"))
check_win_oldrelease()
library(roxygen2)
devtools::install
pkgbuild::compile_dll()
library(devtools)
install()
.Last.error.trace
version
R.version
devtools::install()
rm(list = ls())
library(EcoEnsemble)
setwd("C:/Users/JM34/Documents/EcoEnsemble Paper/Vignette Scripts")
options(mc.cores = parallel::detectCores() - 1)
# inital prior configuration and run
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("lkj", list(25, 0.25), 30),
ind_lt_params = list(
"beta",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(matrix(40, 4, 4), matrix(40, 4, 4))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 3)
# inital prior configuration and run
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("lkj", list(25, 0.25), 30),
ind_lt_params = list(
"hierarchical_betaBOI",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(c(10,10,10,10))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 3)
# inital prior configuration and run
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("lkj", list(25, 0.25), 30),
ind_lt_params = list(
"hierarchical_beta",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(c(10,10,10,10))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 3)
devtools::install(quick = TRUE)
setwd("~/EcoEnsemble")
devtools::install(quick = TRUE)
devtools::install(quick = TRUE)
devtools::install(quick = TRUE)
rm(list = ls())
library(EcoEnsemble)
#setwd("C:/Users/JM34/Documents/EcoEnsemble Paper/Vignette Scripts")
options(mc.cores = parallel::detectCores() - 1)
# inital prior configuration and run
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("hierarchical",
c(10,10,20,0.1),#list(25, 0.25),
c(10,10,10,10)),
ind_lt_params = list(
"beta",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(matrix(40,4, 4), matrix(40, 4, 4))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 3)
fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
samsam <- sample_priors(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
prior_ensemble_model(priors, M=4)
fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
install()
library(devtools)
install()
install()
library(devtools)
fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
install()
install()
install()
install()
install()
rm(list = ls())
library(EcoEnsemble)
#setwd("C:/Users/JM34/Documents/EcoEnsemble Paper/Vignette Scripts")
options(mc.cores = parallel::detectCores() - 1)
# inital prior configuration and run
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("hierarchical",
c(10,10,20,0.1),#list(25, 0.25),
c(10,10,10,10)),
ind_lt_params = list(
"beta",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(matrix(40,4, 4), matrix(40, 4, 4))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 3)
fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
prior_ensemble_model(priors, M=4)
install()
library(devtools)
install()
rm(list = ls())
library(EcoEnsemble)
#setwd("C:/Users/JM34/Documents/EcoEnsemble Paper/Vignette Scripts")
options(mc.cores = parallel::detectCores() - 1)
# inital prior configuration and run
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("hierarchical",
c(10,10,20,0.1),#list(25, 0.25),
c(10,10,10,10)),
ind_lt_params = list(
"beta",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(matrix(40,4, 4), matrix(40, 4, 4))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 3)
fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
prior_ensemble_model(priors, M=4)
samsam <- sample_priors(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
samsam <- sample_prior(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
samsam
