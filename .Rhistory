full_join(SSB_ewe[, c(1, spec)], by="rowname", suffix=c("", "_lm"))
colnames(df) <- c("Year", "Single-species", "Mizer", "LeMans", "FishSUMS", "EwE")
df$Year <- as.double(df$Year)
df <- reshape2::melt(df, id.vars = "Year")
colnames(df) <- c("Year", "Simulator", "SSB")
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator)) + geom_line() + theme_minimal()
library(EcoEnsemble)
library(ggplot2)
spec <- 4
#SSB_miz <- tibble::rownames_to_column(SSB_miz)
#SSB_lm  <- tibble::rownames_to_column(SSB_lm)
#SSB_fs  <- tibble::rownames_to_column(SSB_fs)
#SSB_ewe <- tibble::rownames_to_column(SSB_ewe)
#SSB_obs <- tibble::rownames_to_column(SSB_obs)
library(dplyr)
df <-
full_join(SSB_obs[, c(1, spec)], SSB_miz[, c(1, spec)], by="rowname", suffix=c("_obs", "_miz")) %>%
full_join(SSB_lm [, c(1, spec)], by="rowname", suffix=c("", "_lm")) %>%
full_join(SSB_fs [, c(1, spec)], by="rowname", suffix=c("", "_lm")) %>%
full_join(SSB_ewe[, c(1, spec)], by="rowname", suffix=c("", "_lm"))
colnames(df) <- c("Year", "Single-species", "Mizer", "LeMans", "FishSUMS", "EwE")
df$Year <- as.double(df$Year)
df <- reshape2::melt(df, id.vars = "Year")
colnames(df) <- c("Year", "Simulator", "SSB")
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator)) + geom_line() + theme_minimal()
colnames(SSB_fs)
colnames(SSB_lm)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod")
c(Sigma_obs[spec - 1, spec-1])
vars_of_species <- c("Single-species" = Sigma_obs[spec - 1, spec-1],
"Mizer" = Sigma_miz[spec - 1, spec-1],
"LeMans" = Sigma_lm[spec - 1, spec-1],
"FishSUMS" = Sigma_fs[spec - 1, spec-1],
"EwE" = Sigma_ewe[spec - 1, spec-1])
vars_of_species
df$lower <- NA; df$upper <- NA
k <- 1
df[k, 2]
vars_of_species[df[k, 2]]
vars_of_species
sqrt(vars_of_species)
sd_of_species <- sqrt(vars_of_species)
sd_of_species[df[k, 2]]
k <- nrow(df)
sd_of_species[df[k, 2]]
df$lower[k]
df$lower <- NA; df$upper <- NA
for (k in 1:nrow(df)) {
df$lower[k] <- df$SSB[k] -  sd_of_species[df[k, 2]]
df$upper[k] <- df$SSB[k] +  sd_of_species[df[k, 2]]
}
df
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon()
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon(alpha=0.5)
ggplot(df, aes(x=Year, y=`SSB`, ymin=lower, ymax=upper, fill=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon(alpha=0.5)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon(alpha=0.25)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon(alpha=0.25)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon(alpha=0.25, aes(colour=NA))
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon(alpha=0.25, colour=NA)
df$lower <- NA; df$upper <- NA
for (k in 1:nrow(df)) {
df$lower[k] <- df$SSB[k] -  3*sd_of_species[df[k, 2]]
df$upper[k] <- df$SSB[k] +  3*sd_of_species[df[k, 2]]
}
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon(alpha=0.25, colour=NA)
df$lower <- NA; df$upper <- NA
for (k in 1:nrow(df)) {
df$lower[k] <- df$SSB[k] -  2*sd_of_species[df[k, 2]]
df$upper[k] <- df$SSB[k] +  2*sd_of_species[df[k, 2]]
}
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon(alpha=0.25, colour=NA)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") #+ geom_ribbon(alpha=0.25, colour=NA)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator, size=1.25)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") #+ geom_ribbon(alpha=0.25, colour=NA)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator, size=1)) + geom_line() + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") #+ geom_ribbon(alpha=0.25, colour=NA)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line(size=2) + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") #+ geom_ribbon(alpha=0.25, colour=NA)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line(size=1.5) + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") #+ geom_ribbon(alpha=0.25, colour=NA)
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line(size=1.5) + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod") + geom_ribbon(alpha=0.25, colour=NA)
SSB_obs[, c)3]
SSB_obs[, spec]
SSB_obs[, spec] - SSB_ewe[, spec]
full_join(SSB_obs[, c(1, spec)], SSB_ewe[, c(1, spec)], by="rowname", suffix=c("_obs", "ewe"))
tmp[, 3] - tmp[, 2]
tmp <- full_join(SSB_obs[, c(1, spec)], SSB_ewe[, c(1, spec)], by="rowname", suffix=c("_obs", "ewe"))
tmp[, 3] - tmp[, 2]
plot.ts(tmp[, 3] - tmp[, 2])
df_sub <- df[df$Simulator %in% c("Single-species", "EwE"), ]
ggplot(df, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line(size=1.5) + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod")
ggplot(df_sub, aes(x=Year, y=`SSB`,colour=Simulator, ymin=lower, ymax=upper, fill=Simulator)) + geom_line(size=1.5) + theme_minimal() + ggtitle("Predictions for Spawning Stock Biomass of Cod")
df_disc <-  full_join(SSB_obs[, c(1, spec)], SSB_ewe[, c(1, spec)], by="rowname", suffix=c("_obs", "ewe"))
df_disc
df_disc$Discrepancy <- df_disc$Cod_obs - df_disc$Codewe
df_disc <- df_disc[, c(1, 4)]
df_disc
ggplot(df_disc, aes(x=Year, y=`Discrepancy`)) + geom_line(size=1.5) + theme_minimal()
df_disc
colnames(df_disc)[1] <- "Year"
ggplot(df_disc, aes(x=Year, y=`Discrepancy`)) + geom_line(size=1.5) + theme_minimal()
df_disc$Year <- as.double(df_disc$Year)
ggplot(df_disc, aes(x=Year, y=`Discrepancy`)) + geom_line(size=1.5) + theme_minimal()
ggplot(df_disc, aes(x=Year, y=`Discrepancy`)) + geom_line(size=1.5) + theme_minimal() +ggtitle("Discrepancy")
df_disc$Discrepancy <- df_disc$Codewe - df_disc$Cod_obs
df_disc <- df_disc[, c(1, 4)]
colnames(df_disc)[1] <- "Year"
df_disc$Year <- as.double(df_disc$Year)
ggplot(df_disc, aes(x=Year, y=`Discrepancy`)) + geom_line(size=1.5) + theme_minimal() +ggtitle("Discrepancy")
df_disc <-  full_join(SSB_obs[, c(1, spec)], SSB_ewe[, c(1, spec)], by="rowname", suffix=c("_obs", "ewe"))
df_disc$Discrepancy <- df_disc$Codewe - df_disc$Cod_obs
df_disc <- df_disc[, c(1, 4)]
colnames(df_disc)[1] <- "Year"
df_disc$Year <- as.double(df_disc$Year)
ggplot(df_disc, aes(x=Year, y=`Discrepancy`)) + geom_line(size=1.5) + theme_minimal() +ggtitle("Discrepancy")
?generate_sample
rm(ls())
rm(list=ls())
SSB_obs
View(SSB_obs)
# Available Data ----------------------------------------------------------
View(SSB_obs)
rm(list=ls())
library(EcoEnsemble)
ls()
SSB_obs
data("EcoEnsemble")
data("northseamsy")
force(SSB_obs)
rm(list=ls())
library(EcoEnsemble)
# Available Data ----------------------------------------------------------
data("northseamsy") #Loading in the dataset
force(SSB_obs)
force(Sigma_obs)
View(SSB_obs)
force(SSB_miz)
View(SSB_miz)
View(Sigma_obs)
force(Sigma_miz)
View(Sigma_miz)
rm(list=ls())
library(EcoEnsemble)
# Available Data ----------------------------------------------------------
data("northseamsy") #Loading in the dataset
ls()
?`EcoEnsemble-package`
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("lkj",  list(3, 2), 3),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = list(10, list(3, 3), list(10, diag(num_species)))
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors)
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("hierarchical",  list(c(4,4,4,4),c(4,4,4,4)), 3),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors)
fit
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("hierarchical",  list(c(4,4,4,4),c(4,4,4,4)), 3),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors)
priors@priors_stan_input
# Priors ------------------------------------------------------------------
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("hierarchical", c(1, 1, 1, 1), c(1, 1, 1, 1)),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors)
View(SSB_fs)
View(SSB_lm)
View(SSB_ewe)
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("hierarchical", c(1, 1, 1, 1), c(1, 1, 1, 1)),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("lkj",list(2, 1/3),list(10)),
sha_lt_params = 5
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors)
# Set up and Installation -------------------------------------------------
#Install the latest version from the GitHub repo
#library(devtools)
#install_github("CefasRepRes/EcoEnsemble")
rm(list=ls())
library(EcoEnsemble)
# Available Data ----------------------------------------------------------
data("northseamsy") #Loading in the dataset
ls()
# Priors ------------------------------------------------------------------
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("hierarchical", c(1, 1, 1, 1), c(1, 1, 1, 1)),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("lkj",list(2, 1/3),list(10)),
sha_lt_params = 5
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors)
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("hierarchical", c(1, 1, 1, 1), c(1, 1, 1, 1)),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("lkj",list(2, 1/3),10),
sha_lt_params = 5
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors)
?EnsemblePrior
# Available Data ----------------------------------------------------------
data("northseamsy") #Loading in the dataset
ls()
# Priors ------------------------------------------------------------------
?EnsemblePrior
prior_ensemble_model(priors, M = 4)
options(mc.cores = parallel::detectCores())
prior_ensemble_model(priors, M = 4)
load("initial_run.RData")
load("initial_run.RData")
?getwd()
getwd()
evtools::install_github("kassmbara/datarium")
devtools::install_github("kassmbara/datarium")
getwd()
data("marketing", package = "datarium")
install.packages("datarium")
data("marketing", package = "datarium")
plot(marketing)
model <- lm(sales ~ youtube + facebook + newspaper, data = marketing)
summary(model)
hist(marketing$sales)
s <- seq(0, 40,  0.5)
s
plot(sales ~ youtube, data=marketing)
hist(marketing$youtube)
hist(marketing$facebook)
hist(marketing$newspaper)
cbind(runif())
N <- 200
cbind(runif(N, 0, 400),
runif(N, 0, 100),
runif(N, 0, 150))
x <- cbind(runif(N, 0, 400),
runif(N, 0, 100),
runif(N, 0, 150))
predict(model, x)
predict(model, data.frame(x))
x <- data.frame("youtube" = runif(N, 0, 400),
"facebook" = runif(N, 0, 100),
"newspaper" = runif(N, 0, 150))
predict(model, data.frame(x))
ss <- predict(model, x)
df <- data.frame(x, "sales" = ss)
plot(sales ~ youtube, data = marketing)
plot(sales ~ youtube, data = df)
plot(sales ~ youtube, data = marketing)
plot(sales ~ youtube, data = df)
plot(sales ~ newspaper, data = df)
plot(marketing)
plot(df)
model2 <- lm(sales ~ exp(youtube) + exp(facebook) + newspaper, data = marketing)
summary(model)
summary(model2)
ss <- predict(model2, x)
df <- data.frame(x, "sales" = ss)
plot(df)
library(devtools)
install()
Rcpp::compileAttributes()
library(roxygen2)
roxygenise()
Sys.which("make")
library(devtools)
library(RcppArmadillo)
rm(list=ls())
library(Rcpp)
sourceCpp("../KF_back2.cpp")
sourceCpp("../KF_back2.cpp")
sourceCpp("../KF_back2.cpp")
library(Rcpp)
cppFunction(depends = "RcppArmadillo",
'arma::mat KalmanFilter_back(arma::vec rhos, arma::vec dee, arma::vec R, arma::mat Q, arma::mat C,// parameters
arma::mat P, arma::vec xhat, int Time, arma::mat y, arma::mat obs){
arma::mat xhat_b = arma::mat(Time, xhat.n_elem);
arma::mat P_ = P;
arma::mat P_s[Time];
arma::mat A = rhos * rhos.t();
arma::vec xhat_ = xhat;
arma::mat xhat_s = arma::mat(Time, xhat.n_elem);
arma::mat G[Time];
arma::mat G_(xhat.n_elem, y.n_cols);
arma::mat er(Time, y.n_cols);
double est;
arma::mat Qs_inv(Time, y.n_cols);
/// smoothing bit
arma::mat Identity = arma::eye(xhat.n_elem, xhat.n_elem);
arma::mat L(xhat.n_elem, xhat.n_elem);
arma::vec r(xhat.n_elem);
int k_i;
int l_j;
for (int i = 0; i < Time; ++i)
{
//JM: Need to initialise some of the other variables
G[i] = arma::mat(xhat.n_elem, y.n_cols);
P_ = P_ % A + Q; // l 455
xhat_ = rhos % xhat_; // l 454
P_s[i] = P_ ;
xhat_s.row(i) = xhat_.t() ;
for (int j = 0; j < y.n_cols; ++j) // change this to some input that lists the numbers of the elements of y that we are interested in, maybe another value that says how many we are interested in.
{
if (obs(i,j)==1.0)
{
G_.col(j) = P_ * C.row(j).t();
double Qs = (C.row(j) * G_.col(j) + R(j)).eval()(0,0);
Qs_inv(i, j) =  1 /Qs;
est = dot((xhat_ + dee) ,  C.row(j)) ;
er(i,j) = y(i,j) - est;
G[i].col(j) = Qs_inv(i,j) * G_.col(j);
xhat_ = xhat_ + G[i].col(j) * er(i,j);
P_ -=  G[i].col(j) * G_.col(j).t();
}
}
}
for (int i = 0; i < Time; ++i)
{
//k_i = Time + 1 - i;
k_i = Time - i - 1;
int num_cols = y.n_cols;
for (int j = 0; j < num_cols; ++j)
{
//l_j = num_cols + 1 - j;
l_j = num_cols - j - 1;
if (obs(k_i,l_j) == 1.0)
{
L = Identity - G[k_i].col(l_j) * C.row(l_j);
r = C.row(l_j).t()  * Qs_inv(k_i,l_j) * er(k_i,l_j) + L.t() * r;
}
}
xhat_b.row(k_i) = xhat_s.row(k_i) + (P_s[k_i] * r).t();
r = rhos % r;
}
return xhat_b;
}')
?cppFunction
View(KalmanFilter_back)
rm(list = ls())
getwd()
sourceCpp(file = "src/KF_back_Cpp.cpp")
sourceCpp("src/KF_back_Cpp.cpp")
install()
devtools::install()
sourceCpp("src/KF_back_Cpp.cpp")
sourceCpp("src/KF_back_Cpp.cpp")
sourceCpp("src/KF_back_Cpp.cpp")
sourceCpp("src/KF_back_Cpp.cpp")
R.version
Rcpp::Rcpp.package.skeleton(path = "../Old EcoEnsemble Packages/New new EcoEnsemble", name = "anRpackage")
devtools::install()
devtools::install()
devtools::install()
library(rstantools)
getwd()
HOME <- "C:/Users/JM34/Documents/Old EcoEnsemble Packages/New new EcoEnsemble/"
HOME <- "C:/Users/JM34/Documents/Old EcoEnsemble Packages/New new EcoEnsemble"
rstan_create_package(path = paste0(HOME, "/newStanPackage"))
#2. Create an armadillo package
library(RcppArmadillo)
RcppArmadillo.package.skeleton(path = HOME, name = "newArmadilloPackage")
?RcppArmadillo.package.skeleton(path = HOME, name = "newArmadilloPackage")
#3. Create another rstan package as a base for combining the two
rstan_create_package(path = paste0(HOME, "/newHybridPackage"))
devtools::install()
rstantools::rstan_create_package("../new/EcoEnsemble")
library(EcoEnsemble)
remove.packages("Rcppommon")
remove.packages("RcppCommon")
install.packages("RcppCommon")
remove.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
> find.package('Rcpp')
find.package('Rcpp')
has_de
has_devel()
library(devtools)
has_devel()
library(devtools)
check_win_devel()
library(EcoEnsemble)
devtools::check_win_devel()
document()
devtools::check_win_devel()
library(devtools)
check_win_devel()
install()
install()
devtools::install()
library(EcoEnsemble)
library(EcoEnsemble)
?generate_sample
library(EcoEnsemble)
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("lkj",  list(3, 2), 3),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = list(10, list(3, 3), list(10, diag(num_species)))
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors, full_sample = FALSE)
fit
sample <- generate_sample(fit)
sample
dim(sample@samples)
library(devtools)
check_rhub()
?check_rhub()
library(EcoEnsemble)
build()
check_win_devel()
