list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(matrix(40, 4, 4), matrix(40, 4, 4))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 5)
samples_small_loose <- generate_sample(fit_loose, num_samples = 2000)
plot(samples_small_loose)
samples_small_loose <- generate_sample(fit_loose, num_samples = 1)
plot(samples_small_loose)
samples_small_loose <- generate_sample(fit_small_loose, num_samples = 1)
plot(samples_small_loose)
samples_small_loose <- generate_sample(fit_small_loose)
plot(samples_small_loose)
source("r/plot_functions.R")
plot(samples_small_loose)
source("r/plot_functions.R")
plot(samples_small_loose)
View(df)
View(samples)
var_index
samples@mle[, var_index]
length(samples@mle[, var_index])
nrow(df)
samples@ensemble_fit@ensemble_data@stan_input$time
plot(samples_small_loose)
View(df)
ens_data <- EnsembleData(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_lm_small,  Sigma_lm,  "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer"),
list(SSB_fs_small,  Sigma_fs,  "FishSUMS")),
priors = priors)
ens_data@stan_input$time
1990 + 35
source("r/generate_simulator_stan_data.R")
devtools::install(quick = TRUE)
library(EcoEnsemble)
ens_data <- EnsembleData(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
ens_data@stan_input$time
# Vignette - less data ----------------------------------------------------
SSB_obs_small <- SSB_obs[paste(1990:2005), ]
SSB_ewe_small <- SSB_ewe[paste(1996:2030), ]
SSB_miz_small <- SSB_miz[paste(1996:2030), ]
SSB_lm_small <- SSB_lm  [paste(1996:2030), ]
SSB_fs_small <- SSB_fs  [paste(1996:2030), ]
fit_small <- fit_ensemble_model(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer")),
priors = priors,
full_sample = FALSE)
samples_small <- generate_sample(fit_small, num_samples = 1)
plot(samples_small)
fit_small_loose <- fit_ensemble_model(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer")),
priors = priors_loose,
full_sample = FALSE)
source("r/plot_functions.R")
# Vignette - less data ----------------------------------------------------
SSB_obs_small <- SSB_obs[paste(1990:2005), ]
SSB_ewe_small <- SSB_ewe[paste(1996:2030), ]
SSB_miz_small <- SSB_miz[paste(1996:2030), ]
SSB_lm_small <- SSB_lm  [paste(1996:2030), ]
SSB_fs_small <- SSB_fs  [paste(1996:2030), ]
fit_small <- fit_ensemble_model(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer")),
priors = priors,
full_sample = FALSE)
samples_small <- generate_sample(fit_small, num_samples = 1)
plot(samples_small)
fit_small_loose <- fit_ensemble_model(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer")),
priors = priors_loose,
full_sample = FALSE)
samples_small_loose <- generate_sample(fit_small_loose)
fit_small@ensemble_data@stan_input$time
ens_data <- EnsembleData(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_lm_small,  Sigma_lm,  "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer"),
list(SSB_fs_small,  Sigma_fs,  "FishSUMS")),
priors = priors)
ens_data@stan_input$time
rownames(SSB_obs_small)
devtools::install(quick= TRUE)
rm(list = ls())
library(EcoEnsemble)
options(mc.cores = parallel::detectCores() - 1)
# Vignette
priors <- EnsemblePrior(
d = 4,
ind_st_params = list("lkj", list(25, 0.25), 30),
ind_lt_params = list(
"beta",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(matrix(40, 4, 4), matrix(40, 4, 4))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 5)
# Vignette - less data ----------------------------------------------------
SSB_obs_small <- SSB_obs[paste(1990:2005), ]
SSB_ewe_small <- SSB_ewe[paste(1996:2030), ]
SSB_miz_small <- SSB_miz[paste(1996:2030), ]
SSB_lm_small <- SSB_lm  [paste(1996:2030), ]
SSB_fs_small <- SSB_fs  [paste(1996:2030), ]
fit_small <- fit_ensemble_model(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer")),
priors = priors,
full_sample = FALSE)
samples_small <- generate_sample(fit_small, num_samples = 1)
plot(samples_small)
generate_simulator_stan_data <- function(observations, simulators){
N <- ncol(observations[[1]])
M <- length(simulators)
times <- rownames(observations)
model_num_species <- rep(NA, M)
Ms  <- matrix(NA, nrow=0, ncol=N)
model_covariances <- c()
for (i in 1:M) {
sim <- simulators[[i]]
model_ouput <- sim[[1]]
times <- unique(append(times, rownames(model_ouput)))
model_num_species[i] <- ncol(model_ouput)
Mi <- matrix(0, nrow=model_num_species[i], ncol=N)
observed_species <- colnames(observations[[1]])
sim_species      <- colnames(model_ouput)
for(k in 1:model_num_species[i]){
for(l in 1:N){
Mi[k,l] <- sim_species[k] == observed_species[l]
}
}
Ms <- rbind(Ms, Mi)
model_covariances <- append(model_covariances, as.numeric(sim[[2]]))
}
times <- sort(as.integer(times))
#Things that can't be done on the first pass
observation_times <- matrix(NA, nrow=length(times), ncol=0)
model_outputs <- matrix(NA, nrow=length(times), ncol=0)
observation_times <- cbind(observation_times, times %in% rownames(observations[[1]]))
for (i in 1:M) {
sim <- simulators[[i]]
model_ouput <- sim[[1]]
present_data <- as.numeric(times %in% rownames(model_ouput))
observation_times <- cbind(observation_times, present_data )
y_i<- matrix(0, nrow = length(times), ncol=ncol(model_ouput))
for(k in 1:length(times)){
year = times[k]
dat_for_year <- model_ouput[year == rownames(model_ouput), ]
if(nrow(dat_for_year) == 1){
y_i[k, ] <- unlist(dat_for_year)
}
}
model_outputs <- cbind(model_outputs, y_i)
}
if(M == 1){
model_num_species = array(model_num_species, 1)
}
obs_data <- observations[[1]]
obs_data_all <- matrix(0, nrow = length(times), ncol=N)
for(k in 1:length(times)){
year = times[k]
obs_for_year <- obs_data[year == rownames(obs_data), ]
if(nrow(obs_for_year) == 1){
obs_data_all[k, ] <- unlist(obs_for_year)
}
}
obs_covariances <- observations[[2]]
return(list(N=N,
time = length(times),
M=M,
model_num_species=model_num_species,
Ms= Ms,
observation_times = observation_times,
model_outputs = model_outputs,
model_covariances = model_covariances,
observations = obs_data_all,
obs_covariances = obs_covariances))
}
s <- generate_simulator_stan_data(SSB_obs_small)
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS")
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer"))
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer"))
s <- generate_simulator_stan_data(SSB_obs_small, simulators)
s <- generate_simulator_stan_data(list(SSB_obs_small, Sigma_obs), simulators)
View(s)
source("r/generate_simulator_stan_data.R")
s <- generate_simulator_stan_data(list(SSB_obs_small, Sigma_obs), simulators)
View(s)
devtools::install(quick = TRUE
)
library(EcoEnsemble)
N_species <- 4
priors_loose <- EnsemblePrior(d = 4,
ind_st_params = list("lkj", list(1, 1), 3),
ind_lt_params = list(
"beta",
list(1, 1),
list(matrix(5,N_species, N_species), matrix(5, N_species, N_species))
),
sha_st_params = list("lkj", list(10, 0.1), 3),
sha_lt_params = 3)
# Vignette - less data ----------------------------------------------------
SSB_obs_small <- SSB_obs[paste(1990:2005), ]
SSB_ewe_small <- SSB_ewe[paste(1996:2030), ]
SSB_miz_small <- SSB_miz[paste(1996:2030), ]
SSB_lm_small <- SSB_lm  [paste(1996:2030), ]
SSB_fs_small <- SSB_fs  [paste(1996:2030), ]
fit_small <- fit_ensemble_model(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer")),
priors = priors,
full_sample = FALSE)
samples_small <- generate_sample(fit_small, num_samples = 1)
plot(samples_small)
SSB_obs_small <- SSB_obs[paste(1990:2005), ]
SSB_ewe_small <- SSB_ewe[paste(1996:2030), ]
SSB_miz_small <- SSB_miz[paste(1996:2030), ]
SSB_lm_small <- SSB_lm  [paste(1996:2030), ]
SSB_fs_small <- SSB_fs  [paste(1996:2030), ]
fit_small <- fit_ensemble_model(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer")),
priors = priors, num_chains = 3)
?rstan::sampling
fit_small <- fit_ensemble_model(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer")),
priors = priors, chains = 3)
samples_small <- generate_sample(fit_small)
save(samples_small, file = "vignettes/data/smaller_run.RData")
plot(samples_small)
fit_small_loose <- fit_ensemble_model(observations = list(SSB_obs_small, Sigma_obs),
simulators = list(list(SSB_ewe_small, Sigma_ewe, "EwE"),
list(SSB_fs_small,  Sigma_fs, "FishSUMS"),
list(SSB_lm_small,  Sigma_lm, "LeMans"),
list(SSB_miz_small, Sigma_miz, "mizer")),
priors = priors_loose, chains = 3)
samples_small_loose <- generate_sample(fit_small_loose)
plot(samples_small_loose)
save(samples_small, file = "vignettes/data/smaller_run_loose.RData")
save(samples_small, file = "vignettes/data/smaller_run_loose.RData")
plot(samples_small_loose)
save(samples_small_loose, file = "vignettes/data/smaller_run_loose.RData")
plot(samples_small_loose)
plot(samples_small_loose)
plot(samples_small)
load("data/smaller_run.RData")
#Load in the data and load the library
library(EcoEnsemble)
load("data/initial_run.RData")
load("data/initial_run_looser.RData")
load("data/smaller_run.RData")
load("data/smaller_run_loose.RData")
library(tibble)
library(dplyr)
library(reshape2)
library(ggplot2)
#Inlcude years in the data frames
SSB_obs_tmp <- rownames_to_column(SSB_obs, var = "Year")
SSB_ewe_tmp <- rownames_to_column(SSB_ewe, var = "Year")
SSB_miz_tmp <- rownames_to_column(SSB_miz, var = "Year")
SSB_lm_tmp <- rownames_to_column(SSB_lm, var = "Year")
SSB_fs_tmp <- rownames_to_column(SSB_fs, var = "Year")
#Join dataframes together
df_all <- SSB_obs_tmp %>%
full_join(SSB_ewe_tmp, by = "Year", suffix = c("","_ewe")) %>%
full_join(SSB_miz_tmp, by = "Year", suffix = c("","_miz")) %>%
full_join(SSB_lm_tmp, by = "Year", suffix = c("","_lm")) %>%
full_join(SSB_fs_tmp, by = "Year", suffix = c("","_fs"))
#Melt into long data format for ggplot
df_all <- melt(df_all, id.vars = "Year")
colnames(df_all) <- c("Year", "Simulator", "logSSB")
df_all$Year <- as.numeric(df_all$Year)
#Finally create the plots
df_n_pout <- df_all[grepl("N.pout", df_all$Simulator), ]
ggplot(data=df_n_pout, aes(x=`Year`, y=`logSSB`, na.rm = TRUE)) +
geom_line(aes(group=`Simulator`,colour=`Simulator`)) +
ggtitle("Norway pout")
df_herring <- df_all[grepl("Herring", df_all$Simulator), ]
ggplot(data=df_herring, aes(x=`Year`, y=`logSSB`, na.rm = TRUE)) +
geom_line(aes(group=`Simulator`,colour=`Simulator`)) +
ggtitle("Herring")
df_cod <- df_all[grepl("Cod", df_all$Simulator), ]
ggplot(data=df_cod, aes(x=`Year`, y=`logSSB`, na.rm = TRUE)) +
geom_line(aes(group=`Simulator`,colour=`Simulator`))+
ggtitle("Cod")
df_sole <- df_all[grepl("Sole", df_all$Simulator), ]
ggplot(data=df_sole, aes(x=`Year`, y=`logSSB`, na.rm = TRUE)) +
geom_line(aes(group=`Simulator`,colour=`Simulator`)) +
ggtitle("Sole")
priors <- priors <- EnsemblePrior(
d = 4,
ind_st_params = list("lkj", list(25, 0.25), 30),
ind_lt_params = list(
"beta",
list(c(25, 25, 25, 10),c(0.25, 0.25, 0.25, 0.1)),
list(matrix(40, 4, 4), matrix(40, 4, 4))
),
sha_st_params = list("lkj", list(25, 0.25), 30),
sha_lt_params = 5)
fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
plot(samples)
plot(samples, variable = "Cod", quantiles = c(0.25, 0.75)) +
ggplot2::theme_classic() +
ggplot2::scale_color_brewer(palette="Set3")  +
ggplot2::ylab("SSB (log tonnes)")
plot(samples, variable = "Cod", quantiles = c(0.25, 0.75)) +
ggplot2::theme_classic() +
ggplot2::scale_color_brewer(palette="Set2")  +
ggplot2::ylab("SSB (log tonnes)")
plot(samples, variable = "Cod", quantiles = c(0.25, 0.75)) +
ggplot2::theme_classic() +
ggplot2::scale_color_brewer(palette="Set1")  +
ggplot2::ylab("SSB (log tonnes)")
plot(samples, variable = "Cod", quantiles = c(0.25, 0.75)) +
ggplot2::theme_classic() +
ggplot2::scale_color_brewer(palette="Set2")  +
ggplot2::ylab("SSB (log tonnes)")
ens_data <- EnsembleData(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
#sam <- sample@ensemble_fit@samples
mod <- get_mcmc_ensemble_model()
samples <- rstan::sampling(mod, ens_data@stan_input, chains=(parallel::detectCores()-1))
# The first time you call one of these functions (get_mle, generate_sample, etc...), you have to expose all the underlying STAN functions, which takes a lot of time the first time around So we silently run this whole thing once so that we're actually comparing like-for-like in the speed test.
mod <- get_mcmc_ensemble_model()
point_estimate <- rstan::optimizing(mod, ens_data@stan_input, as_vector=FALSE)
fit <- EnsembleFit(ens_data, point_estimate = point_estimate)
transf_data <- get_transformed_data(fit)
mle_pe <- get_mle(1, ex.fit = point_estimate$par, transformed_data = transf_data,
time = ens_data@stan_input$time)
mod <- get_mcmc_ensemble_model()
point_estimate <- rstan::optimizing(mod, ens_data@stan_input, as_vector=FALSE)
fit <- EnsembleFit(ens_data, point_estimate = point_estimate)
# Generating the MLE using DIY functions
start_time <- Sys.time()
transf_data <- get_transformed_data(fit)
mle_pe <- get_mle(1, ex.fit = point_estimate$par, transformed_data = transf_data,
time = ens_data@stan_input$time)
time_diff <- Sys.time() - start_time
print(paste("Time taken to generate MLE using rstan directly: ",
as.numeric(time_diff), units(time_diff), sep = " "))
start_time <- Sys.time()
samples_tmp <- generate_sample(fit)
mle_pe <- samples_tmp@mle
time_diff <- Sys.time() - start_time
print(paste("Time taken to generate MLE using EcoEnsemble wrapper functions:",
as.numeric(time_diff), units(time_diff), sep = " "))
N_species <- 4
priors_loose <- EnsemblePrior(d = 4,
ind_st_params = list("lkj", list(1, 1), 3),
ind_lt_params = list(
"beta",
list(1, 1),
list(matrix(5,N_species, N_species), matrix(5, N_species, N_species)
)                                                   ),
sha_st_params = list("lkj", list(10, 0.1), 3),
sha_lt_params = 3)
fit_loose <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "mizer")),
priors = priors_loose)
#The initial ensemble model run
plot(samples, variable = "Cod")
#The ensemble model with less informative priors
plot(sample_loose, variable = "Cod")
plot(samples_small)
plot(samples_small_loose)
#The ensemble model with less informative priors
#plot(sample_loose, variable = "Cod")
plot(sample_loose)
#The initial ensemble model run
#plot(samples, variable = "Cod")
plot(samples)
#The ensemble model with less informative priors
#plot(sample_loose, variable = "Cod")
plot(sample_loose)
roxygen2::roxygenise()
rm(list = c("generate_simulator_stan_data"))
roxygen2::roxygenise()
devtools::install(quick = TRUE)
library(EcoEnsemble)
?SSB_ewe
?SSB_obs
?rstan::sampling
dimnames(samples)
samples
View(samples@mle)
dim(samples@mle)
dimnames(samples@mle)
dimnames(samples@mle)[1] <- paste(1:67)
dimnames(samples@mle)[1]
dimnames(samples@mle)[1] <- 1:67
dimnames(samples@mle)[1] <- list(1:67)
dimnames(samples@mle)[1]
View(samples@mle)
rhub::check()
install.packages("rhub")
rhub::check()
q
q()
?rcmdcheck::rcmdcheck
?median
?setMethod("plot", signature(x = "MizerSim", y = "missing")
?setMethod
?setMethod
load("vignettes/data/initial_run.RData")
plot(samples)
load("vignettes/data/initial_run_looser.RData")
cowplot::plot_grid(plot(samples, variable = "Cod"),
plot(sample_loose, variable = "Cod"),
nrow=2)
cowplot::plot_grid(plot(samples, variable = "Cod"),
plot(sample_loose, variable = "Cod"),
cowplot::get_legend(plot(samples, variable = "Cod"))
nrow=3)
cowplot::plot_grid(plot(samples, variable = "Cod"),
plot(sample_loose, variable = "Cod"),
cowplot::get_legend(plot(samples, variable = "Cod")),
nrow=3)
library(ggplot2)
library(cowplot)
p1 <- plot(samples, variable = "Cod") + theme(legend.position = "none")
p1 <- plot(samples, variable = "Cod") + theme(legend.position = "none")
p2 <- plot(sample_loose, variable = "Cod") + theme(legend.position = "none")
plot_grid(p1, p2, get_legend(p1),nrow=3)
get_legend(p1)
plot_grid(p1, p2, get_legend(p2),nrow=3)
warning()
warnings()
plot_grid(p1, p2, get_legend(p2),nrow=3)
warnings()
p1 <- plot(samples, variable = "Cod") + theme(legend.position = "none")
p2 <- plot(sample_loose, variable = "Cod") + theme(legend.position = "none")
plot_grid(p1, p2, get_legend(plot(samples, variable = "Cod")),nrow=3)
plot_prior_comparison <- plot_grid(p1, p2, get_legend(plot(samples, variable = "Cod")),nrow=3)
#4
load("vignettes/data/smaller_run.RData")
load("vignettes/data/smaller_run_loose.RData")
cowplot::plot_grid(plot(samples_small, variable = "Cod"),
plot(samples_small_loose, variable = "Cod"),
nrow=2)
p1 <- plot(samples_small, variable = "Cod") + theme(legend.position = "none")
p2 <- plot(samples_small_loose, variable = "Cod") + theme(legend.position = "none")
plot_prior_comparison_less_data <- plot_grid(p1, p2, get_legend(plot(samples_small, variable = "Cod")),nrow=3)
plot_prior_comparison_less_data
#1
load("vignettes/data/initial_run.RData")
plot_initial_outputs <- plot(samples)
#2
plot_initial_customised <- plot(samples, variable = "Cod", quantiles = c(0.25, 0.75)) +   ggplot2::theme_classic() +   ggplot2::scale_color_brewer(palette="Set2")  +  ggplot2::ylab("SSB (log tonnes)")
#3
library(ggplot2)
library(cowplot)
load("vignettes/data/initial_run_looser.RData")
p1 <- plot(samples, variable = "Cod") + theme(legend.position = "none")
p2 <- plot(sample_loose, variable = "Cod") + theme(legend.position = "none")
plot_prior_comparison <- plot_grid(p1, p2, get_legend(plot(samples, variable = "Cod")),nrow=3)
#4
load("vignettes/data/smaller_run.RData")
load("vignettes/data/smaller_run_loose.RData")
p1 <- plot(samples_small, variable = "Cod") + theme(legend.position = "none")
p2 <- plot(samples_small_loose, variable = "Cod") + theme(legend.position = "none")
plot_prior_comparison_less_data <- plot_grid(p1, p2, get_legend(plot(samples_small, variable = "Cod")),nrow=3)
cowplot::plot_grid(plot(samples_small, variable = "Cod"),
plot(samples_small_loose, variable = "Cod"),
nrow=2)
save(plot_initial_outputs, plot_initial_customised, plot_prior_comparison, plot_prior_comparison_less_data, file = "vignettes/data/vignette_plots.Rdata")
roxygen2::roxygenise()
rcmdcheck::rcmdcheck(args = c("--as-cran"))
roxygen2::roxygenise
roxygen2::roxygenise()
rcmdcheck::rcmdcheck(args = c("--as-cran"))
