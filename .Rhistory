list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
control=list(adapt_delta = 0.99)) # Additional Stan parameters.
## End(Not run)
devtools::build()
devtools::check_built(path = "../EcoEnsemble_0.1.0.tar.gz")
?devtools::check_rhub
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build()
rcmdcheck::rcmdcheck(args = c("--as-cran"))
devtools::release()
devtools::release()
devtools::build_manual()
devtools::build_vignettes()
library(devtools)
nfjdksn
check_rhub()
check_rhub()
release()
check_rhub()
devtools::build()
devtools::install(quick = TRUE)
load("../Ensemble examples/new/paper_sample.RData")
View(sam@sample)
s
View(sam@samples)
View(sam)
sam@samples
T <- 100
z <- numeric(T)
z[1] <- 10
z[1] <- 10
for (i in 2:T) {
z[i] <- exp(rnorm(1, log(z[i-1]), 4))
}
plot.ts(z)
plot.ts(log(z))
for (i in 2:T) {
z[i] <- exp(rnorm(1, log(z[i-1]), 0.5))
}
plot.ts(log(z))
plot.ts(z)
library(rstan)
mod <- stan_model("../Ensemble examples/new/rngs/mwe.stan")
mod <- stan_model("../Ensemble examples/new/rngs/mwe.stan")
mod <- stan_model("../Ensemble examples/new/rngs/mwe.stan")
mod <- stan_model("../Ensemble examples/new/rngs/mwe.stan")
sampling(mod, data = list(N=3, prior_y_init_mean_sd = rep(5, 3)))
sammy <- sampling(mod, data = list(N=3, prior_y_init_mean_sd = rep(5, 3)))
sammy <- sampling(mod, data = list(N=3, prior_y_init_mean_sd = rep(5, 3)), alogirthm = "fixed_param")
sammy <- sampling(mod, data = list(N=3, prior_y_init_mean_sd = rep(5, 3)), algoirthm = "fixed_param")
sammy <- sampling(mod, data = list(N=3, prior_y_init_mean_sd = rep(5, 3)), algorithm = "fixed_param")
sammy <- sampling(mod, data = list(N=3, prior_y_init_mean_sd = rep(5, 3)), algorithm = "Fixed_param")
sammy
load("../Ensemble examples/new/paper_sample.RData")
plot(sam)
sum(sam@samples == NA)
sam@samples == NA
sum(is.na(sam@samples)
)
roxygen2::roxygenise()
devtools::install(quick = FALSE)
devtools::install(quick = FALSE)
mod <- stan_model(file = "inst/stan/ensemble_prior.stan")
stan_input <- priors@priors_stan_input
stan_input$M <- M
?EnsemblePrior
mod
#Defining priors for a model with 4 species.
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("lkj",  list(3, 2), 3),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = list(10, list(3, 3), list(10, diag(num_species)))
)
mod <- stan_model(file = "inst/stan/ensemble_prior.stan")
stan_input <- priors@priors_stan_input
stan_input$M <- M
M <- 4
stan_input$M <- M
samples <- NULL; point_estimate <- NULL
if(full_sample){
samples <- rstan::sampling(mod, data=stan_input,...)
}else{
point_estimate <- rstan::optimizing(mod, data=stan_input,as_vector=FALSE, ...)
}
full_sample <- TRUE
if(full_sample){
samples <- rstan::sampling(mod, data=stan_input,...)
}else{
point_estimate <- rstan::optimizing(mod, data=stan_input,as_vector=FALSE, ...)
}
if(full_sample){
samples <- rstan::sampling(mod, data=stan_input)
}else{
point_estimate <- rstan::optimizing(mod, data=stan_input,as_vector=FALSE, ...)
}
stan_input$M <- priors@d
if(full_sample){
samples <- rstan::sampling(mod, data=stan_input)
}else{
point_estimate <- rstan::optimizing(mod, data=stan_input,as_vector=FALSE, ...)
}
stan_input$M <- M
stan_input$N <- priors@d
samples <- NULL; point_estimate <- NULL
if(full_sample){
samples <- rstan::sampling(mod, data=stan_input)
}else{
point_estimate <- rstan::optimizing(mod, data=stan_input,as_vector=FALSE, ...)
}
mod <- stan_model(file = "inst/stan/ensemble_prior.stan")
stan_input <- priors@priors_stan_input
stan_input$M <- M
stan_input$N <- priors@d
samples <- NULL; point_estimate <- NULL
if(full_sample){
samples <- rstan::sampling(mod, data=stan_input)
}else{
point_estimate <- rstan::optimizing(mod, data=stan_input,as_vector=FALSE, ...)
}
plot(smaples)
plot(samples)
plot(samples, pars = 11:10)
plot(samples, pars = 11:20)
sam_priors <- list(samples=samples, point_estimate=point_estimate))
if(is.missing(sam_priors))
sam_priors <- prior_ensemble_model(priors, full_sample = TRUE,M=length(simulators), ...)
ens_data <- EnsembleData(observations, simulators, priors)
?fit_ensemble_model
observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer"))
observations = list(SSB_obs, Sigma_obs)
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer"))
ens_data <- EnsembleData(observations, simulators, priors)
fit_prior <- EnsembleFit(ens_data, sam_priors$samples, sam_priors$point_estimate)
sam_priors <- list(samples=samples, point_estimate=point_estimate))
sam_priors <- list(samples=samples, point_estimate=point_estimate)
fit_prior <- EnsembleFit(ens_data, sam_priors$samples, sam_priors$point_estimate)
generate_sample(fit_prior,num_samples = num_samples)
generate_sample(fit_prior)
lil_sammy_sample <- generate_sample(fit_prior)
lil_sammy_sample <- generate_sample(fit_prior)
lil_sammy_sample
plot(lil_sammy_sample)
traceback()
#' Plot the ensemble output
#'
#'Plots the latent variables predicted by the ensemble model, along with simulator outputs and observations.
#'@param x An `EnsembleSample` object.
#'@param variable The name of the variable to plot. This can either be a `character` string in the same form as the observation variable, or an index for the column in the observations data frame.
#'@param quantiles A `numeric` vector of length 2 giving the quantiles for which to plot ribbons if doing a full sampling of the ensemble model. The default is `c(0.05,0.95)`.
#'@param ... Other arguments passed on to methods. Not currently used.
#'@return The `ggplot` object.
#'@importFrom stats median
#'@importFrom stats quantile
#'@importFrom stats rnorm
#'@importFrom cowplot plot_grid
#'@export
#'@examples
#'\donttest{
#'fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
#'                          simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
#'                                            list(SSB_fs,  Sigma_fs, "FishSUMS"),
#'                                            list(SSB_lm,  Sigma_lm, "LeMans"),
#'                                            list(SSB_miz, Sigma_miz, "Mizer")),
#'                          priors = priors)
#'samples <- generate_sample(fit_sample, num_samples = 2000)
#'plot(samples)
#'plot(samples, variable = "Cod", quantiles=c(0.2, 0.8))
#'
#'
#'fit_point <-fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
#'                               simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
#'                                            list(SSB_fs,  Sigma_fs, "FishSUMS"),
#'                                            list(SSB_lm,  Sigma_lm, "LeMans"),
#'                                            list(SSB_miz, Sigma_miz, "Mizer")),
#'                                priors = priors,
#'                                full_sample = FALSE)
#'samples1 <- generate_sample(fit_point, num_samples = 2000)
#'plot(samples1, variable="Herring")
#'}
plot.EnsembleSample <- function(x, variable = NULL, quantiles=c(0.05, 0.95), ...){
if(!is.null(variable)){
return(plot_single(x, variable, quantiles, ...))
}
d <- x@ensemble_fit@ensemble_data@priors@d
plots_all <- lapply(1:d, function(i){plot_single(x, i, quantiles, ...) + ggplot2::theme(legend.position = "none")})
legend <- cowplot::get_legend(plot_single(x, 1))
plots_all <- append(plots_all, list(legend))
return(
do.call(cowplot::plot_grid, plots_all)
)
}
# Fudge to get past "no visible binding for global variable" in R-CMD check
utils::globalVariables(c("Year", "EnsembleLower", "EnsembleUpper", "value", "Simulator"))
plot_single <- function(samples, variable=1, quantiles=c(0.05, 0.95), ...){
fit <- samples@ensemble_fit
ensemble_data <- fit@ensemble_data
observations <- ensemble_data@observations[[1]]
simulators <- ensemble_data@simulators
stan_input <- ensemble_data@stan_input
# Find which variable we are interested in
if(is.double(variable) || is.integer(variable)){
if (abs(variable - round(variable)) > .Machine$double.eps^0.5){
warning("Non-integer variable specified. variable will be taken as floor(variable). This is done by R, strange isn't it?!")
}
variable <- colnames(observations)[variable]
}
if (is.na(variable)
|| !(variable %in% colnames(observations) )){
stop(paste0("Invalid variable. This should be the name of a species or an index less than ",
ncol(observations) + 1))
}
df <- tibble::rownames_to_column(observations)[, c("rowname", variable)]
colnames(df) <- c("Year", "Observations")
for (i in 1:length(simulators)) {
simulator <- simulators[[i]]
#Skip simulators that dont have the species
if (!(variable %in% colnames(simulator[[1]]))){
next
}
df_sim <- tibble::rownames_to_column(simulator[[1]], var = "Year")[, c("Year", variable)]
#Use the name if available
colnames(df_sim)[2] <- paste0("Simulator ", i)
if (length(simulator) == 3){
colnames(df_sim)[2] <- simulator[[3]]
}
df <- dplyr::full_join(df, df_sim, by = "Year")
}
var_index = which(colnames(observations) == variable)
if(!is.null(fit@samples)){
df <- cbind(df, apply(samples@mle[, var_index, ], 1, median))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, min(quantiles), na.rm = TRUE))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, max(quantiles), na.rm = TRUE))
df <- data.frame(df)
df$Year <- as.numeric(df$Year)
colnames(df)[(ncol(df) - 2):ncol(df)] <- c("Ensemble Model Prediction", "EnsembleLower", "EnsembleUpper")
df_plot <-  reshape2::melt(df, id.vars=c("Year", "EnsembleLower", "EnsembleUpper"), variable.name="Simulator")
df_plot[df_plot$Simulator != "Ensemble Model Prediction", c("EnsembleLower", "EnsembleUpper")] <- c(NA, NA)
return(plot_values_sample_gg(df_plot, variable), ...)
}else{
df <- cbind(df, samples@mle[, var_index])
df <- data.frame(df)
df$Year <- as.numeric(df$Year)
colnames(df)[ncol(df)] <- "Ensemble Model Prediction"
df_plot <-  reshape2::melt(df, id.vars=c("Year"), variable.name="Simulator")
return(plot_values_optimised_gg(df_plot, variable, ...))
}
}
plot_values_optimised_gg<- function(df, title, ...){
p <- ggplot2::ggplot(data=df, ggplot2::aes(x=`Year`, y=`value`, na.rm = TRUE), ...) + ggplot2::geom_line(ggplot2::aes(group=`Simulator`,colour=`Simulator`), na.rm = TRUE) + ggplot2::ggtitle(title)
return(p)
}
plot_values_sample_gg<- function(df, title, ...){
return(plot_values_optimised_gg(df, title, ...) + ggplot2::geom_ribbon(ggplot2::aes(ymin=`EnsembleLower`, ymax =`EnsembleUpper`, fill = `Simulator`), alpha=0.2))
}
plot(lil_sammy_sample)
plot(lil_sammy_sample, variable = 1)
traceback()
lil_sammy_sample@ensemble_fit@ensemble_data
traceback()
samples <- lil_sammy_sample
variable=1
quantiles=c(0.05, 0.95)
fit <- samples@ensemble_fit
ensemble_data <- fit@ensemble_data
observations <- ensemble_data@observations[[1]]
simulators <- ensemble_data@simulators
stan_input <- ensemble_data@stan_input
# Find which variable we are interested in
if(is.double(variable) || is.integer(variable)){
if (abs(variable - round(variable)) > .Machine$double.eps^0.5){
warning("Non-integer variable specified. variable will be taken as floor(variable). This is done by R, strange isn't it?!")
}
variable <- colnames(observations)[variable]
}
if (is.na(variable)
|| !(variable %in% colnames(observations) )){
stop(paste0("Invalid variable. This should be the name of a species or an index less than ",
ncol(observations) + 1))
}
df <- tibble::rownames_to_column(observations)[, c("rowname", variable)]
colnames(df) <- c("Year", "Observations")
for (i in 1:length(simulators)) {
simulator <- simulators[[i]]
#Skip simulators that dont have the species
if (!(variable %in% colnames(simulator[[1]]))){
next
}
df_sim <- tibble::rownames_to_column(simulator[[1]], var = "Year")[, c("Year", variable)]
#Use the name if available
colnames(df_sim)[2] <- paste0("Simulator ", i)
if (length(simulator) == 3){
colnames(df_sim)[2] <- simulator[[3]]
}
df <- dplyr::full_join(df, df_sim, by = "Year")
}
var_index = which(colnames(observations) == variable)
if(!is.null(fit@samples)){
df <- cbind(df, apply(samples@mle[, var_index, ], 1, median))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, min(quantiles), na.rm = TRUE))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, max(quantiles), na.rm = TRUE))
df <- data.frame(df)
df$Year <- as.numeric(df$Year)
colnames(df)[(ncol(df) - 2):ncol(df)] <- c("Ensemble Model Prediction", "EnsembleLower", "EnsembleUpper")
df_plot <-  reshape2::melt(df, id.vars=c("Year", "EnsembleLower", "EnsembleUpper"), variable.name="Simulator")
df_plot[df_plot$Simulator != "Ensemble Model Prediction", c("EnsembleLower", "EnsembleUpper")] <- c(NA, NA)
return(plot_values_sample_gg(df_plot, variable), ...)
}else{
df <- cbind(df, samples@mle[, var_index])
df <- data.frame(df)
df$Year <- as.numeric(df$Year)
colnames(df)[ncol(df)] <- "Ensemble Model Prediction"
df_plot <-  reshape2::melt(df, id.vars=c("Year"), variable.name="Simulator")
return(plot_values_optimised_gg(df_plot, variable, ...))
}
df <- tibble::rownames_to_column(observations)[, c("rowname", variable)]
colnames(df) <- c("Year", "Observations")
for (i in 1:length(simulators)) {
simulator <- simulators[[i]]
#Skip simulators that dont have the species
if (!(variable %in% colnames(simulator[[1]]))){
next
}
df_sim <- tibble::rownames_to_column(simulator[[1]], var = "Year")[, c("Year", variable)]
#Use the name if available
colnames(df_sim)[2] <- paste0("Simulator ", i)
if (length(simulator) == 3){
colnames(df_sim)[2] <- simulator[[3]]
}
df <- dplyr::full_join(df, df_sim, by = "Year")
}
var_index = which(colnames(observations) == variable)
df <- cbind(df, apply(samples@mle[, var_index, ], 1, median))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, min(quantiles), na.rm = TRUE))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, max(quantiles), na.rm = TRUE))
View(df)
df <- data.frame(df)
df$Year <- as.numeric(df$Year)
colnames(df)[(ncol(df) - 2):ncol(df)] <- c("Ensemble Model Prediction", "EnsembleLower", "EnsembleUpper")
df_plot <-  reshape2::melt(df, id.vars=c("Year", "EnsembleLower", "EnsembleUpper"), variable.name="Simulator")
df_plot[df_plot$Simulator != "Ensemble Model Prediction", c("EnsembleLower", "EnsembleUpper")] <- c(NA, NA)
View(df_plot)
plot_values_sample_gg(df_plot, "njk")
p <- ggplot2::ggplot(data=df, ggplot2::aes(x=`Year`, y=`value`, na.rm = TRUE), ...) + ggplot2::geom_line(ggplot2::aes(group=`Simulator`,colour=`Simulator`), na.rm = TRUE) + ggplot2::ggtitle(title)
p <- ggplot2::ggplot(data=df, ggplot2::aes(x=`Year`, y=`value`, na.rm = TRUE)) + ggplot2::geom_line(ggplot2::aes(group=`Simulator`,colour=`Simulator`), na.rm = TRUE) + ggplot2::ggtitle("bjk")
p
p <- ggplot2::ggplot(data=df_plot, ggplot2::aes(x=`Year`, y=`value`, na.rm = TRUE)) + ggplot2::geom_line(ggplot2::aes(group=`Simulator`,colour=`Simulator`), na.rm = TRUE) + ggplot2::ggtitle("bjk")
p
0 + ggplot2::geom_ribbon(ggplot2::aes(ymin=`EnsembleLower`, ymax =`EnsembleUpper`, fill = `Simulator`), alpha=0.2)
p + ggplot2::geom_ribbon(ggplot2::aes(ymin=`EnsembleLower`, ymax =`EnsembleUpper`, fill = `Simulator`), alpha=0.2)
plot(lil_sammy_sample)
#' Plot the ensemble output
#'
#'Plots the latent variables predicted by the ensemble model, along with simulator outputs and observations.
#'@param x An `EnsembleSample` object.
#'@param variable The name of the variable to plot. This can either be a `character` string in the same form as the observation variable, or an index for the column in the observations data frame.
#'@param quantiles A `numeric` vector of length 2 giving the quantiles for which to plot ribbons if doing a full sampling of the ensemble model. The default is `c(0.05,0.95)`.
#'@param ... Other arguments passed on to methods. Not currently used.
#'@return The `ggplot` object.
#'@importFrom stats median
#'@importFrom stats quantile
#'@importFrom stats rnorm
#'@importFrom cowplot plot_grid
#'@export
#'@examples
#'\donttest{
#'fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
#'                          simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
#'                                            list(SSB_fs,  Sigma_fs, "FishSUMS"),
#'                                            list(SSB_lm,  Sigma_lm, "LeMans"),
#'                                            list(SSB_miz, Sigma_miz, "Mizer")),
#'                          priors = priors)
#'samples <- generate_sample(fit_sample, num_samples = 2000)
#'plot(samples)
#'plot(samples, variable = "Cod", quantiles=c(0.2, 0.8))
#'
#'
#'fit_point <-fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
#'                               simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
#'                                            list(SSB_fs,  Sigma_fs, "FishSUMS"),
#'                                            list(SSB_lm,  Sigma_lm, "LeMans"),
#'                                            list(SSB_miz, Sigma_miz, "Mizer")),
#'                                priors = priors,
#'                                full_sample = FALSE)
#'samples1 <- generate_sample(fit_point, num_samples = 2000)
#'plot(samples1, variable="Herring")
#'}
plot.EnsembleSample <- function(x, variable = NULL, quantiles=c(0.05, 0.95), ...){
if(!is.null(variable)){
return(plot_single(x, variable, quantiles, ...))
}
d <- x@ensemble_fit@ensemble_data@priors@d
plots_all <- lapply(1:d, function(i){plot_single(x, i, quantiles, ...) + ggplot2::theme(legend.position = "none")})
legend <- cowplot::get_legend(plot_single(x, 1))
plots_all <- append(plots_all, list(legend))
return(
do.call(cowplot::plot_grid, plots_all)
)
}
# Fudge to get past "no visible binding for global variable" in R-CMD check
utils::globalVariables(c("Year", "EnsembleLower", "EnsembleUpper", "value", "Simulator"))
plot_single <- function(samples, variable=1, quantiles=c(0.05, 0.95), ...){
fit <- samples@ensemble_fit
ensemble_data <- fit@ensemble_data
observations <- ensemble_data@observations[[1]]
simulators <- ensemble_data@simulators
stan_input <- ensemble_data@stan_input
# Find which variable we are interested in
if(is.double(variable) || is.integer(variable)){
if (abs(variable - round(variable)) > .Machine$double.eps^0.5){
warning("Non-integer variable specified. variable will be taken as floor(variable). This is done by R, strange isn't it?!")
}
variable <- colnames(observations)[variable]
}
if (is.na(variable)
|| !(variable %in% colnames(observations) )){
stop(paste0("Invalid variable. This should be the name of a species or an index less than ",
ncol(observations) + 1))
}
df <- tibble::rownames_to_column(observations)[, c("rowname", variable)]
colnames(df) <- c("Year", "Observations")
for (i in 1:length(simulators)) {
simulator <- simulators[[i]]
#Skip simulators that dont have the species
if (!(variable %in% colnames(simulator[[1]]))){
next
}
df_sim <- tibble::rownames_to_column(simulator[[1]], var = "Year")[, c("Year", variable)]
#Use the name if available
colnames(df_sim)[2] <- paste0("Simulator ", i)
if (length(simulator) == 3){
colnames(df_sim)[2] <- simulator[[3]]
}
df <- dplyr::full_join(df, df_sim, by = "Year")
}
var_index = which(colnames(observations) == variable)
if(!is.null(fit@samples)){
df <- cbind(df, apply(samples@mle[, var_index, ], 1, median))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, min(quantiles), na.rm = TRUE))
df <- cbind(df, apply(samples@samples[, var_index, ], 1, quantile, max(quantiles), na.rm = TRUE))
df <- data.frame(df)
df$Year <- as.numeric(df$Year)
colnames(df)[(ncol(df) - 2):ncol(df)] <- c("Ensemble Model Prediction", "EnsembleLower", "EnsembleUpper")
df_plot <-  reshape2::melt(df, id.vars=c("Year", "EnsembleLower", "EnsembleUpper"), variable.name="Simulator")
df_plot[df_plot$Simulator != "Ensemble Model Prediction", c("EnsembleLower", "EnsembleUpper")] <- c(NA, NA)
return(plot_values_sample_gg(df_plot, variable, ...))
}else{
df <- cbind(df, samples@mle[, var_index])
df <- data.frame(df)
df$Year <- as.numeric(df$Year)
colnames(df)[ncol(df)] <- "Ensemble Model Prediction"
df_plot <-  reshape2::melt(df, id.vars=c("Year"), variable.name="Simulator")
return(plot_values_optimised_gg(df_plot, variable, ...))
}
}
plot_values_optimised_gg<- function(df, title, ...){
p <- ggplot2::ggplot(data=df, ggplot2::aes(x=`Year`, y=`value`, na.rm = TRUE), ...) + ggplot2::geom_line(ggplot2::aes(group=`Simulator`,colour=`Simulator`), na.rm = TRUE) + ggplot2::ggtitle(title)
return(p)
}
plot_values_sample_gg<- function(df, title, ...){
return(plot_values_optimised_gg(df, title, ...) + ggplot2::geom_ribbon(ggplot2::aes(ymin=`EnsembleLower`, ymax =`EnsembleUpper`, fill = `Simulator`), alpha=0.2))
}
plot(lil_sammy_sample)
plot(lil_sammy_sample)
missing
missing(mjfs])
missing(mjfs)
rm("sam_priors")
if(exists(sam_priors))
sam_priors <- prior_ensemble_model(priors, full_sample = full_sample,M=length(simulators), ...)
?list
sam_priors <- list(samples=samples, point_estimate=point_estimate)
sam_priors
sam_priors$samples
colnames(sam_priors$samples)
prior_ensemble_model(priors, full_sample = full_sample,M=lengt
h(simulators))
?EnsemblePrior
roxygen2::roxygenise()
devtools::install(quick = TRUE)
roxygen2::roxygenise()
rm(list = c("plot.EnsembleSample", "plot_single", "plot_values_optimised_gg", "plot_values_sample_gg"))
load_all()
devtools::load_all()
roxygen2::roxygenise()
?sample_prior
?prior_ensemble_model
devtools::install()
devtools::install(quick = TRUE
)
roxygen2::roxygenise()
library(devtools)
check_win_devel()
