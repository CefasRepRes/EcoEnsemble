{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=0,upper=1)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[25]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=0,upper=3000)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[26]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=8970047,upper=26910141)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[27]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=38.235,upper=114.705)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[28]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=0.33125,upper=0.99375)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[29]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=0.5545,upper=1.6635)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[30]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=0,upper=1)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[31]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=0,upper=1)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[32]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=0.000360417,upper=0.001081251)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[33]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=6.27365e-05,upper=0.0001882095)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[34]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=-0.5,upper=0.5)
return(parameter_star)
}
bioeconomic_smc_proposals_simulate[[35]] = function(conditioned_on_parameter,other_parameters,proposal_covariance,num_sim=1)
{
parameter_star = rtnorm(num_sim,conditioned_on_parameter,sqrt(proposal_covariance),lower=0,upper=2)
return(parameter_star)
}
bioeconomic_proposals_index = list()
bioeconomic_proposals_index[[1]] = c(INPUTS$initialSJ)
bioeconomic_proposals_index[[2]] = c(INPUTS$initialSA)
bioeconomic_proposals_index[[3]] = c(INPUTS$initialR)
bioeconomic_proposals_index[[4]] = c(INPUTS$muA)
bioeconomic_proposals_index[[5]] = c(INPUTS$muJ)
bioeconomic_proposals_index[[6]] = c(INPUTS$nu)
bioeconomic_proposals_index[[7]] = c(INPUTS$b)
bioeconomic_proposals_index[[8]] = c(INPUTS$Lambda)
bioeconomic_proposals_index[[9]] = c(INPUTS$meas_noise1)
bioeconomic_proposals_index[[10]] = c(INPUTS$meas_noise2)
bioeconomic_proposals_index[[11]] = c(INPUTS$q)
bioeconomic_proposals_index[[12]] = c(INPUTS$theta)
bioeconomic_proposals_index[[13]] = c(INPUTS$gamma)
bioeconomic_proposals_index[[14]] = c(INPUTS$g)
bioeconomic_proposals_index[[15]] = c(INPUTS$p)
bioeconomic_proposals_index[[16]] = c(INPUTS$WR)
bioeconomic_proposals_index[[17]] = c(INPUTS$WC)
bioeconomic_proposals_index[[18]] = c(INPUTS$WA)
bioeconomic_proposals_index[[19]] = c(INPUTS$phiCJ)
bioeconomic_proposals_index[[20]] = c(INPUTS$phiCA)
bioeconomic_proposals_index[[21]] = c(INPUTS$phiRJ)
bioeconomic_proposals_index[[22]] = c(INPUTS$phiRA)
bioeconomic_proposals_index[[23]] = c(INPUTS$sigma)
bioeconomic_proposals_index[[24]] = c(INPUTS$zeta)
bioeconomic_proposals_index[[25]] = c(INPUTS$baromega)
bioeconomic_proposals_index[[26]] = c(INPUTS$phi)
bioeconomic_proposals_index[[27]] = c(INPUTS$lambda)
bioeconomic_proposals_index[[28]] = c(INPUTS$chiR)
bioeconomic_proposals_index[[29]] = c(INPUTS$chiC)
bioeconomic_proposals_index[[30]] = c(INPUTS$delta)
bioeconomic_proposals_index[[31]] = c(INPUTS$eta)
bioeconomic_proposals_index[[32]] = c(INPUTS$alpha)
bioeconomic_proposals_index[[33]] = c(INPUTS$beta)
bioeconomic_proposals_index[[34]] = c(INPUTS$varepsilon_mean)
bioeconomic_proposals_index[[35]] = c(INPUTS$varepsilon_sd)
bioeconomic_max_measurement_model = function(measurement_model_parameter)
{
return(-0.5*((log(2)+log(pi)+2*log(measurement_model_parameter[1]))+(log(2)+log(pi)+2*log(measurement_model_parameter[2]))))
}
bioeconomic_measurement_model_logevaluate = function(data,y,measurement_model_parameter)
{
return(dnorm(y[1],mean=data[1],sd=measurement_model_parameter[1],log=TRUE)+dnorm(y[2],mean=data[2],sd=measurement_model_parameter[2],log=TRUE)-bioeconomic_max_measurement_model(measurement_model_parameter))
}
bioeconomic_summary <- function(ts)
{
matrix(ts,2*nrow(ts))
}
method = "abc_rejection"
if (method=="abc_rejection") {
plan(multiprocess,workers=1)
result_rejection = abc_rejection(num_points=200000,proportion=0.0005,inputs=bioeconomic_inputs,priors_index=bioeconomic_priors_index,y=data,simulator=bioeconomic_simulate,priors_simulate=bioeconomic_priors_simulate,abc_summary=bioeconomic_summary)
bioeconomic_summary_scaling = result_rejection[[9]]
} else if (method=="abc_mcmc") {
bioeconomic_summary_scaling = c(3.431263e-08,3.708283e-08,3.984442e-08,4.204578e-08,4.358026e-08,4.455449e-08,4.518127e-08,4.563318e-08,4.591239e-08,4.610429e-08,4.626288e-08,4.638001e-08,4.641567e-08,4.656273e-08,4.634035e-08,4.643918e-08,4.647605e-08,4.644563e-08,4.649221e-08,4.654418e-08,4.658500e-08,4.657196e-08,4.639943e-08,4.670054e-08,4.644242e-08,4.655699e-08,4.652964e-08,4.655894e-08,4.671293e-08,4.658636e-08,4.657720e-08,2.402895e-07,1.910058e-07,1.742488e-07,1.667177e-07,1.626835e-07,1.628216e-07,1.620355e-07,1.610845e-07,1.608985e-07,1.602430e-07,1.589109e-07,1.579363e-07,1.572785e-07,1.564230e-07,1.556754e-07,1.551813e-07,1.549846e-07,1.542193e-07,1.542398e-07,1.528065e-07,1.528880e-07,1.528239e-07,1.522503e-07,1.520935e-07,1.518204e-07,1.515532e-07,1.512857e-07,1.503979e-07,1.511369e-07,1.503763e-07,1.505904e-07)
result_mcmc = abc_mcmc(num_mcmc=10000,y=data,simulator=bioeconomic_simulate,inputs=bioeconomic_inputs,priors_index=bioeconomic_mcmc_priors_index,proposals_index=bioeconomic_proposals_index,priors_logevaluate=bioeconomic_mcmc_priors_logevaluate,proposals_simulate=bioeconomic_proposals_simulate,proposals_logevaluate=bioeconomic_proposals_logevaluate,tolerance=5.5,summary_scaling=bioeconomic_summary_scaling,time_initialising=15)
} else if (method=="abc_smc") {
bioeconomic_summary_scaling = c(3.431263e-08,3.708283e-08,3.984442e-08,4.204578e-08,4.358026e-08,4.455449e-08,4.518127e-08,4.563318e-08,4.591239e-08,4.610429e-08,4.626288e-08,4.638001e-08,4.641567e-08,4.656273e-08,4.634035e-08,4.643918e-08,4.647605e-08,4.644563e-08,4.649221e-08,4.654418e-08,4.658500e-08,4.657196e-08,4.639943e-08,4.670054e-08,4.644242e-08,4.655699e-08,4.652964e-08,4.655894e-08,4.671293e-08,4.658636e-08,4.657720e-08,2.402895e-07,1.910058e-07,1.742488e-07,1.667177e-07,1.626835e-07,1.628216e-07,1.620355e-07,1.610845e-07,1.608985e-07,1.602430e-07,1.589109e-07,1.579363e-07,1.572785e-07,1.564230e-07,1.556754e-07,1.551813e-07,1.549846e-07,1.542193e-07,1.542398e-07,1.528065e-07,1.528880e-07,1.528239e-07,1.522503e-07,1.520935e-07,1.518204e-07,1.515532e-07,1.512857e-07,1.503979e-07,1.511369e-07,1.503763e-07,1.505904e-07)
result_smc = abc_smc(num_particles=20000,num_unique=100,y=data,simulator=bioeconomic_simulate,inputs=bioeconomic_inputs,priors_logevaluate=bioeconomic_mcmc_priors_logevaluate,priors_simulate=bioeconomic_mcmc_priors_simulate,priors_index=bioeconomic_mcmc_priors_index,proposals_simulate=bioeconomic_smc_proposals_simulate,proposals_logevaluate=bioeconomic_smc_proposals_logevaluate,proposals_index=bioeconomic_proposals_index,tolerance=0.5,summary_scaling=bioeconomic_summary_scaling,abc_summary=bioeconomic_summary)
} else if (method=="sl_mcmc") {
bioeconomic_summary_scaling = c(3.431263e-08,3.708283e-08,3.984442e-08,4.204578e-08,4.358026e-08,4.455449e-08,4.518127e-08,4.563318e-08,4.591239e-08,4.610429e-08,4.626288e-08,4.638001e-08,4.641567e-08,4.656273e-08,4.634035e-08,4.643918e-08,4.647605e-08,4.644563e-08,4.649221e-08,4.654418e-08,4.658500e-08,4.657196e-08,4.639943e-08,4.670054e-08,4.644242e-08,4.655699e-08,4.652964e-08,4.655894e-08,4.671293e-08,4.658636e-08,4.657720e-08,2.402895e-07,1.910058e-07,1.742488e-07,1.667177e-07,1.626835e-07,1.628216e-07,1.620355e-07,1.610845e-07,1.608985e-07,1.602430e-07,1.589109e-07,1.579363e-07,1.572785e-07,1.564230e-07,1.556754e-07,1.551813e-07,1.549846e-07,1.542193e-07,1.542398e-07,1.528065e-07,1.528880e-07,1.528239e-07,1.522503e-07,1.520935e-07,1.518204e-07,1.515532e-07,1.512857e-07,1.503979e-07,1.511369e-07,1.503763e-07,1.505904e-07)
result_sl = sl_mcmc(num_mcmc=10000,y=data,simulator=bioeconomic_simulate,inputs=bioeconomic_inputs,priors_index=bioeconomic_mcmc_priors_index,proposals_index=bioeconomic_proposals_index,priors_logevaluate=bioeconomic_mcmc_priors_logevaluate,proposals_simulate=bioeconomic_proposals_simulate,proposals_logevaluate=bioeconomic_proposals_logevaluate,summary_scaling=bioeconomic_summary_scaling,num_sl_sims=500)
} else if (method=="particle_mcmc") {
result_pf = particle_mcmc(num_mcmc=20000,y=data,step_simulator=bioeconomic_simulate_step,initial_step_simulator=bioeconomic_simulate_initial_step,measurement_model_logevaluate=bioeconomic_measurement_model_logevaluate,max_measurement_model=bioeconomic_max_measurement_model,inputs=bioeconomic_inputs,priors_logevaluate=bioeconomic_mcmc_priors_logevaluate,priors_index=bioeconomic_mcmc_priors_index,proposals_simulate=bioeconomic_proposals_simulate,proposals_logevaluate=bioeconomic_proposals_logevaluate,proposals_index=bioeconomic_proposals_index,measurement_model_parameter_index=bioeconomic_measurement_model_parameter_index,num_particles=200,store_states=TRUE,store_data=TRUE,cores=1)
} else if (method=="smc_squared") {
result_smc2 = smc_squared(num_particles=100,num_pmcmc_particles=1000,y=data,step_simulator=bioeconomic_simulate_step,initial_step_simulator=bioeconomic_simulate_initial_step,measurement_model_logevaluate=bioeconomic_measurement_model_logevaluate,max_measurement_model=bioeconomic_max_measurement_model,inputs=bioeconomic_inputs,priors_logevaluate=bioeconomic_mcmc_priors_logevaluate,priors_simulate=bioeconomic_mcmc_priors_simulate,priors_index=bioeconomic_mcmc_priors_index,proposals_simulate=bioeconomic_smc_proposals_simulate,proposals_logevaluate=bioeconomic_smc_proposals_logevaluate,proposals_index=bioeconomic_proposals_index,measurement_model_parameter_index=bioeconomic_measurement_model_parameter_index,resample_threshold=0.5,pmcmc_resample_threshold=0.5,store_states=TRUE,store_data=TRUE,cores=1)
}
N <- 1000
data <- matrix(rnorm(2*N), ncol = 2)
factory_neg_log_likelihood <- function(dataset){
data <- dataset
return(neg_log_likelihood)
}
neg_log_likelihood <- function(theta){
# Independent uniform Gaussians
ret <- - sum(dnorm(data[, 1], mean = theta[1], log = TRUE)) - sum(dnorm(data[, 2], mean = theta[2], log = TRUE))
return(ret)
}
factory_grad_neg_log_likelihood <- function(dataset, dt){
neg_log <- factory_neg_log_likelihood(dataset = dataset)
ret <- function(theta, dt){
(neg_log(theta + c(dt, dt)) - neg_log(theta))/dt
}
return(ret)
}
factory_neg_log_likelihood(data)(c(0,0.1))
T <- 1e4
dt = 0.1
grad_dt <- 0.01
sqrt_dt <- sqrt(dt)
grad <- factory_grad_neg_log_likelihood(data)
theta <- matrix(0, nrow = T, ncol = 2)
j <- 1;
while(j < T){
theta[j + 1, ] <- theta[j, ] -  0.5*dt* grad(theta[j, ], dt = grad_dt) + sqrt_dt*rnorm(2)
j <- j + 1
}
colMeans(data)
colMeans(theta)
colMeans(theta[round(T/10):T, ])
plot(theta[, 1], theta[, 2], type = "b", pch=19)
N <- 3
x_i <- c(0, runif(N-2, 0, 10), 10)
f_i <- numeric(N)
laplace_inter_poly <- function(x){
return(prod(x_i - x))
}
x <- seq(0, 10, by = 0.01)
plot(x, sapply(x, laplace_inter_poly), type = "l")
points(x_i, f_i, col="red", pch=19)
abline(h=0, lty=2)
x <- rnorm(100)
par(mfrow=c(3, 1))
plot.ts(x, main = "Coastal")
plot.ts(x, main = "Coastal")
plot.ts(x, main = "Coastal")
?getSlots()
slot(params, q)
?EcoEnsemble::get_mcmc_ensemble_model
roxygen2::roxygenise()
devtools::install(quick=TRUE)
devtools::install(quick=TRUE)
?rstan::optimizing
load("vignettes/data/initial_run.RData"
)
load("vignettes/data/initial_run_looser.RData")
sample_loose <- sample; fit_loose <- fit_sample
save(fit_loose, sample_loose, file = "vignettes/data/initial_run_looser.RData")
devtools::build_manual()
?devtools::build_vignettes()
library(EcoEnsemble)
mod <- get_mcmc_ensemble_model()
library(EcoEnsemble)
priors <- define_priors(ind_st_var_params = list(25, 0.25),
ind_st_cor_form = "lkj",
ind_st_cor_params = 30,
ind_lt_var_params = list(c(25, 25, 25, 10),c(25, 25, 25, 0.1)),
ind_lt_cor_form = "beta",
ind_lt_cor_params = list(matrix(40, 4, 4), matrix(40, 4, 4)),
sha_st_var_exp = 3,
sha_st_cor_form = "lkj",
sha_st_cor_params = 30,
sha_lt_sd = c(5,5,5,5))
ens_data <- EnsembleData(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_lm,  Sigma_lm,  "LeMans"),
list(SSB_miz, Sigma_miz, "mizer"),
list(SSB_fs,  Sigma_fs,  "FishSUMS")),
priors = priors)
mod <- get_mcmc_ensemble_model()
point_estimate <- rstan::optimizing(mod, ens_data@stan_input)
fit <- EnsembleFit(ens_data, point_estimate = point_estimate)
transf_data <- get_transformed_data(fit)
library(stringr)
raw <-
"
@article{kennedy_ohagan,
author = {Kennedy, Marc C. and O'Hagan, Anthony},
title = {Bayesian calibration of computer models},
journal = {Journal of the Royal Statistical Society: Series B (Statistical Methodology)},
volume = {63},
number = {3},
pages = {425-464},
year = {2001}
}"
extract_params <- function(raw, field = "author"){
index <- str_locate(raw, paste0(field, " = \\{"))
index_end <- index[2]
remainder <- str_sub(raw, start = index_end + 1 )
params_end <- str_locate(remainder, "\\}")[1]
if(!is.na(str_locate(remainder, "\\{")[1]) &&
str_locate(remainder, "\\{")[1] < params_end){
warning("Escaped characters in parameter values - please check!")
}
params <- str_sub(remainder, end = params_end  - 1)
if(field != "author"){
return(params)
}
params_lower <- str_to_lower(params)
#Split up by people
new_author_starts <- str_locate_all(params_lower, "and")[[1]][, 2]
authors <- character(length(new_author_starts) + 1)
for (new_author in 1:length(new_author_starts)){
st <- 0
if (new_author != 1)
st <- new_author_starts[new_author - 1] + 2
authors[new_author] <- str_sub(params, start = st, end = new_author_starts[new_author] - 4)
}
st <- new_author_starts[length(new_author_starts)] + 2
authors[length(new_author_starts) + 1] <- str_sub(params, start = st)
# split by name
ret <- "\r\n"
for (author in authors) {
nms <- str_split(author, ", ")[[1]]
ret <- paste0(ret, "   - family: ", nms[1], "\r\n", "     given: ", nms[2], "\r\n")
}
return(ret)
}
append_field <- function(str_markdown, raw, field){
field_r <- field
if(field == "journal"){
field_r <- "container-title"
}else if(field == "pages"){
field_r <- "page"
}
return(paste0(str_markdown, "  ", field_r, ": ", extract_params(raw, field), "\r\n"))
}
# Slightly magic thing for the id too :(
tmp <- str_sub(raw, start = str_locate(raw, "\\{")[1] + 1)
tmp <- str_sub(tmp, end = str_locate(tmp, ",")[1] -  1)
str_markdown <- "- id: "
str_markdown <- paste0(str_markdown, tmp, "\r\n")
str_markdown <- append_field(str_markdown, raw, "title")
str_markdown <- append_field(str_markdown, raw, "author")
str_markdown <- append_field(str_markdown, raw, "journal")
str_markdown <- append_field(str_markdown, raw, "volume")
str_markdown <- append_field(str_markdown, raw, "pages")
str_markdown <- paste0(str_markdown, "  type: article-journal \r\n  issued: \r\n    year: ", extract_params(raw, "year"))
writeLines(str_markdown)
mle_pe <- get_mle(1, ex.fit = point_estimate$par, transformed_data = transf_data,
time = ens_data@stan_input$time)
traceback()
get_parameters(point_estimate$par, 1)
names(point_estimate$par)
names(point_estimate$par) == "x_hat"
sum(names(point_estimate$par) == "x_hat")
ex.fit$par
point_estimate <- rstan::optimizing(mod, ens_data@stan_input,as_vector=FALSE)
fit <- EnsembleFit(ens_data, point_estimate = point_estimate)
transf_data <- get_transformed_data(fit)
mle_pe <- get_mle(1, ex.fit = point_estimate$par, transformed_data = transf_data,
time = ens_data@stan_input$time)
roxygen2::roxygenise()
devtools::build_manual()
N <- 3
x_i <- c(0, runif(N-2, 0, 10), 10)
f_i <- numeric(N)
laplace_inter_poly <- function(x){
return(prod(x_i - x))
}
x <- seq(0, 10, by = 0.01)
plot(x, sapply(x, laplace_inter_poly), type = "l")
points(x_i, f_i, col="red", pch=19)
N <- 1000
data <- matrix(rnorm(2*N), ncol = 2)
factory_neg_log_likelihood <- function(dataset){
data <- dataset
return(neg_log_likelihood)
}
neg_log_likelihood <- function(theta){
# Independent uniform Gaussians
ret <- - sum(dnorm(data[, 1], mean = theta[1], log = TRUE)) - sum(dnorm(data[, 2], mean = theta[2], log = TRUE))
return(ret)
}
factory_grad_neg_log_likelihood <- function(dataset, dt){
neg_log <- factory_neg_log_likelihood(dataset = dataset)
ret <- function(theta, dt){
(neg_log(theta + c(dt, dt)) - neg_log(theta))/dt
}
return(ret)
}
factory_neg_log_likelihood(data)(c(0,0.1))
T <- 1e4
dt = 0.1
grad_dt <- 0.01
sqrt_dt <- sqrt(dt)
grad <- factory_grad_neg_log_likelihood(data)
theta <- matrix(0, nrow = T, ncol = 2)
j <- 1;
while(j < T){
theta[j + 1, ] <- theta[j, ] -  0.5*dt* grad(theta[j, ], dt = grad_dt) + sqrt_dt*rnorm(2)
j <- j + 1
}
colMeans(data)
colMeans(theta)
colMeans(theta[round(T/10):T, ])
plot(theta[, 1], theta[, 2], type = "b", pch=19)
?EcOEnsemble::
?EcOEnsemble
?EcoEnsemble::
?EcoEnsemble
?EcoEnsemble
roxygen2::roxygenise()
?EcoEnsemble
?EcoEnsemble::
roxygen2::roxygenise()
?EcoEnsemble
roxygen2::roxygenise()
roxygen2::roxygenise()
?EcoEnsemble
roxygen2::roxygenise()
?EcoEnsemble
roxygen2::roxygenise()
?EcoEnsemble
roxygen2::roxygenise()
?EcoEnsemble
?define_priors
?define_priors
roxygen2::roxygenise()
roxygen2::roxygenise()
z <- "inv_wishart(10,diag_matrix(rep_vector(1.0,N)))
define_priors <- function(ind_st_cov, ind_lt_cov, sha_st_cov, sha_lt_cov){
ind_st_cov <- list("lkj_corr", list(225, 52), 30)
ind_lt_cov <- list("inv_wishart", list(225, 52))
ind_lt_cov <- list("inv_wishart_corr", list(225, 52), list(10, diag(4)))
prior_y_init_mean_v  #Normal variance params
prior_y_init_var     #Inv gamma param
prior_Sigma_t        # Random walk f y
return(
list(prior_ind_st_var_a = ind_st_var_params[[1]],
prior_ind_st_var_b = ind_st_var_params[[2]],
prior_ind_lt_var_a = ind_lt_var_params[[1]],
prior_ind_lt_var_b = ind_lt_var_params[[2]],
prior_sha_st_var_exp = sha_st_var_exp,
prior_sha_lt_sd = sha_lt_sd,
prior_correlations = list(
ind_st_cor_form = ind_st_cor_form,
ind_st_cor_params = ind_st_cor_params,
ind_lt_cor_form = ind_lt_cor_form,
ind_lt_cor_params = ind_lt_cor_params,
sha_st_cor_form = sha_st_cor_form,
sha_st_cor_params = sha_st_cor_params
)
)
)
}
prior_y_init_mean_v  #Normal variance params
prior_y_init_var     #Inv gamma param
prior_Sigma_t        # Random walk f y"
roxygen2::roxygenise()
z <- "inv_wishart(10,diag_matrix(rep_vector(1.0,N)))
define_priors <- function(ind_st_cov, ind_lt_cov, sha_st_cov, sha_lt_cov){
ind_st_cov <- list("lkj_corr", list(225, 52), 30)
ind_lt_cov <- list("inv_wishart", list(225, 52))
ind_lt_cov <- list("inv_wishart_corr", list(225, 52), list(10, diag(4)))
prior_y_init_mean_v  #Normal variance params
prior_y_init_var     #Inv gamma param
prior_Sigma_t        # Random walk f y
return(
list(prior_ind_st_var_a = ind_st_var_params[[1]],
prior_ind_st_var_b = ind_st_var_params[[2]],
prior_ind_lt_var_a = ind_lt_var_params[[1]],
prior_ind_lt_var_b = ind_lt_var_params[[2]],
prior_sha_st_var_exp = sha_st_var_exp,
prior_sha_lt_sd = sha_lt_sd,
prior_correlations = list(
ind_st_cor_form = ind_st_cor_form,
ind_st_cor_params = ind_st_cor_params,
ind_lt_cor_form = ind_lt_cor_form,
ind_lt_cor_params = ind_lt_cor_params,
sha_st_cor_form = sha_st_cor_form,
sha_st_cor_params = sha_st_cor_params
)
)
)
}
prior_y_init_mean_v  #Normal variance params
prior_y_init_var     #Inv gamma param
prior_Sigma_t        # Random walk f y"
roxygen2::roxygenise()
?define_priors
?EnsembleData
roxygen2::roxygenise()
?EnsembleData
roxygen2::roxygenise()
?EnsembleData
?EnsembleData
roxygen2::roxygenise()
?EnsembleData
devtools::build_manual()
roxygen2::roxygenise()
?EnsembleData
roxygen2::roxygenise()
?EnsembleData
roxygen2::roxygenise()
?EnsembleData
roxygen2::roxygenise()
?EnsembleData
roxygen2::roxygenise()
?EnsembleData
EnsembleData
EnsembleData(NULL, NULL, NULL)
EnsembleData-class
?EcoEnsemble::EnsembleData
?EcoEnsemble::EnsembleData-class
?EcoEnsemble::`EnsembleData-class`
roxygen2::roxygenise()
?EcoEnsemble::`EnsembleData-class`
?EnsembleFit
roxygen2::roxygenise()
?EcoEnsemble::`EnsembleData-class`
?EnsembleFit
rstan::optimizing()
rstan::optimizing()
?rstan::optimizing()
?`EnsembleFit-class`
roxygen2::roxygenise()
?`EnsembleFit-class`
?EnsembleSample
roxygen2::roxygenise()
?EnsembleSample
roxygen2::roxygenise()
?`EnsembleSample-class`
roxygen2::roxygenise()
?`EnsembleSample-class`
roxygen2::roxygenise()
?`EnsembleSample-class`
?`EnsembleFit-class`
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
taceback()
roxygen2::roxygenise()
devtools::build_manual()
traceback()
?EnsembleSample
?`EnsembleSample-class`
?mizer::`MizerSim-class`
roxygen2::roxygenise()
?EnsembleSample
?`EnsembleSample-class`
?ensemble_sample
roxygen2::roxygenise()
?EnsembleSample
?EcoEnsemble::EnsembleSample
?`EnsembleSample-clas`
?`EnsembleSample-class`
?EnsembleSample
likelihood <- function(N){
gamma(10 + 1) /prod(N - 0:9)
}
N_min <- max(dat)
x <- N_min:(N_min + 50)
plot(x, sapply(x, likelihood))
dat <- c(85, 6, 160, 136,  17, 93, 125, 41, 75, 131)
N <- max(dat)
sample(N, 10)
likelihood <- function(N){
gamma(10 + 1) /prod(N - 0:9)
}
N_min <- max(dat)
x <- N_min:(N_min + 50)
plot(x, sapply(x, likelihood))
plot(x, sapply(x, likelihood)/sum(sapply(x, likelihood)))
#If we treat N as a random variable with a uniform prior, then p(N) propto L(N) so that p(N) = L(N)/sum(L(N))
large_range <- (N_min:(N_min + 1e3))
plot(x, sapply(x, likelihood)/sum(sapply(x, likelihood)))
#If we treat N as a random variable with a uniform prior, then p(N) propto L(N) so that p(N) = L(N)/sum(L(N))
large_range <- (N_min:(N_min + 1e3))
probs <- sapply(large_range, likelihood) / sum(sapply(large_range, likelihood))
expected_value <-  sum(large_range * probs)
print(expected_value)
