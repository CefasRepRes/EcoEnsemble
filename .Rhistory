sha_lt_params = 5,
sha_st_params = ShaSTPrior("inv_Wishart", var_params = list(1,1), cor_params = list(5, diag(5)))
)
p <- prior_ensemble_model(prior, M = 2)
install(quick = T)
library(EcoEnsemble)
d <- 5
ist <- IndSTPrior("hierarchical", list(1,2,34,45), list(1,2,3,5))
ist_ <- IndSTPrior("beta", list(1,2), list(matrix(30,5, 5), matrix(30, 5, 5)))
ilt <- IndLTPrior("lkj", var_params = list(12, 12), cor_params = 12)
sst <- ShaSTPrior("inv_Wishart", var_params = list(1,1), cor_params = list(5, diag(5)))
tru <- TruthPrior(5)
# generate_priors_stan_input_ind_st(d, ist)
# generate_priors_stan_input_ind_st(d, ist_)
# generate_priors_stan_input_ind_lt(d, ilt)
# generate_priors_stan_input_sha_st(d, sst)
# generate_priors_stan_input_truth(d, tru)
prior <- EnsemblePrior(d,
ind_st_params = IndSTPrior("hierarchical", list(1,2,34,45), list(1,2,3,5)),
ind_lt_params = IndLTPrior("lkj", var_params = list(12, 12), cor_params = 12),
sha_lt_params = 5,
sha_st_params = ShaSTPrior("inv_Wishart", var_params = list(1,1), cor_params = list(5, diag(5)))
)
p <- prior_ensemble_model(prior, M = 2)
install(quick = T)
prior <- EnsemblePrior(d,
ind_st_params = IndSTPrior("hierarchical", list(1,2,34,45), list(1,2,3,5)),
ind_lt_params = IndLTPrior("lkj", var_params = list(12, 12), cor_params = 12),
sha_lt_params = 5,
sha_st_params = ShaSTPrior("inv_Wishart", var_params = list(1,1), cor_params = list(5, diag(5)))
)
p <- prior_ensemble_model(prior, M = 2)
install(quick = T)
library(EcoEnsemble)
d <- 5
ist <- IndSTPrior("hierarchical", list(1,2,34,45), list(1,2,3,5))
ist_ <- IndSTPrior("beta", list(1,2), list(matrix(30,5, 5), matrix(30, 5, 5)))
ilt <- IndLTPrior("lkj", var_params = list(12, 12), cor_params = 12)
sst <- ShaSTPrior("inv_Wishart", var_params = list(1,1), cor_params = list(5, diag(5)))
tru <- TruthPrior(5)
# generate_priors_stan_input_ind_st(d, ist)
# generate_priors_stan_input_ind_st(d, ist_)
# generate_priors_stan_input_ind_lt(d, ilt)
# generate_priors_stan_input_sha_st(d, sst)
# generate_priors_stan_input_truth(d, tru)
prior <- EnsemblePrior(d,
ind_st_params = IndSTPrior("hierarchical", list(1,2,34,45), list(1,2,3,5)),
ind_lt_params = IndLTPrior("lkj", var_params = list(12, 12), cor_params = 12),
sha_lt_params = 5,
sha_st_params = ShaSTPrior("inv_Wishart", var_params = list(1,1), cor_params = list(5, diag(5)))
)
p <- prior_ensemble_model(prior, M = 2)
prior <- EnsemblePrior(d,
ind_st_params = IndSTPrior("lkj", list(1,2,34,45), 20), #ist,
ind_lt_params = IndLTPrior("lkj", var_params = list(12, 12), cor_params = 12),
sha_lt_params = 5,
sha_st_params = ShaSTPrior("inv_Wishart", var_params = list(1,1), cor_params = list(5, diag(5)))
)
p <- prior_ensemble_model(prior, M = 2)
plot(p)
p$samples
?EnsemblePrior
library(EcoEnsemble)
?EnsemblePrior
library(EcoEnsemble)
?EnsemblePrior
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3, AR_params = c(1,1)),
ind_lt_params = IndLTPrior(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = TruthPrior(10, list(3, 3), list(10, diag(num_species)))
)
priors <- EnsemblePrior(
d = num_species,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3, AR_params = c(1,1)),
ind_lt_params = IndLTPrior(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = TruthPrior(num_species, 10, list(3, 3), list(10, diag(num_species)))
)
priors <- EnsemblePrior(
d = num_species,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3, AR_params = c(1,1)),
ind_lt_params = IndLTPrior(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = TruthPrior(num_species, 10, list(3, 3), list(10, diag(num_species)))
)
p <- prior_ensemble_model(prior, M = 2)
p <- prior_ensemble_model(priors, M = 2)
?TruthPrior
?EnsemblePrior
?IndSTPrior
?EnsemblePrior
roxygen2::roxygenise()
?EnsembleData
?EnsemblePrior
?IndSTPrior
?EnsemblePrior
?IndSTPrior
roxygen2::roxygenise()
roxygen2::roxygenise()
install(quick = )
install(quick = T)
nfdjsk
library(devtools)
install(quick = T)
?IndSTPrior
?EcoEnsemble::IndSIndSTPrior
?EcoEnsemble::SIndSTPrior
?EcoEnsemble::IndSTPrior
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install(quick = T)
?EcoEnsemble::IndSTPrior
?EcoEnsemble::IndSTPrior
roxygen2::roxygenise()
?unloadNamespace()
devtools::install(quick = TRUE)
?EcoEnsemble::IndSTPrior
devtools::build_manual()
library(EcoEnsemble)
?generate_sample
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3, AR_params = c(1,1)),
ind_lt_params = IndLTPrior(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = TruthPrior(num_species, 10, list(3, 3), list(10, diag(num_species)))
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors)
sample <- generate_sample(fit, num_samples = 2000)
# A quicker way to get the MLE for the first sample from the ensemble
transf_data <- get_transformed_data(fit)
ex.fit <- rstan::extract(fit@samples)
mle_sample <- get_mle(1, ex.fit = ex.fit, transformed_data = transformed_data,
time = fit@ensemble_data@stan_input$time, simplify = F)
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3, AR_params = c(1,1)),
ind_lt_params = IndLTPrior(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = TruthPrior(num_species, 10, list(3, 3), list(10, diag(num_species)))
)
# A quicker way to get the MLE for the first sample from the ensemble
transf_data <- get_transformed_data(fit)
ex.fit <- rstan::extract(fit@samples)
mle_sample <- get_mle(1, ex.fit = ex.fit, transformed_data = transformed_data,
time = fit@ensemble_data@stan_input$time, simplify = F)
dklgmdkfmgf
library(EcoEnsemble)
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3, AR_params = c(1,1)),
ind_lt_params = IndLTPrior(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = TruthPrior(num_species, 10, list(3, 3), list(10, diag(num_species)))
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors)
sample <- generate_sample(fit, num_samples = 2000)
# A quicker way to get the MLE for the first sample from the ensemble
transf_data <- get_transformed_data(fit)
ex.fit <- rstan::extract(fit@samples)
mle_sample <- get_mle(1, ex.fit = ex.fit, transformed_data = transformed_data,
time = fit@ensemble_data@stan_input$time, simplify = F)
fdsfdsfd
fsd
library(EcoEnsemble)
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3, AR_params = c(1,1)),
ind_lt_params = IndLTPrior(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = TruthPrior(num_species, 10, list(3, 3), list(10, diag(num_species)))
)
priors@priors_stan_input
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors, full_sample = FALSE)
sample <- generate_sample(fit)
plot(sample)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(devtools)
library(pkgbuild)
library(roxygen2)
needs_compile()
compile_dll()
roxygenize()
install()
check_win_devel()
roxygenize()
library(devtools)
library(pkgbuild)
library(roxygen2)
needs_compile()
compile_dll()
roxygenize()
install()
check_win_devel()
check_win_release()
check_win_oldrelease()
devtools::build_manual()
?is
?mgcv::b.spline
?mgcv::gam
?EnsemblePrior
?EcoEnsemble::EnsemblePrior
roxygen2::roxygenise()
devtools::build_manual()
library(EcoEnsemble)
?fit_ensemble_model
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = list("lkj",  list(3, 2), 3),
ind_lt_params = list(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = list("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5,
truth_params = list(10, list(3, 3), list(10, diag(num_species)))
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
full_sample = FALSE) #Only optimise in this case
num_species <- 4
priors <- EnsemblePrior(
d = num_species,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3),
ind_lt_params = IndLTPrior(
"beta",
list(c(10,4,8, 7),c(2,3,1, 4)),
list(matrix(5, num_species, num_species),
matrix(0.5, num_species, num_species))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(num_species))),
sha_lt_params = 5
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
full_sample = FALSE) #Only optimise in this case
priors <- EnsemblePrior(
d = 1,
ind_st_params = list("lkj",  list(3, 2), 3),
ind_lt_params = list(
"beta",
list(10, 4),
list(matrix(5, 1, 1),
matrix(0.5, 1, 1))
),
sha_st_params = list("inv_wishart",list(2, 1/3),list(5, diag(1))),
sha_lt_params = 5,
truth_params = list(10, list(3, 3), list(10, diag(1)))
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
full_sample = FALSE) #Only optimise in this case
priors <- EnsemblePrior(
d = 1,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3),
ind_lt_params = IndLTPrior(
"beta",
list(10, 4),
list(matrix(5, 1, 1),
matrix(0.5, 1, 1))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(1))),
sha_lt_params = 5
)
priors@priors_stan_input
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
full_sample = FALSE) #Only optimise in this case
SSB_obs1 <- SSB_obs[, 1]
SSB_miz1 <- SSB_obs[, 1]
SSB_miz1 <- SSB_miz[, 1]
Sigma_obs1 <- Sigma_obs[1,1]
Sigma_obs1 <- Sigma_miz[1,1]
Sigma_miz1 <- Sigma_miz[1,1]
fit <- fit_ensemble_model(observations = list(SSB_obs1, Sigma_obs1),
simulators = list(list(SSB_miz1, Sigma_miz1, "mizer")),
priors = priors,
full_sample = FALSE) #Only optimise in this case
Sigma_obs1
SSB_obs1
names(SSB_obs1)
SSB[, 1]
SSBobs[, 1]
SSB_obs[, 1]
SSB_obs
SSB_obs1 <- matrix(SSB_obs[, 2], ncol=1, dimnames = list(NULL, "Herring")
SSB_obs1
SSB_obs1 <- matrix(SSB_obs[, 2], ncol=1, dimnames = list(NULL, "Herring"))
SSB_obs1
Sigma_obs1 <- matrix(Sigma_obs[1,1], dimnames = list("Herring", "Herring"))
Sigma_obs1
SSB_obs1 <- matrix(SSB_obs[, 2], ncol=1, dimnames = list(NULL, "Herring"))
SSB_miz1 <- matrix(SSB_miz[, 2], ncol=1, dimnames = list(NULL, "Herring"))
Sigma_obs1 <- matrix(Sigma_obs[2,2], dimnames = list("Herring", "Herring"))
Sigma_miz1 <- matrix(Sigma_miz[2,2], dimnames = list("Herring", "Herring"))
priors <- EnsemblePrior(
d = 1,
ind_st_params = IndSTPrior("lkj",  list(3, 2), 3),
ind_lt_params = IndLTPrior(
"beta",
list(10, 4),
list(matrix(5, 1, 1),
matrix(0.5, 1, 1))
),
sha_st_params = ShaSTPrior("inv_wishart",list(2, 1/3),list(5, diag(1))),
sha_lt_params = 5
)
SSB_obs1 <- matrix(SSB_obs[, 2], ncol=1, dimnames = list(NULL, "Herring"))
SSB_miz1 <- matrix(SSB_miz[, 2], ncol=1, dimnames = list(NULL, "Herring"))
Sigma_obs1 <- matrix(Sigma_obs[2,2], dimnames = list("Herring", "Herring"))
Sigma_miz1 <- matrix(Sigma_miz[2,2], dimnames = list("Herring", "Herring"))
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
full_sample = FALSE) #Only optimise in this case
fit <- fit_ensemble_model(observations = list(SSB_obs1, Sigma_obs1),
simulators = list(list(SSB_miz1, Sigma_miz1, "Mizer")),
priors = priors,
full_sample = FALSE) #Only optimise in this case
roxygen2::roxygenise()
?IndSTPrior
devtools::install(quick = T)
?EcoEnsemble::EnsemblePrior
library(EcoEnsemble)
library(EcoEnsemble)
?EnsemblePrior
?IndSTPrior
roxygen2::roxygenise()
devtools::install(quick = T)
library(EcoEnsemble)
?IndSTPrior
roxygen2::roxygenise()
devtools::install(quick = T)
library(EcoEnsemble)
?EnsemblePrior
roxygen2::roxygenise()
devtools::install(quick = T)
devtools::install(quick = T)
library(EcoEnsemble)
?IndSTPrior
?IndSTPrior
roxygen2::roxygenise()
devtools::install(quick = T)
roxygen2::roxygenise()
devtools::install(quick = T)
roxygen2::roxygenise()
library(EcoEnsemble)
?IndSTPrior
?`IndSTPrior-class`
?IndSTPrior
devtools::build_manual()
?`TruthPrior-class`
roxygen2::roxygenise()
devtools::install(quick = T)
roxygen2::roxygenise()
devtools::install(quick = T)
devtools::build_manual()
?EcoEnsemble::`TruthPrior-class`
?col2rgb
?package.skeleton()
package.skeleton(path = "../", name = "SpenceTools")
traceback()
getwd()
setwd("../")
getwd()
package.skeleton(name="spenceTools")
package.skeleton(path = "spenceTools/", name="spenceTools")
package.skeleton(path = "spenceTools", name="spenceTools")
package.skeleton(list = "uncertain_plot", name="spenceTools")
uncertain_plot<- function(x,y,ylim=c(min(y),max(y)),xlim=c(min(x),max(x)),alpha=0.1,unc_col="black",add=F,probs=c(0.05,0.5,0.95),calc_quants=F,recalc_ylim=F,lwd=3,...){
if (calc_quants==T){
y <- apply(y,2,quantile,probs=probs)
}
if (recalc_ylim==T){
ylim <- c(min(y),max(y))
}
if(add==F){
plot(0,1,xlim=xlim,ylim=ylim,...)
}
past_col <- col2rgb(unc_col)
past_med <- rgb(past_col[1],past_col[2],past_col[3],maxColorValue = 255)
past_rng <- rgb(past_col[1],past_col[2],past_col[3],maxColorValue = 255,alpha=alpha * 255)
polygon(c(x,rev(x)),c(y[1,],rev(y[3,])),col=past_rng,border = F)
lines(x,y[2,],col=past_med,lwd=lwd)
}
package.skeleton(list = "uncertain_plot", name="spenceTools")
package.skeleton(list = "uncertain_plot", name="spenceTools")
?rgb
?plot
require(graphics)
plot(dist ~ speed, data = cars, main = "data(cars)  &  smoothing splines")
cars.spl <- with(cars, smooth.spline(speed, dist))
cars.spl
## This example has duplicate points, so avoid cv = TRUE
lines(cars.spl, col = "blue")
ss10 <- smooth.spline(cars[,"speed"], cars[,"dist"], df = 10)
lines(ss10, lty = 2, col = "red")
legend(5,120,c(paste("default [C.V.] => df =",round(cars.spl$df,1)),
"s( * , df = 10)"), col = c("blue","red"), lty = 1:2,
bg = 'bisque')
library(mgcv)
library(RobustGaSP)
f <- function(x) cos(4*x)^2
x = seq(0, 1, 0.2)
y = f(x)  #+ rnorm(length(x), 0, 0.25)
m <- rgasp(x, y, nugget.est = T)
x_test = seq(0, 1, 0.01)
y_test = predict(m, testing_input = matrix(x_test))
df <- data.frame(x = x_test, y_test)
colnames(df)[2] <- "y"
library(ggplot2)
ggplot(df, aes(x=`x`, y= `y`)) +
#geom_line(colour = 'darkblue') +
geom_ribbon(alpha = 0.1, fill ='darkblue', aes(ymin=`lower95`, ymax=`upper95`)) +
geom_point(data = data.frame(x = x, y = y)) +
geom_line(data = data.frame(x = x_test, y = f(x_test)), aes(color='Truth'))
plot(x, y, ylim = c(min(y_test$lower95), max(y_test$upper95)), pch = 19)
lines(x_test, y_test$mean, col = "blue")
lines(x_test, y_test$lower95, col = "blue", lty = 2)
lines(x_test, y_test$upper95, col = "blue", lty = 2)
lines(x_test, f(x_test), col = "red")
legend(0.6, 1.5, legend = c("Samples", "Emulator", "Truth"),
col = c("black", "blue", "red"), lty = rep(1, 3))
?aperm
