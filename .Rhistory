model_num_species[i] <- ncol(model_ouput)
Mi <- matrix(0, nrow=model_num_species[i], ncol=N)
observed_species <- colnames(observations[[1]])
sim_species      <- colnames(model_ouput)
for(k in 1:model_num_species[i]){
for(l in 1:N){
Mi[k,l] <- sim_species[k] == observed_species[l]
}
}
Ms <- rbind(Ms, Mi)
model_covariances <- append(model_covariances, as.numeric(sim[[2]]))
}
times <- sort(as.integer(times))
#Things that can't be done on the first pass
observation_times <- matrix(NA, nrow=length(times), ncol=0)
model_outputs <- matrix(NA, nrow=length(times), ncol=0)
observation_times <- cbind(observation_times, times %in% rownames(observations[[1]]))
for (i in 1:M) {
sim <- simulators[[i]]
model_ouput <- sim[[1]]
present_data <- as.numeric(times %in% rownames(model_ouput))
observation_times <- cbind(observation_times, present_data )
y_i<- matrix(0, nrow = length(times), ncol=ncol(model_ouput))
for(k in 1:length(times)){
year = times[k]
dat_for_year <- model_ouput[year == rownames(model_ouput), ]
if(nrow(dat_for_year) == 1 ||
length(dat_for_year) == 1){
y_i[k, ] <- unlist(dat_for_year)
}
}
model_outputs <- cbind(model_outputs, y_i)
}
if(M == 1){
model_num_species = array(model_num_species, 1)
}
obs_data <- observations[[1]]
obs_data_all <- matrix(0, nrow = length(times), ncol=N)
for(k in 1:length(times)){
year = times[k]
obs_for_year <- obs_data[year == rownames(obs_data), ]
if(nrow(obs_for_year) == 1 ||
length(obs_for_year) == 1){
obs_data_all[k, ] <- unlist(obs_for_year)
}
}
obs_covariances <- observations[[2]]
return(list(N = N,
time = length(times),
M = M,
model_num_species = model_num_species,
Ms = Ms,
observation_times = observation_times,
model_outputs = model_outputs,
model_covariances = model_covariances,
observations = obs_data_all,
obs_covariances = obs_covariances))
}
generate_simulator_stan_data(observations = list(obs, obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])))
observations = list(obs, obs.cov);
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,]))
N <- ncol(observations[[1]])
M <- length(simulators)
times <- rownames(observations[[1]])
model_num_species <- rep(NA, M)
Ms  <- matrix(NA, nrow=0, ncol=N)
model_covariances <- c()
for (i in 1:M) {
sim <- simulators[[i]]
model_ouput <- sim[[1]]
times <- unique(append(times, rownames(model_ouput)))
model_num_species[i] <- ncol(model_ouput)
Mi <- matrix(0, nrow=model_num_species[i], ncol=N)
observed_species <- colnames(observations[[1]])
sim_species      <- colnames(model_ouput)
for(k in 1:model_num_species[i]){
for(l in 1:N){
Mi[k,l] <- sim_species[k] == observed_species[l]
}
}
Ms <- rbind(Ms, Mi)
model_covariances <- append(model_covariances, as.numeric(sim[[2]]))
}
times <- sort(as.integer(times))
times
#Things that can't be done on the first pass
observation_times <- matrix(NA, nrow=length(times), ncol=0)
model_outputs <- matrix(NA, nrow=length(times), ncol=0)
observation_times <- cbind(observation_times, times %in% rownames(observations[[1]]))
for (i in 1:M) {
sim <- simulators[[i]]
model_ouput <- sim[[1]]
present_data <- as.numeric(times %in% rownames(model_ouput))
observation_times <- cbind(observation_times, present_data )
y_i<- matrix(0, nrow = length(times), ncol=ncol(model_ouput))
for(k in 1:length(times)){
year = times[k]
dat_for_year <- model_ouput[year == rownames(model_ouput), ]
if(nrow(dat_for_year) == 1 ||
length(dat_for_year) == 1){
y_i[k, ] <- unlist(dat_for_year)
}
}
model_outputs <- cbind(model_outputs, y_i)
}
if(M == 1){
model_num_species = array(model_num_species, 1)
}
obs_data <- observations[[1]]
obs_data_all <- matrix(0, nrow = length(times), ncol=N)
for(k in 1:length(times)){
year = times[k]
obs_for_year <- obs_data[year == rownames(obs_data), ]
if(nrow(obs_for_year) == 1 ||
length(obs_for_year) == 1){
obs_data_all[k, ] <- unlist(obs_for_year)
}
}
year
obs_data[year == rownames(obs_data), ]
nrow(obs_for_year) == 1
data.frame(obs_data[year == rownames(obs_data), ])
obs_data[year == rownames(obs_data), ]
year == rownames(obs_data)
class(obs_data)
generate_simulator_stan_data(observations = list(data.frame(obs), obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])))
fit <- fit_ensemble_model(observations = list(data.frame(obs), obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])),
priors = priors_test)
bchjdbshd
fit <- fit_ensemble_model(observations = list(data.frame(obs), obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])),
priors = priors_test, iter = 1)
load("C:/Users/JM34/OneDrive - CEFAS/EcoEnsemble Priors/Synthetic data/synth.RData")
library(EcoEnsemble)
priors_test <- EnsemblePrior(d)
SPEC_NAMES <- c("Frimbles", "Grongles", "Clugs")
MODEL_NAMES <- c("Model 1", "Model 2", "Model 3", "Model 4")
dimnames(obs) = list(paste(1:40), SPEC_NAMES)
dimnames(obs.cov) = list(SPEC_NAMES, SPEC_NAMES)
dimnames(models_output) <- list(MODEL_NAMES, paste(1:50), SPEC_NAMES)
dimnames(model.cov) <- list(MODEL_NAMES, SPEC_NAMES, SPEC_NAMES)
fit <- fit_ensemble_model(observations = list(data.frame(obs), obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])),
priors = priors_test)
sammy <- generate_sample(fit)
plot(sammy)
dnjsaknds
plot(sammy)
load("C:/Users/JM34/OneDrive - CEFAS/EcoEnsemble Priors/Synthetic data/synth.RData")
library(EcoEnsemble)
options(mc.cores = parallel::detectCores())
priors_test <- EnsemblePrior(d)
SPEC_NAMES <- c("Frimbles", "Grongles", "Clugs")
MODEL_NAMES <- c("Model 1", "Model 2", "Model 3", "Model 4")
dimnames(obs) = list(paste(1:40), SPEC_NAMES)
dimnames(obs.cov) = list(SPEC_NAMES, SPEC_NAMES)
dimnames(models_output) <- list(MODEL_NAMES, paste(1:50), SPEC_NAMES)
dimnames(model.cov) <- list(MODEL_NAMES, SPEC_NAMES, SPEC_NAMES)
fit <- fit_ensemble_model(observations = list(data.frame(obs), obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])),
priors = priors_test)
sammy <- generate_sample(fit)
plot(sammy)
11122.9/3600
getwd()
save(fit, sammy, file = "C:/Users/JM34/OneDrive - CEFAS/EcoEnsemble Priors/Synthetic data/synth_run.RData")
fit <- fit_ensemble_model(observations = list(data.frame(obs), obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])),
priors = priors_test, control = list(adapt_delta = 0.9))
sammy <- generate_sample(fit)
plot(sammy)
sammy <- generate_sample(fit)
plot(sammy)
save(fit, sammy, file = "C:/Users/JM34/OneDrive - CEFAS/EcoEnsemble Priors/Synthetic data/synth_run_adapt_delta_90.RData")
plot(sammy)
sammy@samples[, 1:3]
sammy@samples[,, 1:3]
dim(sammy@samples[,, 1:3])
dim(sammy@samples[,1:3,])
ens_tru <- sammy@samples[,1:3,]
tru_tru <- true_latent
tru_tru
tru_tru <- true_latent[, 1:3]
tru_tru
plot.ts(tru_tru)
k <- 1
apply(ens_tru[,k,], 2, median)
apply(ens_tru[,k,], 1, median)
for(k in 1:3){
df <- data.frame(Year = 1:50,
Truth = tru_tru[, k],
Ensemble = apply(ens_tru[,k,], 1, median),
Lower = apply(ens_tru[,k,], 1, quantile, 0.05),
Upper = apply(ens_tru[,k,], 1, quantile, 0.95))
}
df
head(df)
reshape2::melt(df, id.vars = c("Year"))
reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df["variable"] == "Truth"
df["variable"]
colnames(df)
df <- df %>% reshape2::melt(id.vars = c("Year", "Lower", "Upper"))
df[df["variable"] == "Truth"]
df <- reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df["variable"] == "Truth"
df[df["variable"] == "Truth", ]
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "Truth"]
df["variable"] == "Truth"
df[df["variable"] == "Truth", "Truth"]
colnames(df)
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "value"]
df
library(ggplot)
library(ggplot2)
p <- ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, colour = `variable`)) + geom_line() + geom_ribbon()
p
p <- ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2)
#p <-
ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2)
#p <-
ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2)
#p <-
ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2)
#p <-
ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA)
plots = list()
for(k in 1:3){
df <- data.frame(Year = 1:50,
Truth = tru_tru[, k],
Ensemble = apply(ens_tru[,k,], 1, median),
Lower = apply(ens_tru[,k,], 1, quantile, 0.05),
Upper = apply(ens_tru[,k,], 1, quantile, 0.95))
df <- reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "value"]
p <- ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA)
plots <- list(plots, p)
}
do.call(cowplot::plot_grid, plots)
?do.call
do.call(cowplot::plot_grid, args = plots)
cowplot::plot_grid(plots[[1]], plots[[2]], plots[[3]])
length(plots)
plots = list()
for(k in 1:3){
df <- data.frame(Year = 1:50,
Truth = tru_tru[, k],
Ensemble = apply(ens_tru[,k,], 1, median),
Lower = apply(ens_tru[,k,], 1, quantile, 0.05),
Upper = apply(ens_tru[,k,], 1, quantile, 0.95))
df <- reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "value"]
p <- ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA)
plots <- list(plots, p)
}
length(plots)
plots[[1]]
plots = list()
for(k in 1:3){
df <- data.frame(Year = 1:50,
Truth = tru_tru[, k],
Ensemble = apply(ens_tru[,k,], 1, median),
Lower = apply(ens_tru[,k,], 1, quantile, 0.05),
Upper = apply(ens_tru[,k,], 1, quantile, 0.95))
df <- reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "value"]
p <- ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA)
plots <- append(plots, p)
}
cowplot::plot_grid(plots[[1]], plots[[2]], plots[[3]])
plots[[1]]
p
print(plots[[1]])
class(plots[[1]])
dfs = list()
for(k in 1:3){
df <- data.frame(Year = 1:50,
Truth = tru_tru[, k],
Ensemble = apply(ens_tru[,k,], 1, median),
Lower = apply(ens_tru[,k,], 1, quantile, 0.05),
Upper = apply(ens_tru[,k,], 1, quantile, 0.95))
df <- reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "value"]
dfs <- append(dfs, df)
}
plot_df <- function(df){
ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA)
}
plot_df(dfs[[1]])
dfs[[1]]
dfs[1]
dfs = list()
for(k in 1:3){
df <- data.frame(Year = 1:50,
Truth = tru_tru[, k],
Ensemble = apply(ens_tru[,k,], 1, median),
Lower = apply(ens_tru[,k,], 1, quantile, 0.05),
Upper = apply(ens_tru[,k,], 1, quantile, 0.95))
df <- reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "value"]
dfs <- append(dfs, list(df))
}
dfs[[1]]
plot_df(dfs[[1]])
cowplot::plot_grid(plot_df(dfs[[1]]),plot_df(dfs[[2]]),plot_df(dfs[[3]]))
library(ggplot2)
dfs = list()
for(k in 1:3){
df <- data.frame(Year = 1:50,
Truth = tru_tru[, k],
Ensemble = apply(ens_tru[,k,], 1, median),
Lower = apply(ens_tru[,k,], 1, quantile, 0.01),
Upper = apply(ens_tru[,k,], 1, quantile, 0.99))
df <- reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "value"]
dfs <- append(dfs, list(df))
}
plot_df <- function(df){
ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA)
}
class(plots[[1]])
cowplot::plot_grid(plot_df(dfs[[1]]),plot_df(dfs[[2]]),plot_df(dfs[[3]]))
library(ggplot2)
dfs = list()
for(k in 1:3){
df <- data.frame(Year = 1:50,
Truth = tru_tru[, k],
Ensemble = apply(ens_tru[,k,], 1, median),
Lower = apply(ens_tru[,k,], 1, quantile, 0.25),
Upper = apply(ens_tru[,k,], 1, quantile, 0.75))
df <- reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "value"]
dfs <- append(dfs, list(df))
}
plot_df <- function(df){
ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA)
}
cowplot::plot_grid(plot_df(dfs[[1]]),plot_df(dfs[[2]]),plot_df(dfs[[3]]))
library(ggplot2)
dfs = list()
for(k in 1:3){
df <- data.frame(Year = 1:50,
Truth = tru_tru[, k],
Ensemble = apply(ens_tru[,k,], 1, median),
Lower = apply(ens_tru[,k,], 1, quantile, 0.05),
Upper = apply(ens_tru[,k,], 1, quantile, 0.95))
df <- reshape2::melt(df, id.vars = c("Year", "Lower", "Upper"))
df[df["variable"] == "Truth", c("Lower", "Upper")] <- df[df["variable"] == "Truth", "value"]
dfs <- append(dfs, list(df))
}
plot_df <- function(df){
ggplot(df, aes(x = `Year`, y = `value`, ymin = `Lower`, ymax = `Upper`, fill = `variable`, colour = `variable`)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA)
}
library(EcoEnsemble
)
library(EcoEnsemble)
priors_hier <- EnsemblePriors4)
priors_norm <- EnsemblePrior(d, ind_st_params = IndSTPrior("lkj", list(1, 1), 1))
priors_hier@stan_input$prior_y_init_mean
priors_hier@stan_input$prior_y_init_var
priors_hier@truth_params@initial_mean
priors_hier@truth_params@initial_var
ensemble_prior(priors_hier, M = 3)
ensemble_prior(priors_norm, M = 3)
f1 <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(
list(SSB_miz, Sigma_miz),
list(SSB_lm, Sigma_lm)
), priors = priors_hier)
f2 <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(
list(SSB_miz, Sigma_miz),
list(SSB_lm, Sigma_lm)
), priors = priors_norm)
priors_hier <- EnsemblePrior(4)
priors_hier <- EnsemblePrior(4)
priors_norm <- EnsemblePrior(d, ind_st_params = IndSTPrior("lkj", list(1, 1), 1))
priors_norm <- EnsemblePrior(4, ind_st_params = IndSTPrior("lkj", list(1, 1), 1))
library(EcoEnsemble)
priors_hier <- EnsemblePrior(4)
priors_norm <- EnsemblePrior(4, ind_st_params = IndSTPrior("lkj", list(1, 1), 1))
devtools::install(quick = TRUE)
library(EcoEnsemble)
priors_hier <- EnsemblePrior(4)
devtools::install(quick = TRUE)
devtools::install(quick = TRUE)
library(EcoEnsemble)
priors_hier <- EnsemblePrior(4)
devtools::install(quick = TRUE)
library(EcoEnsemble)
priors_hier <- EnsemblePrior(4)
priors_norm <- EnsemblePrior(4, ind_st_params = IndSTPrior("lkj", list(1, 1), 1))
priors_hier@stan_input$prior_y_init_mean
priors_hier@priors_stan_input$prior_y_init_mean
priors_hier@priors_stan_input$prior_y_init_var
priors_hier@truth_params@initial_mean
priors_hier@truth_params@initial_var
priors_norm@priors_stan_input$prior_y_init_mean
priors_norm@priors_stan_input$prior_y_init_var
priors_norm@truth_params@initial_mean
priors_norm@truth_params@initial_var
p1 <- ensemble_prior(priors_hier, M = 3)
p1 <- prior_ensemble_model(priors_hier, M = 3)
p2 <- prior_ensemble_model(priors_norm, M = 3)
f1 <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(
list(SSB_miz, Sigma_miz),
list(SSB_lm, Sigma_lm)
), priors = priors_hier)
f2 <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(
list(SSB_miz, Sigma_miz),
list(SSB_lm, Sigma_lm)
), priors = priors_norm)
p2 <- prior_ensemble_model(priors_norm, M = 3)
priors_norm <- EnsemblePrior(4, ind_st_params = IndSTPrior("lkj", list(100, 1), 1))
p2 <- prior_ensemble_model(priors_norm, M = 3)
priors_norm <- EnsemblePrior(4, ind_st_params = IndSTPrior("lkj", list(1, 100), 1))
p2 <- prior_ensemble_model(priors_norm, M = 3)
pis <- rgamma(1e5,1,1)
xs <- seq(0,5,length.out=1000)
plot(xs,2*colMeans(sapply(xs, function(x){dnorm(x,0,sqrt(2 * pis))})),type="l",axes=T,ylab="density",xlab="Difference of two models")
lines(xs,dgamma(xs,1,1),col="red")
View(sapply(xs, function(x){dnorm(x,0,sqrt(2 * pis))}))
sapply(xs, function(x){dnorm(x,0,sqrt(2 * pis))})
bloj <- sapply(xs, function(x){dnorm(x,0,sqrt(2 * pis))})
dim(bloj)
dim(xs)
length(xs)
load("C:/Users/JM34/OneDrive - CEFAS/EcoEnsemble Priors/Synthetic data/synth.RData")
library(EcoEnsemble)
SPEC_NAMES <- c("Frimbles", "Grongles", "Clugs")
MODEL_NAMES <- c("Model 1", "Model 2", "Model 3", "Model 4")
dimnames(obs) = list(paste(1:40), SPEC_NAMES)
TruthPrior()
TruthPrior(4)
priors_test <- EnsemblePrior(d)
priors_test
SPEC_NAMES <- c("Frimbles", "Grongles", "Clugs")
MODEL_NAMES <- c("Model 1", "Model 2", "Model 3", "Model 4")
dimnames(obs) = list(paste(1:40), SPEC_NAMES)
dimnames(obs.cov) = list(SPEC_NAMES, SPEC_NAMES)
dimnames(models_output) <- list(MODEL_NAMES, paste(1:50), SPEC_NAMES)
dimnames(model.cov) <- list(MODEL_NAMES, SPEC_NAMES, SPEC_NAMES)
# new truth priors --------------------------------------------------------
priors <- EnsemblePrior(3)
fit <- fit_ensemble_model(observations = list(data.frame(obs), obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])),
priors = priors, control = list(adapt_delta = 0.9))
options(mc.cores = parallel::detectCores())
fit <- fit_ensemble_model(observations = list(data.frame(obs), obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])),
priors = priors, control = list(adapt_delta = 0.9))
sammy <- generate_sample(fit)
plot(sammy)
save(fit, sammy, file = "C:/Users/JM34\OneDrive - CEFAS/EcoEnsemble Priors/Synthetic data/new_priors.RData")
priors <- EnsemblePrior(3, truth_params = TruthPrior(3, initial_var = 10))
fit <- fit_ensemble_model(observations = list(data.frame(obs), obs.cov),
simulators = list(
list(data.frame(models_output[1,,]), model.cov[1,,]),
list(data.frame(models_output[2,,]), model.cov[2,,]),
list(data.frame(models_output[3,,]), model.cov[3,,]),
list(data.frame(models_output[4,,]), model.cov[4,,])),
priors = priors, control = list(adapt_delta = 0.9))
sammy <- generate_sample(fit)
plot(sammy)
save(fit, sammy, file = "C:/Users/JM34\OneDrive - CEFAS/EcoEnsemble Priors/Synthetic data/new_priors_sd10.RData")
save(fit, sammy, file = "C:/Users/JM34/OneDrive - CEFAS/EcoEnsemble Priors/Synthetic data/new_priors_sd10.RData")
dfgdgfdg
