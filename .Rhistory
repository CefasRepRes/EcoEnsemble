sha_st_cor_form = "lkj",
sha_st_cor_params = 30,
sha_lt_sd = rep(4,N_species))
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_miz, Sigma_miz, "mizer")), priors <- priors
)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),simulators = list(list(SSB_miz, Sigma_miz, "mizer")), priors = priors)
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),simulators = list(list(SSB_miz, Sigma_miz, "mizer")), priors = priors,
full_sample = FALSE)
sam <- generate_sample(fit)
plot_values(fit, sam)
plot_values(fit, sam, ggplot=FALSE)
roxygen2::roxygenise()
1.1**40
(1.1**41 - 1.1)/0.1
300*(1.1**41 - 1.1)/0.1
1.1**41
(0.11)/0.1
(1.1**3 - 1.1)/0.1
100*(1.1**41 - 1.1)/0.1
100*(1.1**31 - 1.1)/0.1
1200*(1.1**31 - 1.1)/0.1
3000*(1.1**31 - 1.1)/0.1
3600*(1.1**31 - 1.1)/0.1
3600*(1.1**31 - 1.1)/0.1
1 * (0.98)
1 * (0.95)
3600*(1.1**31 - 1.1)/0.1 / 2
3600*(1.1**31 - 1.1)/0.1 / (0.95**31)
3600*(1.1**31 - 1.1)/0.1 / (0.90**31)
3600*30
3600*(1.1**31 - 1.1)/0.1 / (0.85**31)
3600*(1.1**31 - 1.1)/0.1 * (0.95**31)
3600*(1.07**31 - 1.1)/0.1 * (0.95**31)
3600*(1.07**31 - 1.1)/0.1 * (0.98**31)
3600*(1.1**31 - 1.1)/0.1 * (0.98**31)
3600*(1.1**41 - 1.1)/0.1 * (0.98**41)
3600*(1.1**41 - 1.1)/0.1 * (0.95**41)
3600*(1.1**41 - 1.1)/0.1 * (1**41)
1**41
devtools::build_manual()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
?define_priors
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
library(EcoEnsemble)
N_species <- 4
priors <- define_priors(ind_st_var_params = list(25, 0.25),
ind_st_cor_form = "lkj",
ind_st_cor_params = 30,
ind_lt_var_params = list(rep(25,N_species),rep(0.25,N_species))
ind_lt_cor_form = "beta",
ind_lt_cor_params = list(matrix(40,N_species, N_species), matri
sha_st_var_exp = 3,
sha_st_cor_form = "lkj",
sha_st_cor_params = 30,
sha_lt_sd = rep(4,N_species))
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
full_sample = FALSE) #Only optimise in this case
Run a full sample
fit1 <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
control=list(adapt_delta = 0.99)) #Only optimise in this case
priors
fit <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
full_sample = FALSE) #Only optimise in this case
fit
fit1 <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
control=list(adapt_delta = 0.99)) #Only optimise in this case
?mizer::MizerSim
devtools::install(quick = TRUE)
library(EcoEnsemble)
observations = list(SSB_obs, Sigma_obs)
list(SSB_miz, Sigma_miz, "Mizer")),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer"))
sha_lt_sd = rep(4,N_species))
N_species <- 4
priors <- define_priors(ind_st_var_params = list(25, 0.25),
ind_st_cor_form = "lkj",
ind_st_cor_params = 30,
ind_lt_var_params = list(rep(25,N_species),rep(0.25,N_species)),
ind_lt_cor_form = "beta",
ind_lt_cor_params = list(matrix(40,N_species, N_species), matrix(40, N_species, N_species)),
sha_st_var_exp = 3,
sha_st_cor_form = "lkj",
sha_st_cor_params = 30,
sha_lt_sd = rep(4,N_species))
ens_data <- EnsembleData(observations, simulators, priors)
get_stan_ensemble_data(observations,simulators,priors)
EnsembleData(observations, simulators, priors)
roxygen2::roxygenise
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install(quick=T)
warnings()
?EnsembleData
?EnsembleData-class
EnsembleData(observations, simulators, priors)
library(EcoEnsemble)
library(EcoEnsembke)
library(EcoEnsemble)
observations = list(SSB_obs, Sigma_obs)
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer"))
N_species <- 4
priors <- define_priors(ind_st_var_params = list(25, 0.25),
ind_st_cor_form = "lkj",
ind_st_cor_params = 30,
ind_lt_var_params = list(rep(25,N_species),rep(0.25,N_species)),
ind_lt_cor_form = "beta",
ind_lt_cor_params = list(matrix(40,N_species, N_species), matrix(40, N_species, N_species)),
sha_st_var_exp = 3,
sha_st_cor_form = "lkj",
sha_st_cor_params = 30,
sha_lt_sd = rep(4,N_species))
ens_data <- EnsembleData(observations, simulators, priors)
ens_data
ens_data@stan_input
?EnsembleData
?EnsembleData-class
?`EnsembleData-class`
EnsembleData(observations, simulators, priors)
EnsembleData(observations, simulators, NULL)
EnsembleData(observations, simulators, list())
EnsembleData(observations, list(list(NULL, NULL, ""), list(NULL, NULL, "")), priors
))
EnsembleData(observations, list(list(NULL, NULL, ""), list(NULL, NULL, "")), priors)
ens <- EnsembleData(observations, simulators, priors)
ens
class(ens)
validObject(ens)
roxygen2::roxygenise()
?get_stan_ensemble_data
?EnsembleData
?fit_ensemble_model
roxygen2::roxygenise()
?`EnsembleData-class`
class(TRUE)
?mizer::`MizerParams-class`
?EnsembleData
class(observations)
class(priors)
?rstan::sampling
?rstan::optimizing
EnsembleData(observations, simulators, priors)
EnsembleData(observations, simulators, NULL)
EnsembleData(observations, simulators, list())
EnsembleData(observations, simulators, NA)
class(NULL)
ens_data <- EnsembleData(observations, simulators, priors)
stan_input <- ens_data@stan_input
samples <- NULL; point_estimate <- NULL
full_sample <- FALSE
if(full_sample){
samples <- rstan::sampling(stanmodels$ensemble_model, data=stan_input,...)
}else{
point_estimate <- rstan::optimizing(stanmodels$ensemble_model, data=stan_input,
as_vector=FALSE, ...)
}
if(full_sample){
samples <- rstan::sampling(stanmodels$ensemble_model, data=stan_input)
}else{
point_estimate <- rstan::optimizing(stanmodels$ensemble_model, data=stan_input,
as_vector=FALSE)
}
ens_fit <- EnsembleFit(ens_data, samples, point_estimate)
fit <- EnsembleFit(ens_data, samples, point_estimate)
#' Constructor for the `EnsembleFit` class
#'
#' A constructor for the `EnsembleFit` class. This is a container for the samples or
#' point estimates generated by the fitted Stan models.
#'
#' @param EnsembleData The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @param samples The `stanfit` object representing the samples drawn from the Stan model.
#' @param point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#' @return An object of type \linkS4class{EnsembleFit}
#' @export
EnsembleFit <- function(ensemble_data, samples, point_estimate) {
ensemble_data <- new('EnsembleFit',
ensemble_data = ensemble_data,
samples = samples,
point_estimate = point_estimate)
return(ensemble_data)
}
#### Class definition ####
#' A class to hold the Ensemble data
#'
#' A class that holds the observation data, simulator outputs, and prior information
#' ready to fit the ensemble model in Stan.
#'
#' A new `EnsembleFit` object can be created with the [EnsembleFit()]
#' constructor, but it is not necessary to do this if using the `fit_ensemble_model`
#' function, as it will be created automatically.
#'
#' There is only one slot for this object, containing a list of data in the required
#' form to fit the Stan model.
#'
#' @slot EnsembleData The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @slot samples The `stanfit` object representing the samples drawn from the Stan model.
#' @slot point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#'
#' @export
setClass(
"EnsembleFit",
slots = c(
EnsembleData = "EnsembleData",
samples = "stanfit",
point_estimate = "list"
)
)
fit <- EnsembleFit(ens_data, samples, point_estimate)
class(ens_data)
class(ens_data, samples, point_estimate)
class(c(ens_data, samples, point_estimate)()
class(c(ens_data, samples, point_estimate))
class(ens_data)
EnsembleFit(ens_data, samples, point_estimate)
#' A constructor for the `EnsembleFit` class. This is a container for the samples or
#' point estimates generated by the fitted Stan models.
#'
#' @param EnsembleData The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @param samples The `stanfit` object representing the samples drawn from the Stan model.
#' @param point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#' @return An object of type \linkS4class{EnsembleFit}
#' @export
EnsembleFit <- function(ensemble_data, samples, point_estimate) {
ensemble_data <- new('EnsembleFit',
EnsembleData = ensemble_data,
samples = samples,
point_estimate = point_estimate)
return(ensemble_data)
}
EnsembleFit(ens_data, samples, point_estimate)
#' There is only one slot for this object, containing a list of data in the required
#' form to fit the Stan model.
#'
#' @slot EnsembleData The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @slot samples The `stanfit` object representing the samples drawn from the Stan model.
#' @slot point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#'
#' @export
setClass(
#' Constructor for the `EnsembleFit` class
#'
#' A constructor for the `EnsembleFit` class. This is a container for the samples or
#' point estimates generated by the fitted Stan models.
#'
#' @param EnsembleData The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @param samples The `stanfit` object representing the samples drawn from the Stan model.
#' @param point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#' @return An object of type \linkS4class{EnsembleFit}
#' @export
EnsembleFit <- function(ensemble_data, samples, point_estimate) {
ensemble_data <- new('EnsembleFit',
EnsembleData = ensemble_data,
samples = samples,
point_estimate = point_estimate)
return(ensemble_data)
}
#### Class definition ####
#' A class to hold the Ensemble data
#'
#' A class that holds the observation data, simulator outputs, and prior information
#' ready to fit the ensemble model in Stan.
#'
#' A new `EnsembleFit` object can be created with the [EnsembleFit()]
#' constructor, but it is not necessary to do this if using the `fit_ensemble_model`
#' function, as it will be created automatically.
#'
#' There is only one slot for this object, containing a list of data in the required
#' form to fit the Stan model.
#'
#' @slot EnsembleData The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @slot samples The `stanfit` object representing the samples drawn from the Stan model.
#' @slot point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#'
#' @export
setClass(
"EnsembleFit",
slots = c(
EnsembleData = "EnsembleData",
samples = c("stanfit", NULL),
point_estimate = c("list", NULL)
)
)
EnsembleFit(ens_data, samples, point_estimate)
#' There is only one slot for this object, containing a list of data in the required
#' form to fit the Stan model.
#'
#' @slot EnsembleData The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @slot samples The `stanfit` object representing the samples drawn from the Stan model.
#' @slot point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#'
#' @export
setClass(
slots = c(
samples = c("stanfit", NULL),
)
setClass(
"EnsembleFit",
slots = c(
EnsembleData = "EnsembleData",
samples = c("stanfit", NULL),
point_estimate = c("list", NULL)
)
)
setClass(
"EnsembleFit",
slots = c(
EnsembleData = "EnsembleData",
samples = c("stanfit", NULL),
point_estimate = c("list", NULL)
)
)
#' A constructor for the `EnsembleFit` class. This is a container for the samples or
#' point estimates generated by the fitted Stan models.
#'
#' @param EnsembleData The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @param samples The `stanfit` object representing the samples drawn from the Stan model.
#' @param point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#' @return An object of type \linkS4class{EnsembleFit}
#' @export
EnsembleFit <- function(ensemble_data, samples, point_estimate) {
ensemble_data <- new('EnsembleFit',
EnsembleData = ensemble_data,
samples = samples,
point_estimate = point_estimate)
return(ensemble_data)
}
EnsembleFit(ens_data, samples, point_estimate)
class(NULL)
setClass(
"EnsembleFit",
slots = c(
EnsembleData = "EnsembleData",
samples = c("stanfit", "NULL"),
point_estimate = c("list", "NULL")
)
)
EnsembleFit(ens_data, samples, point_estimate)
new('EnsembleFit',
EnsembleData = ensemble_data,
samples = samples,
point_estimate = point_estimate)
new('EnsembleFit',
EnsembleData = ens,
samples = samples,
point_estimate = point_estimate)
new('EnsembleFit',
EnsembleData = ens_data,
samples = samples,
point_estimate = point_estimate)
#' Constructor for the `EnsembleFit` class
#'
#' A constructor for the `EnsembleFit` class. This is a container for the samples or
#' point estimates generated by the fitted Stan models.
#'
#' @param ensemble_data The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @param samples The `stanfit` object representing the samples drawn from the Stan model.
#' @param point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#' @return An object of type \linkS4class{EnsembleFit}
#' @export
EnsembleFit <- function(ensemble_data, samples, point_estimate) {
ensemble_data <- new('EnsembleFit',
ensemble_data = ensemble_data,
samples = samples,
point_estimate = point_estimate)
return(ensemble_data)
}
setClassUnion("stanfit_or_null", c("stanfit", "NULL"))
setClassUnion("list_or_null", c("list", "NULL"))
#### Class definition ####
#' A class to hold the Ensemble data
#'
#' A class that holds the observation data, simulator outputs, and prior information
#' ready to fit the ensemble model in Stan.
#'
#' A new `EnsembleFit` object can be created with the [EnsembleFit()]
#' constructor, but it is not necessary to do this if using the `fit_ensemble_model`
#' function, as it will be created automatically.
#'
#'
#' @slot ensemble_data The `EnsembleData` object encapsulating the data initially passed
#' through to Stan when fitting the ensemble model.
#' @slot samples The `stanfit` object representing the samples drawn from the Stan model.
#' @slot point_estimate The `list` output of `rstan::optimizing` if a full sampling is
#' not completed.
#'
#' @export
setClass(
"EnsembleFit",
slots = c(
ensemble_data = "EnsembleData",
samples = "stanfit_or_null",
point_estimate = "list_or_null"
)
)
EnsembleFit(ens_data, samples, point_estimate)
fit <- EnsembleFit(ens_data, samples, point_estimate)
fit@point_estimate
fit@samples
isNull(fit@samples)
is.null(fit@samples)
is.null(fit@point_estimate)
?ggplot
fit_point <-fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors,
full_sample = FALSE)
sample1 <- generate_sample(fit_sample, num_samples = 5)
p <- plot_values(fit_point, sample1, variable="Herring")
sample1 <- generate_sample(fit_point, num_samples = 10)
p <- plot_values(fit_point, sample1, variable="Herring")
class(p)
?mizer::plot
?mizer::`plot,MizerParams,missing-method`
roxygen2::roxygenise()
roxygen2::roxygenise()
rm(list = c("EnsembleFit"))
roxygen2::roxygenise()
devtools::install(quick=TRUE)
devtools::install(quick = TRUE)
library(EcoEnsemble)
?generate_sample
?define_priors
N_species <- 4
priors <- define_priors(ind_st_var_params = list(25, 0.25),
ind_st_cor_form = "lkj", #Using an LKJ distribution for individual short-term discrepancies
ind_st_cor_params = 30, #The parameter is 30
ind_lt_var_params = list(rep(25,N_species),rep(0.25,N_species)),
ind_lt_cor_form = "beta",
ind_lt_cor_params = list(matrix(40,N_species, N_species), matrix(40, N_species, N_species)),
sha_st_var_exp = 3,
sha_st_cor_form = "lkj",
sha_st_cor_params = 30,
sha_lt_sd = rep(4,N_species))
fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors, full_sample = TRUE)
sample <- generate_sample(fit_sample, num_samples = 100)
fit_sample <- fit_ensemble_model(observations = list(SSB_obs, Sigma_obs),
simulators = list(list(SSB_ewe, Sigma_ewe, "EwE"),
list(SSB_fs,  Sigma_fs, "FishSUMS"),
list(SSB_lm,  Sigma_lm, "LeMans"),
list(SSB_miz, Sigma_miz, "Mizer")),
priors = priors, full_sample = FALSE)
sample <- generate_sample(fit_sample, num_samples = 100)
plot(fit_sample)
plot(sample)
sample
plot(sample)
sample
sam <- generate_sample(fit_sample, num_samples = 100)
plot(sam)
sam
sam <- generate_sample(fit_sample, num_samples = 100)
exists(sam)
exists("sam")
