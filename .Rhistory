mike_team <- c(mike_team,player.df[i,1])
}else{
print("Idiots!! Must be P or M")
}
}
accept<- F
while(accept==F){
cost <- as.numeric(readline(prompt = "How much?"))
if (cost <= dosh[tmp]){
accept <- T
dosh[tmp] <- dosh[tmp] - cost
}else{
print("You cannot afford this")
}
}
player.df[i,3] <- cost
a_p <- ifelse(length(pete_team)==1,"player and","players and")
print(paste("Naked Australian has",length(pete_team),a_p,dosh[1],"quid left"))
a_m <- ifelse(length(mike_team)==1,"player and","players and")
print(paste("Lovely man has",length(mike_team),a_m,dosh[2],"quid left"))
}
player.df
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
captains <- paste("The",c("Naked Australian", "Lovely man"))
captains
captains <- paste("The",c("Naked Australian", "Bully))
### draw the teams
player.df <-cbind(sample(players),sample(rep(captains,times=ceiling(length(players)/2)),size=length(players)),0)
pete_team <- c()
mike_team <- c()
n_pl <- length(players)
dosh <- rep(100,2)
for(i in 1:n_pl){
readline(prompt = "Press enter for new player")
print(paste(player.df[i,1],"is assigned to",player.df[i,2]))
accept <- F
while(accept==F){
name <- readline(prompt = "Who got this player (P or M)?")
if (name=="P"){
accept <- T
tmp <- 1
pete_team <- c(pete_team,player.df[i,1])
}else if(name=="M"){
accept <- T
tmp <- 2
mike_team <- c(mike_team,player.df[i,1])
}else{
print("Idiots!! Must be P or M")
}
}
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
ceiling(length(players)/2))
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
pete_team
mike_team
supressWarning()
supressWarings()
cbind(mike_team,pete_team)
print(cbind(mike_team,pete_team,col.names=c("Villa","Boro")))
squads <-cbind(mike_team,pete_team)
if (length(mike_team)>length(pete_team)){
pete_team <-c(pete_team,"")
}
if (length(mike_team)<length(pete_team)){
mike_team <-c(mike_team,"")
}
squads <-cbind(pete_team,mike_team)
colname(squads) <- c("Villa","Boro")
print(squads)
colnames(squads) <- c("Villa","Boro")
print(squads)
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
print(squads)
rownames(squads) <- 1:nrow(squads)
print(squads)
rpois(1,5)
rpois(1,5)
rpois(1,5)
print(paste("The predicted result will be ", rpois(1,3.5),"-",rpois(1,3.5),sep=""))
sort(rpois(2,3.5),decreasing = T)
tmp1 <- sort(rpois(2,3.5),decreasing = T)
print(paste("The predicted result will be ", tmp1[1],"-",tmp2[2],sep=""))
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2],sep=""))
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2]," to ",sample(c("Villa","Boro"),1),sep=""))
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2]," to ",sample(c("Villa","Boro"),1),sep=""))
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2]," to ",sample(c("Villa","Boro"),1),sep=""))
### I love stats me
set.seed(12)
options(warn=-1) ## turn warnings off
predict_results <- function(pete_team,mike_team){
if (length(mike_team)>length(pete_team)){
pete_team <-c(pete_team,"")
}
if (length(mike_team)<length(pete_team)){
mike_team <-c(mike_team,"")
}
squads <-cbind(pete_team,mike_team)
colnames(squads) <- c("Villa","Boro")
rownames(squads) <- 1:nrow(squads)
tmp1 <- sort(rpois(2,3.5),decreasing = T)
print(squads)
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2]," to ",sample(c("Villa","Boro"),1),sep=""))
}
players <- c("Elliott Fenn",
#"Peter Mitchell",
"Alec Wilson",
"Steven Wallbridge",
"Gary Saggers",
"Jon Green",
"Jon Barber",
"Mark Etherton",
#"Michael Spence",
"Richard Harrod",
"Chris Challiss",
"Andrew Soanes",
"Manuel Nicolaus",
"Isaac Fickling",
"Franck Dal-Molin",
"Alexander Bird",
"Kevin Keable",
"Nathan Brown",
"Paul Buckley",
"Brian Kneafsey (Ten)",
"Christopher Popham (Ten)",
"Simone de Winter",
"Will Manning",
"Peter Kohler",
"David Righton (Ten)",
"Nathan Woods",
"Luke Pope",
"Ross"
)
captains <- paste("The",c("Naked Australian", "Bully"))
### draw the teams
player.df <-cbind(sample(players),sample(rep(captains,times=ceiling(length(players)/2)),size=length(players)),0)
pete_team <- c()
mike_team <- c()
n_pl <- length(players)
dosh <- rep(100,2)
for(i in 1:n_pl){
tts <- readline(prompt = "Press enter for new player or type 'error' to stop")
if (tts=="error"){
break
}
print(paste(player.df[i,1],"is assigned to",player.df[i,2]))
accept <- F
while(accept==F){
name <- readline(prompt = "Who got this player (P or M)?")
if (name=="P"|name=="p"){
accept <- T
tmp <- 1
pete_team <- c(pete_team,player.df[i,1])
}else if(name=="M" |name=="m"){
accept <- T
tmp <- 2
mike_team <- c(mike_team,player.df[i,1])
}else{
print("Idiots!! Must be P or M")
}
}
accept<- F
while(accept==F){
accept1 <- F
while(accept1 == F){
cost <- as.numeric(readline(prompt = "How much?"))
if(is.na(cost)){
print("Concentrate lads, this is where the price goes")
}else{
accept1 <- T
if(cost != floor(cost)){
cost <- ceiling(cost)
print(paste("No change given!! You will be charged £",cost," for this transaction",sep=""))
}
}
}
if (cost <= dosh[tmp] & cost >= 0){
accept <- T
if(cost==0){
tmp_s <- sample(1:5,size=1)
if (tmp_s==1){
print(paste(player.df[i,1],"is human too"))
}else if(tmp_s==2){
print(paste("Stop being so tight!"))
}else if(tmp_s==3){
print(paste(captains[tmp],"still has to look", player.df[i,1],"in the eye"))
}else if(tmp_s==4){
print(paste(player.df[i,1],"must never find out"))
}
}
if(cost==1){print("Gypo value!")}
if(cost==7){print(paste(player.df[i,1],"will be great in the pub afterwards"))}
if(cost>=15 & cost < 20){print(paste(player.df[i,1],"is never worth that much"))}
if(cost >= 20){print(paste(captains[tmp],"is made of money!!"))}
dosh[tmp] <- dosh[tmp] - cost
}else{
print("You cannot afford this")
}
}
player.df[i,3] <- cost
if (length(pete_team)==ceiling(n_pl/2)){
print(paste(captains[1],"has a full team"))
mike_team <- c(mike_team,player.df[-(1:i),1])
predict_results()
break
}
if (length(mike_team)==ceiling(n_pl/2)){
print(paste(captains[2],"has a full team"))
pete_team <- c(pete_team,player.df[-(1:i),1])
predict_results()
break
}
a_p <- ifelse(length(pete_team)==1,"player and","players and")
if (dosh[1] > 0){
print(paste(captains[1],"has",length(pete_team),a_p,dosh[1],"quid left"))
}else{
print(paste(captains[1],"has",length(pete_team),a_p,"is skint"))
}
a_m <- ifelse(length(mike_team)==1,"player and","players and")
if (dosh[2] > 0){
print(paste(captains[2],"has",length(mike_team),a_m,dosh[2],"quid left"))
}else{
print(paste(captains[2],"has",length(mike_team),a_m,"is skint"))
}
if (i < (n_pl -3 )){
print(paste("There are", n_pl - i,"players left"))
}else if(i == (n_pl - 2)){
print("Down to the last player")
}
}
### I love stats me
set.seed(12)
options(warn=-1) ## turn warnings off
predict_results <- function(pete_team,mike_team){
if (length(mike_team)>length(pete_team)){
pete_team <-c(pete_team,"")
}
if (length(mike_team)<length(pete_team)){
mike_team <-c(mike_team,"")
}
squads <-cbind(pete_team,mike_team)
colnames(squads) <- c("Villa","Boro")
rownames(squads) <- 1:nrow(squads)
tmp1 <- sort(rpois(2,3.5),decreasing = T)
print(squads)
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2]," to ",sample(c("Villa","Boro"),1),sep=""))
}
players <- c("Elliott Fenn",
#"Peter Mitchell",
"Alec Wilson",
"Steven Wallbridge",
"Gary Saggers",
"Jon Green",
"Jon Barber",
"Mark Etherton",
#"Michael Spence",
"Richard Harrod",
"Chris Challiss",
"Andrew Soanes",
"Manuel Nicolaus",
"Isaac Fickling",
"Franck Dal-Molin",
"Alexander Bird",
"Kevin Keable",
"Nathan Brown",
"Paul Buckley",
"Brian Kneafsey (Ten)",
"Christopher Popham (Ten)",
"Simone de Winter",
"Will Manning",
"Peter Kohler",
"David Righton (Ten)",
"Nathan Woods",
"Luke Pope",
"Ross"
)
captains <- paste("The",c("Naked Australian", "Bully"))
### draw the teams
player.df <-cbind(sample(players),sample(rep(captains,times=ceiling(length(players)/2)),size=length(players)),0)
pete_team <- c()
mike_team <- c()
n_pl <- length(players)
dosh <- rep(100,2)
for(i in 1:n_pl){
tts <- readline(prompt = "Press enter for new player or type 'error' to stop: ")
if (tts=="error"){
break
}
print(paste(player.df[i,1],"is assigned to",player.df[i,2]))
accept <- F
while(accept==F){
name <- readline(prompt = "Who got this player (P or M)?")
if (name=="P"|name=="p"){
accept <- T
tmp <- 1
pete_team <- c(pete_team,player.df[i,1])
}else if(name=="M" |name=="m"){
accept <- T
tmp <- 2
mike_team <- c(mike_team,player.df[i,1])
}else{
print("Idiots!! Must be P or M")
}
}
accept<- F
while(accept==F){
accept1 <- F
while(accept1 == F){
cost <- as.numeric(readline(prompt = "How much?"))
if(is.na(cost)){
print("Concentrate lads, this is where the price goes")
}else{
accept1 <- T
if(cost != floor(cost)){
cost <- ceiling(cost)
print(paste("No change given!! You will be charged £",cost," for this transaction",sep=""))
}
}
}
if (cost <= dosh[tmp] & cost >= 0){
accept <- T
if(cost==0){
tmp_s <- sample(1:5,size=1)
if (tmp_s==1){
print(paste(player.df[i,1],"is human too"))
}else if(tmp_s==2){
print(paste("Stop being so tight!"))
}else if(tmp_s==3){
print(paste(captains[tmp],"still has to look", player.df[i,1],"in the eye"))
}else if(tmp_s==4){
print(paste(player.df[i,1],"must never find out"))
}
}
if(cost==1){print("Gypo value!")}
if(cost==7){print(paste(player.df[i,1],"will be great in the pub afterwards"))}
if(cost>=15 & cost < 20){print(paste(player.df[i,1],"is never worth that much"))}
if(cost >= 20){print(paste(captains[tmp],"is made of money!!"))}
dosh[tmp] <- dosh[tmp] - cost
}else{
print("You cannot afford this")
}
}
player.df[i,3] <- cost
if (length(pete_team)==ceiling(n_pl/2)){
print(paste(captains[1],"has a full team"))
mike_team <- c(mike_team,player.df[-(1:i),1])
predict_results()
break
}
if (length(mike_team)==ceiling(n_pl/2)){
print(paste(captains[2],"has a full team"))
pete_team <- c(pete_team,player.df[-(1:i),1])
predict_results()
break
}
a_p <- ifelse(length(pete_team)==1,"player and","players and")
if (dosh[1] > 0){
print(paste(captains[1],"has",length(pete_team),a_p,dosh[1],"quid left"))
}else{
print(paste(captains[1],"has",length(pete_team),a_p,"is skint"))
}
a_m <- ifelse(length(mike_team)==1,"player and","players and")
if (dosh[2] > 0){
print(paste(captains[2],"has",length(mike_team),a_m,dosh[2],"quid left"))
}else{
print(paste(captains[2],"has",length(mike_team),a_m,"is skint"))
}
if (i < (n_pl -3 )){
print(paste("There are", n_pl - i,"players left"))
}else if(i == (n_pl - 2)){
print("Down to the last player")
}
}
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
predict_results(pete_team = pete_team,mike_team = mike_team)
predict_results(pete_team = pete_team,mike_team = mike_team)
predict_results(pete_team = pete_team,mike_team = mike_team)
tmp1 <- sort(rpois(2,3.5),decreasing = T)
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2]," with ",sample(team_names,1)," winning on penalties",sep=""))
team_names=c("Villa","Boro")
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2]," with ",sample(team_names,1)," winning on penalties",sep=""))
tmp
tmp*-1 + 3
tmp <- 1
tmp*-1 + 3
print(paste(player.df[i,1], "is deemed not good enough for", captains[tmp*-1 + 3]))
print(paste( captains[tmp*-1 + 3],"is too good for",player.df[i,1]))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2)))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(player.df[i,1],"must never find out"))
print(paste( captains[tmp*-1 + 3],"is too good for",player.df[i,1]))
print(paste("Stop being so tight!"))
print(paste(player.df[i,1],"is human too"))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
{print(paste(player.df[i,1],"scores both on and off the field"))}
print(paste(captains[tmp],"better hopes",player.df[i,1],"will turn up"))
print(paste(captains[tmp],"better hope",player.df[i,1],"will turn up"))
print(paste(captains[tmp],"will have wasted a lot of money if",player.df[i,1],"does not turn up"))
print(paste(captains[tmp],"wishes",captains[tmp*-1 + 3],"would stop being tight"))
print(paste(captains[tmp],"wishes",captains[tmp*-1 + 3],"would stop being so tight"))
print(paste( captains[tmp*-1 + 3],"is too good for",player.df[i,1]))
print(paste(player.df[i,1],"must never find out"))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste("No change given!! ", captains[tmp], " will be charged £",cost," for this transaction",sep=""))
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results <- function(pete_team,mike_team,team_names=c("Villa","Boro")){
if (length(mike_team)>length(pete_team)){
pete_team <-c(pete_team,"")
}
if (length(mike_team)<length(pete_team)){
mike_team <-c(mike_team,"")
}
squads <-cbind(pete_team,mike_team)
colnames(squads) <- team_names
rownames(squads) <- 1:nrow(squads)
tmp1 <- sort(rpois(2,3.5),decreasing = T)
print(squads)
if (tmp1[1]==tmp1[2]){
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2]," with ",sample(team_names,1)," winning on penalties",sep=""))
}else{
print(paste("The predicted result will be ", tmp1[1],"-",tmp1[2]," to ",sample(team_names,1),sep=""))
}
}
team_names=c("Villa","Boro")
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
predict_results(pete_team = pete_team,mike_team = mike_team,team_names = team_names)
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(captains[tmp]," has got a propa bargain there. ",player.df[i,1]," is worth at least £", 1+rpois(1,2),sep=""))
print(paste(player.df[i,1],"is not real"))
paste(captains[tmp*-1 + 3],"got off with one there"))
paste(captains[tmp*-1 + 3],"got off with one there")
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
source('C:/Users/MS23/Desktop/i_love_stats_me.R')
x <- rnorm(1000)
plot(x)
plot(qnorm(x))
plot(pnorm(x))
x <- rnorm(1000)
plot(pnorm(x))
x <- rnorm(1000)
par(mfrow=c(1,2))
plot(x)
plot(pnorm(x))
hist(x)
x <- gamma(1000)
par(mfrow=c(1,2))
plot(x)
x <- rgamma(1000)
x <- rexp(1000)
par(mfrow=c(1,2))
plot(x)
hist(x)
plot(pnorm(x))
plot(pexp(x))
x <- rexp(1000)
par(mfrow=c(1,2))
plot(x)
plot(pexp(x))
st_mod <- stan_model("Stan/ThirdYear/withPots_twoYearMov.stan")
#fit <- sampling(st_mod,data=dat,chains=1,control=list(adapt_delta = 0.9,max_treedepth=12),iter=10)
fit <- sampling(st_mod,data=dat,chains=1,control=list(adapt_delta = 0.9,max_treedepth=12),iter=1000,warmup=800)
setwd("C:/Users/MS23/OneDrive - CEFAS/EcoEnsemble")
library(roxygen2)
roxygenise()
?EcoEnsemble
library(rstantool)
library(rstantools)
install.packages("rstantools")
install.packages("matrixcalc")
roxygenise()
?mizer::`plot,MizerParams,missing-method`
