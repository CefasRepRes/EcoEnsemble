// Generated by rstantools.  Do not edit by hand.

/*
    EcoEnsemble is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EcoEnsemble is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EcoEnsemble.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ensemble_prior_hierarchical_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 208> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 116, column 2 to column 56)",
  " (in 'string', line 117, column 2 to column 37)",
  " (in 'string', line 118, column 2 to column 38)",
  " (in 'string', line 119, column 2 to column 32)",
  " (in 'string', line 120, column 2 to column 34)",
  " (in 'string', line 121, column 2 to column 29)",
  " (in 'string', line 123, column 2 to column 47)",
  " (in 'string', line 124, column 2 to column 34)",
  " (in 'string', line 125, column 2 to column 29)",
  " (in 'string', line 126, column 2 to column 24)",
  " (in 'string', line 130, column 2 to column 25)",
  " (in 'string', line 139, column 4 to column 72)",
  " (in 'string', line 140, column 4 to column 56)",
  " (in 'string', line 143, column 2 to column 32)",
  " (in 'string', line 144, column 2 to column 32)",
  " (in 'string', line 145, column 2 to column 52)",
  " (in 'string', line 146, column 2 to column 29)",
  " (in 'string', line 147, column 2 to column 42)",
  " (in 'string', line 148, column 2 to column 100)",
  " (in 'string', line 149, column 2 to column 70)",
  " (in 'string', line 151, column 2 to column 44)",
  " (in 'string', line 152, column 2 to column 87)",
  " (in 'string', line 153, column 2 to column 79)",
  " (in 'string', line 155, column 2 to column 42)",
  " (in 'string', line 156, column 2 to column 98)",
  " (in 'string', line 164, column 2 to column 75)",
  " (in 'string', line 165, column 2 to column 38)",
  " (in 'string', line 166, column 2 to column 30)",
  " (in 'string', line 168, column 2 to column 29)",
  " (in 'string', line 169, column 2 to column 50)",
  " (in 'string', line 171, column 3 to column 147)",
  " (in 'string', line 172, column 4 to column 41)",
  " (in 'string', line 173, column 4 to column 96)",
  " (in 'string', line 174, column 3 to column 79)",
  " (in 'string', line 170, column 16 to line 175, column 3)",
  " (in 'string', line 170, column 2 to line 175, column 3)",
  " (in 'string', line 177, column 2 to column 54)",
  " (in 'string', line 178, column 2 to column 99)",
  " (in 'string', line 178, column 99 to column 100)",
  " (in 'string', line 180, column 4 to column 133)",
  " (in 'string', line 179, column 16 to line 181, column 3)",
  " (in 'string', line 179, column 2 to line 181, column 3)",
  " (in 'string', line 182, column 2 to column 70)",
  " (in 'string', line 183, column 2 to column 72)",
  " (in 'string', line 185, column 4 to column 50)",
  " (in 'string', line 186, column 4 to column 61)",
  " (in 'string', line 187, column 3 to column 62)",
  " (in 'string', line 184, column 16 to line 188, column 3)",
  " (in 'string', line 184, column 2 to line 188, column 3)",
  " (in 'string', line 195, column 2 to column 81)",
  " (in 'string', line 197, column 2 to column 28)",
  " (in 'string', line 198, column 2 to column 60)",
  " (in 'string', line 200, column 2 to column 93)",
  " (in 'string', line 207, column 4 to column 95)",
  " (in 'string', line 206, column 9 to line 208, column 3)",
  " (in 'string', line 205, column 4 to column 87)",
  " (in 'string', line 204, column 35 to line 206, column 3)",
  " (in 'string', line 204, column 9 to line 208, column 3)",
  " (in 'string', line 203, column 4 to column 51)",
  " (in 'string', line 202, column 28 to line 204, column 3)",
  " (in 'string', line 202, column 2 to line 208, column 3)",
  " (in 'string', line 212, column 2 to column 60)",
  " (in 'string', line 219, column 4 to column 95)",
  " (in 'string', line 218, column 8 to line 220, column 3)",
  " (in 'string', line 217, column 4 to column 87)",
  " (in 'string', line 216, column 35 to line 218, column 3)",
  " (in 'string', line 216, column 9 to line 220, column 3)",
  " (in 'string', line 215, column 4 to column 51)",
  " (in 'string', line 214, column 28 to line 216, column 3)",
  " (in 'string', line 214, column 2 to line 220, column 3)",
  " (in 'string', line 222, column 1 to column 141)",
  " (in 'string', line 223, column 4 to column 159)",
  " (in 'string', line 226, column 10 to line 227, column 121)",
  " (in 'string', line 228, column 10 to line 229, column 121)",
  " (in 'string', line 225, column 27 to line 230, column 9)",
  " (in 'string', line 225, column 8 to line 230, column 9)",
  " (in 'string', line 224, column 24 to line 231, column 7)",
  " (in 'string', line 224, column 6 to line 231, column 7)",
  " (in 'string', line 234, column 4 to column 98)",
  " (in 'string', line 235, column 4 to column 33)",
  " (in 'string', line 236, column 4 to column 37)",
  " (in 'string', line 238, column 4 to column 104)",
  " (in 'string', line 232, column 15 to line 239, column 3)",
  " (in 'string', line 232, column 2 to line 239, column 3)",
  " (in 'string', line 42, column 2 to column 18)",
  " (in 'string', line 52, column 2 to column 17)",
  " (in 'string', line 70, column 2 to column 42)",
  " (in 'string', line 71, column 2 to column 42)",
  " (in 'string', line 72, column 2 to column 42)",
  " (in 'string', line 78, column 2 to column 61)",
  " (in 'string', line 79, column 2 to column 55)",
  " (in 'string', line 81, column 2 to column 38)",
  " (in 'string', line 82, column 2 to column 37)",
  " (in 'string', line 84, column 10 to column 11)",
  " (in 'string', line 84, column 2 to column 33)",
  " (in 'string', line 85, column 10 to column 11)",
  " (in 'string', line 85, column 2 to column 33)",
  " (in 'string', line 86, column 8 to column 38)",
  " (in 'string', line 86, column 2 to column 66)",
  " (in 'string', line 87, column 9 to column 39)",
  " (in 'string', line 87, column 41 to column 71)",
  " (in 'string', line 87, column 2 to column 101)",
  " (in 'string', line 88, column 8 to column 38)",
  " (in 'string', line 88, column 2 to column 81)",
  " (in 'string', line 89, column 10 to column 40)",
  " (in 'string', line 89, column 42 to column 72)",
  " (in 'string', line 89, column 2 to column 98)",
  " (in 'string', line 90, column 10 to column 40)",
  " (in 'string', line 90, column 42 to column 72)",
  " (in 'string', line 90, column 2 to column 98)",
  " (in 'string', line 93, column 9 to column 10)",
  " (in 'string', line 93, column 1 to column 32)",
  " (in 'string', line 94, column 10 to column 11)",
  " (in 'string', line 94, column 2 to column 33)",
  " (in 'string', line 95, column 7 to column 36)",
  " (in 'string', line 95, column 1 to column 64)",
  " (in 'string', line 96, column 8 to column 37)",
  " (in 'string', line 96, column 38 to column 67)",
  " (in 'string', line 96, column 1 to column 97)",
  " (in 'string', line 97, column 7 to column 36)",
  " (in 'string', line 97, column 1 to column 79)",
  " (in 'string', line 98, column 9 to column 38)",
  " (in 'string', line 98, column 39 to column 68)",
  " (in 'string', line 98, column 1 to column 94)",
  " (in 'string', line 99, column 10 to column 39)",
  " (in 'string', line 99, column 40 to column 69)",
  " (in 'string', line 99, column 2 to column 95)",
  " (in 'string', line 101, column 2 to column 38)",
  " (in 'string', line 102, column 2 to column 37)",
  " (in 'string', line 104, column 19 to column 20)",
  " (in 'string', line 104, column 1 to column 38)",
  " (in 'string', line 106, column 19 to column 20)",
  " (in 'string', line 106, column 1 to column 40)",
  " (in 'string', line 107, column 10 to column 11)",
  " (in 'string', line 107, column 2 to column 30)",
  " (in 'string', line 108, column 2 to column 44)",
  " (in 'string', line 109, column 8 to column 9)",
  " (in 'string', line 109, column 11 to column 12)",
  " (in 'string', line 109, column 1 to column 43)",
  " (in 'string', line 116, column 8 to column 9)",
  " (in 'string', line 116, column 37 to column 38)",
  " (in 'string', line 117, column 8 to column 9)",
  " (in 'string', line 117, column 19 to column 20)",
  " (in 'string', line 118, column 8 to column 9)",
  " (in 'string', line 118, column 24 to column 25)",
  " (in 'string', line 119, column 8 to column 9)",
  " (in 'string', line 119, column 18 to column 19)",
  " (in 'string', line 120, column 20 to column 21)",
  " (in 'string', line 121, column 15 to column 16)",
  " (in 'string', line 123, column 28 to column 29)",
  " (in 'string', line 124, column 20 to column 21)",
  " (in 'string', line 125, column 15 to column 16)",
  " (in 'string', line 126, column 10 to column 11)",
  " (in 'string', line 130, column 14 to column 15)",
  " (in 'string', line 139, column 22 to column 23)",
  " (in 'string', line 139, column 26 to column 27)",
  " (in 'string', line 140, column 12 to column 13)",
  " (in 'string', line 143, column 8 to column 9)",
  " (in 'string', line 143, column 19 to column 20)",
  " (in 'string', line 143, column 21 to column 22)",
  " (in 'string', line 144, column 8 to column 9)",
  " (in 'string', line 144, column 19 to column 20)",
  " (in 'string', line 145, column 10 to column 11)",
  " (in 'string', line 146, column 8 to column 9)",
  " (in 'string', line 146, column 19 to column 20)",
  " (in 'string', line 147, column 10 to column 11)",
  " (in 'string', line 148, column 10 to column 11)",
  " (in 'string', line 148, column 12 to column 13)",
  " (in 'string', line 149, column 10 to column 11)",
  " (in 'string', line 149, column 12 to column 13)",
  " (in 'string', line 151, column 8 to column 9)",
  " (in 'string', line 151, column 28 to column 29)",
  " (in 'string', line 152, column 10 to column 19)",
  " (in 'string', line 153, column 10 to column 19)",
  " (in 'string', line 153, column 20 to column 29)",
  " (in 'string', line 155, column 10 to column 11)",
  " (in 'string', line 156, column 10 to column 11)",
  " (in 'string', line 156, column 12 to column 13)",
  " (in 'string', line 164, column 9 to column 18)",
  " (in 'string', line 164, column 21 to column 30)",
  " (in 'string', line 165, column 9 to column 18)",
  " (in 'string', line 166, column 9 to column 18)",
  " (in 'string', line 6, column 4 to column 48)",
  " (in 'string', line 5, column 19 to line 7, column 3)",
  " (in 'string', line 12, column 4 to column 19)",
  " (in 'string', line 13, column 4 to column 17)",
  " (in 'string', line 16, column 8 to column 69)",
  " (in 'string', line 15, column 24 to line 17, column 7)",
  " (in 'string', line 15, column 6 to line 17, column 7)",
  " (in 'string', line 14, column 24 to line 18, column 5)",
  " (in 'string', line 14, column 4 to line 18, column 5)",
  " (in 'string', line 19, column 4 to column 21)",
  " (in 'string', line 11, column 72 to line 20, column 3)",
  " (in 'string', line 25, column 4 to column 23)",
  " (in 'string', line 28, column 8 to column 78)",
  " (in 'string', line 27, column 24 to line 29, column 7)",
  " (in 'string', line 27, column 6 to line 29, column 7)",
  " (in 'string', line 26, column 22 to line 30, column 5)",
  " (in 'string', line 26, column 4 to line 30, column 5)",
  " (in 'string', line 31, column 4 to column 21)",
  " (in 'string', line 24, column 71 to line 32, column 3)",
  " (in 'string', line 34, column 4 to column 16)",
  " (in 'string', line 36, column 5 to column 56)",
  " (in 'string', line 35, column 18 to line 37, column 4)",
  " (in 'string', line 35, column 4 to line 37, column 4)",
  " (in 'string', line 38, column 3 to column 14)",
  " (in 'string', line 33, column 50 to line 39, column 3)"};
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__> As(const T0__& Rho, std::ostream* pstream__);
template <typename T0__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T2__>,
  stan::base_type_t<T3__>>
priors_cor_beta(const T0__& Rho_arg__, const int& N, const T2__&
                beta_1_arg__, const T3__& beta_2_arg__, std::ostream*
                pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T2__>>
priors_cor_hierarchical_beta(const T0__& ind_st_cor_arg__, const int& N,
                             const T2__& M_arg__, std::ostream* pstream__);
int
sq_int(const std::vector<int>& model_num_species, const int& M, std::ostream*
       pstream__);
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__> As(const T0__& Rho, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 183;
    return (((1 / stan::math::pi()) *
           stan::math::atan((Rho /
             stan::math::sqrt((1 - stan::math::pow(Rho, 2))))))
           + 0.5);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T2__>,
  stan::base_type_t<T3__>>
priors_cor_beta(const T0__& Rho_arg__, const int& N, const T2__&
                beta_1_arg__, const T3__& beta_2_arg__, std::ostream*
                pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& Rho = stan::math::to_ref(Rho_arg__);
  const auto& beta_1 = stan::math::to_ref(beta_1_arg__);
  const auto& beta_2 = stan::math::to_ref(beta_2_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ log_prior = DUMMY_VAR__;
    current_statement__ = 186;
    log_prior = 0;
    current_statement__ = 191;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 189;
      for (int j = (i + 1); j <= N; ++j) {
        current_statement__ = 187;
        log_prior = (log_prior +
          stan::math::beta_lpdf<false>(
            As(
              stan::model::rvalue(Rho, "Rho", stan::model::index_uni(i),
                stan::model::index_uni(j)), pstream__),
            stan::model::rvalue(beta_1, "beta_1", stan::model::index_uni(i),
              stan::model::index_uni(j)),
            stan::model::rvalue(beta_2, "beta_2", stan::model::index_uni(i),
              stan::model::index_uni(j))));
      }
    }
    current_statement__ = 192;
    return log_prior;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T2__>>
priors_cor_hierarchical_beta(const T0__& ind_st_cor_arg__, const int& N,
                             const T2__& M_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& ind_st_cor = stan::math::to_ref(ind_st_cor_arg__);
  const auto& M = stan::math::to_ref(M_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ log_prior = DUMMY_VAR__;
    current_statement__ = 194;
    log_prior = 0;
    current_statement__ = 199;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 197;
      for (int j = (i + 1); j <= N; ++j) {
        current_statement__ = 195;
        log_prior = (log_prior +
          stan::math::beta_lpdf<false>((0.5 *
            (stan::model::rvalue(ind_st_cor, "ind_st_cor",
               stan::model::index_uni(i), stan::model::index_uni(j)) + 1)),
            stan::model::rvalue(M, "M", stan::model::index_uni(i),
              stan::model::index_uni(j)),
            stan::model::rvalue(M, "M", stan::model::index_uni(j),
              stan::model::index_uni(i))));
      }
    }
    current_statement__ = 200;
    return log_prior;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
sq_int(const std::vector<int>& model_num_species, const int& M, std::ostream*
       pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int ret = std::numeric_limits<int>::min();
    current_statement__ = 202;
    ret = 0;
    current_statement__ = 205;
    for (int i = 1; i <= M; ++i) {
      current_statement__ = 203;
      ret = (ret +
        (stan::model::rvalue(model_num_species, "model_num_species",
           stan::model::index_uni(i))
        *
        stan::model::rvalue(model_num_species, "model_num_species",
          stan::model::index_uni(i))));
    }
    current_statement__ = 206;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_ensemble_prior_hierarchical final : public model_base_crtp<model_ensemble_prior_hierarchical> {
private:
  int N;
  int M;
  int form_prior_ind_st;
  int form_prior_ind_lt;
  int form_prior_sha_st;
  Eigen::Matrix<double,-1,1>
    prior_ind_st_cor_hierarchical_beta_hyper_params_data__;
  Eigen::Matrix<double,-1,1> prior_ind_st_var_hierarchical_hyperparams_data__;
  double prior_ind_st_ar_alpha;
  double prior_ind_st_ar_beta;
  Eigen::Matrix<double,-1,1> prior_ind_lt_var_a_data__;
  Eigen::Matrix<double,-1,1> prior_ind_lt_var_b_data__;
  std::vector<double> prior_ind_lt_cor_lkj;
  Eigen::Matrix<double,-1,-1> prior_ind_lt_cor_wish_sigma_data__;
  std::vector<double> prior_ind_lt_cor_wish_nu;
  Eigen::Matrix<double,-1,-1> prior_ind_lt_cor_beta_1_data__;
  Eigen::Matrix<double,-1,-1> prior_ind_lt_cor_beta_2_data__;
  Eigen::Matrix<double,-1,1> prior_sha_st_var_a_data__;
  Eigen::Matrix<double,-1,1> prior_sha_st_var_b_data__;
  std::vector<double> prior_sha_st_cor_lkj;
  Eigen::Matrix<double,-1,-1> prior_sha_st_cor_wish_sigma_data__;
  std::vector<double> prior_sha_st_cor_wish_nu;
  Eigen::Matrix<double,-1,-1> prior_sha_st_cor_beta_1_data__;
  Eigen::Matrix<double,-1,-1> prior_sha_st_cor_beta_2_data__;
  double prior_sha_st_ar_alpha;
  double prior_sha_st_ar_beta;
  Eigen::Matrix<double,-1,1> prior_sha_lt_sd_data__;
  Eigen::Matrix<double,-1,1> prior_y_init_mean_data__;
  Eigen::Matrix<double,-1,1> prior_y_init_var_data__;
  double prior_sigma_t_inv_wish_nu;
  Eigen::Matrix<double,-1,-1> prior_sigma_t_inv_wish_sigma_data__;
  int x_hat_1dim__;
  int SIGMA_init_1dim__;
  int SIGMA_init_2dim__;
  int SIGMA_1dim__;
  int SIGMA_2dim__;
  int lt_discrepancies_1dim__;
  int AR_params_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    prior_ind_st_cor_hierarchical_beta_hyper_params{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    prior_ind_st_var_hierarchical_hyperparams{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_ind_lt_var_a{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_ind_lt_var_b{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>>
    prior_ind_lt_cor_wish_sigma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>>
    prior_ind_lt_cor_beta_1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>>
    prior_ind_lt_cor_beta_2{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_sha_st_var_a{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_sha_st_var_b{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>>
    prior_sha_st_cor_wish_sigma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>>
    prior_sha_st_cor_beta_1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>>
    prior_sha_st_cor_beta_2{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_sha_lt_sd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_y_init_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_y_init_var{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>>
    prior_sigma_t_inv_wish_sigma{nullptr, 0, 0};
public:
  ~model_ensemble_prior_hierarchical() {}
  model_ensemble_prior_hierarchical(stan::io::var_context& context__,
                                    unsigned int random_seed__ = 0,
                                    std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_ensemble_prior_hierarchical_namespace::model_ensemble_prior_hierarchical";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 85;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 85;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 85;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 86;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 86;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 86;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 87;
      context__.validate_dims("data initialization", "form_prior_ind_st",
        "int", std::vector<size_t>{});
      form_prior_ind_st = std::numeric_limits<int>::min();
      current_statement__ = 87;
      form_prior_ind_st = context__.vals_i("form_prior_ind_st")[(1 - 1)];
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "form_prior_ind_st",
        form_prior_ind_st, 0);
      current_statement__ = 87;
      stan::math::check_less_or_equal(function__, "form_prior_ind_st",
        form_prior_ind_st, 3);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "form_prior_ind_lt",
        "int", std::vector<size_t>{});
      form_prior_ind_lt = std::numeric_limits<int>::min();
      current_statement__ = 88;
      form_prior_ind_lt = context__.vals_i("form_prior_ind_lt")[(1 - 1)];
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "form_prior_ind_lt",
        form_prior_ind_lt, 0);
      current_statement__ = 88;
      stan::math::check_less_or_equal(function__, "form_prior_ind_lt",
        form_prior_ind_lt, 2);
      current_statement__ = 89;
      context__.validate_dims("data initialization", "form_prior_sha_st",
        "int", std::vector<size_t>{});
      form_prior_sha_st = std::numeric_limits<int>::min();
      current_statement__ = 89;
      form_prior_sha_st = context__.vals_i("form_prior_sha_st")[(1 - 1)];
      current_statement__ = 89;
      stan::math::check_greater_or_equal(function__, "form_prior_sha_st",
        form_prior_sha_st, 0);
      current_statement__ = 89;
      stan::math::check_less_or_equal(function__, "form_prior_sha_st",
        form_prior_sha_st, 2);
      current_statement__ = 90;
      context__.validate_dims("data initialization",
        "prior_ind_st_cor_hierarchical_beta_hyper_params", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      prior_ind_st_cor_hierarchical_beta_hyper_params_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                                                                 std::numeric_limits<double>::quiet_NaN(
                                                                   ));
      new (&prior_ind_st_cor_hierarchical_beta_hyper_params)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_ind_st_cor_hierarchical_beta_hyper_params_data__.data(),
        4);
      {
        std::vector<local_scalar_t__>
          prior_ind_st_cor_hierarchical_beta_hyper_params_flat__;
        current_statement__ = 90;
        prior_ind_st_cor_hierarchical_beta_hyper_params_flat__ = context__.vals_r("prior_ind_st_cor_hierarchical_beta_hyper_params");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 90;
          stan::model::assign(
            prior_ind_st_cor_hierarchical_beta_hyper_params,
            prior_ind_st_cor_hierarchical_beta_hyper_params_flat__[(pos__ -
            1)],
            "assigning variable prior_ind_st_cor_hierarchical_beta_hyper_params",
            stan::model::index_uni(sym1__));
          current_statement__ = 90;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 91;
      context__.validate_dims("data initialization",
        "prior_ind_st_var_hierarchical_hyperparams", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      prior_ind_st_var_hierarchical_hyperparams_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                                                           std::numeric_limits<double>::quiet_NaN(
                                                             ));
      new (&prior_ind_st_var_hierarchical_hyperparams)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_ind_st_var_hierarchical_hyperparams_data__.data(),
        4);
      {
        std::vector<local_scalar_t__>
          prior_ind_st_var_hierarchical_hyperparams_flat__;
        current_statement__ = 91;
        prior_ind_st_var_hierarchical_hyperparams_flat__ = context__.vals_r("prior_ind_st_var_hierarchical_hyperparams");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 91;
          stan::model::assign(prior_ind_st_var_hierarchical_hyperparams,
            prior_ind_st_var_hierarchical_hyperparams_flat__[(pos__ - 1)],
            "assigning variable prior_ind_st_var_hierarchical_hyperparams",
            stan::model::index_uni(sym1__));
          current_statement__ = 91;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 92;
      context__.validate_dims("data initialization", "prior_ind_st_ar_alpha",
        "double", std::vector<size_t>{});
      prior_ind_st_ar_alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 92;
      prior_ind_st_ar_alpha = context__.vals_r("prior_ind_st_ar_alpha")[(1 -
        1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "prior_ind_st_ar_alpha",
        prior_ind_st_ar_alpha, 0);
      current_statement__ = 93;
      context__.validate_dims("data initialization", "prior_ind_st_ar_beta",
        "double", std::vector<size_t>{});
      prior_ind_st_ar_beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 93;
      prior_ind_st_ar_beta = context__.vals_r("prior_ind_st_ar_beta")[(1 -
        1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "prior_ind_st_ar_beta",
        prior_ind_st_ar_beta, 0);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("prior_ind_lt_var_a", "N", N);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "prior_ind_lt_var_a",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      prior_ind_lt_var_a_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&prior_ind_lt_var_a)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_ind_lt_var_a_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> prior_ind_lt_var_a_flat__;
        current_statement__ = 95;
        prior_ind_lt_var_a_flat__ = context__.vals_r("prior_ind_lt_var_a");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 95;
          stan::model::assign(prior_ind_lt_var_a,
            prior_ind_lt_var_a_flat__[(pos__ - 1)],
            "assigning variable prior_ind_lt_var_a",
            stan::model::index_uni(sym1__));
          current_statement__ = 95;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 96;
      stan::math::validate_non_negative_index("prior_ind_lt_var_b", "N", N);
      current_statement__ = 97;
      context__.validate_dims("data initialization", "prior_ind_lt_var_b",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      prior_ind_lt_var_b_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&prior_ind_lt_var_b)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_ind_lt_var_b_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> prior_ind_lt_var_b_flat__;
        current_statement__ = 97;
        prior_ind_lt_var_b_flat__ = context__.vals_r("prior_ind_lt_var_b");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 97;
          stan::model::assign(prior_ind_lt_var_b,
            prior_ind_lt_var_b_flat__[(pos__ - 1)],
            "assigning variable prior_ind_lt_var_b",
            stan::model::index_uni(sym1__));
          current_statement__ = 97;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 98;
      stan::math::validate_non_negative_index("prior_ind_lt_cor_lkj",
        "form_prior_ind_lt == 0 ? 1 : 0",
        (stan::math::logical_eq(form_prior_ind_lt, 0) ? 1 : 0));
      current_statement__ = 99;
      context__.validate_dims("data initialization", "prior_ind_lt_cor_lkj",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_ind_lt, 0) ? 1 : 0))});
      prior_ind_lt_cor_lkj = std::vector<double>((stan::math::logical_eq(
                                                    form_prior_ind_lt, 0) ? 1 : 0),
                               std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 99;
      prior_ind_lt_cor_lkj = context__.vals_r("prior_ind_lt_cor_lkj");
      current_statement__ = 100;
      stan::math::validate_non_negative_index("prior_ind_lt_cor_wish_sigma",
        "form_prior_ind_lt == 1 ? N : 0",
        (stan::math::logical_eq(form_prior_ind_lt, 1) ? N : 0));
      current_statement__ = 101;
      stan::math::validate_non_negative_index("prior_ind_lt_cor_wish_sigma",
        "form_prior_ind_lt == 1 ? N : 0",
        (stan::math::logical_eq(form_prior_ind_lt, 1) ? N : 0));
      current_statement__ = 102;
      context__.validate_dims("data initialization",
        "prior_ind_lt_cor_wish_sigma", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_ind_lt, 1) ? N : 0)),
          static_cast<size_t>(
            (stan::math::logical_eq(form_prior_ind_lt, 1) ? N : 0))});
      prior_ind_lt_cor_wish_sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant((
                                             stan::math::logical_eq(
                                               form_prior_ind_lt, 1) ? N : 0),
                                             (stan::math::logical_eq(
                                                form_prior_ind_lt, 1) ? N : 0),
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&prior_ind_lt_cor_wish_sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_ind_lt_cor_wish_sigma_data__.data(),
        (stan::math::logical_eq(form_prior_ind_lt, 1) ? N : 0),
        (stan::math::logical_eq(form_prior_ind_lt, 1) ? N : 0));
      {
        std::vector<local_scalar_t__> prior_ind_lt_cor_wish_sigma_flat__;
        current_statement__ = 102;
        prior_ind_lt_cor_wish_sigma_flat__ = context__.vals_r("prior_ind_lt_cor_wish_sigma");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(form_prior_ind_lt, 1) ? N : 0); ++sym1__) {
          current_statement__ = 102;
          for (int sym2__ = 1; sym2__ <=
               (stan::math::logical_eq(form_prior_ind_lt, 1) ? N : 0); ++sym2__) {
            current_statement__ = 102;
            stan::model::assign(prior_ind_lt_cor_wish_sigma,
              prior_ind_lt_cor_wish_sigma_flat__[(pos__ - 1)],
              "assigning variable prior_ind_lt_cor_wish_sigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 102;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 103;
      stan::math::validate_non_negative_index("prior_ind_lt_cor_wish_nu",
        "form_prior_ind_lt == 1 ? 1 : 0",
        (stan::math::logical_eq(form_prior_ind_lt, 1) ? 1 : 0));
      current_statement__ = 104;
      context__.validate_dims("data initialization",
        "prior_ind_lt_cor_wish_nu", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_ind_lt, 1) ? 1 : 0))});
      prior_ind_lt_cor_wish_nu = std::vector<double>((stan::math::logical_eq(
                                                        form_prior_ind_lt, 1) ? 1 : 0),
                                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 104;
      prior_ind_lt_cor_wish_nu = context__.vals_r("prior_ind_lt_cor_wish_nu");
      current_statement__ = 104;
      stan::math::check_greater_or_equal(function__,
        "prior_ind_lt_cor_wish_nu", prior_ind_lt_cor_wish_nu, (N - 1));
      current_statement__ = 105;
      stan::math::validate_non_negative_index("prior_ind_lt_cor_beta_1",
        "form_prior_ind_lt == 2 ? N : 0",
        (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0));
      current_statement__ = 106;
      stan::math::validate_non_negative_index("prior_ind_lt_cor_beta_1",
        "form_prior_ind_lt == 2 ? N : 0",
        (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0));
      current_statement__ = 107;
      context__.validate_dims("data initialization",
        "prior_ind_lt_cor_beta_1", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0)),
          static_cast<size_t>(
            (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0))});
      prior_ind_lt_cor_beta_1_data__ = Eigen::Matrix<double,-1,-1>::Constant((
                                         stan::math::logical_eq(
                                           form_prior_ind_lt, 2) ? N : 0),
                                         (stan::math::logical_eq(
                                            form_prior_ind_lt, 2) ? N : 0),
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      new (&prior_ind_lt_cor_beta_1)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_ind_lt_cor_beta_1_data__.data(),
        (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0),
        (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0));
      {
        std::vector<local_scalar_t__> prior_ind_lt_cor_beta_1_flat__;
        current_statement__ = 107;
        prior_ind_lt_cor_beta_1_flat__ = context__.vals_r("prior_ind_lt_cor_beta_1");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0); ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <=
               (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0); ++sym2__) {
            current_statement__ = 107;
            stan::model::assign(prior_ind_lt_cor_beta_1,
              prior_ind_lt_cor_beta_1_flat__[(pos__ - 1)],
              "assigning variable prior_ind_lt_cor_beta_1",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 107;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 108;
      stan::math::validate_non_negative_index("prior_ind_lt_cor_beta_2",
        "form_prior_ind_lt == 2 ? N : 0",
        (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0));
      current_statement__ = 109;
      stan::math::validate_non_negative_index("prior_ind_lt_cor_beta_2",
        "form_prior_ind_lt == 2 ? N : 0",
        (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0));
      current_statement__ = 110;
      context__.validate_dims("data initialization",
        "prior_ind_lt_cor_beta_2", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0)),
          static_cast<size_t>(
            (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0))});
      prior_ind_lt_cor_beta_2_data__ = Eigen::Matrix<double,-1,-1>::Constant((
                                         stan::math::logical_eq(
                                           form_prior_ind_lt, 2) ? N : 0),
                                         (stan::math::logical_eq(
                                            form_prior_ind_lt, 2) ? N : 0),
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      new (&prior_ind_lt_cor_beta_2)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_ind_lt_cor_beta_2_data__.data(),
        (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0),
        (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0));
      {
        std::vector<local_scalar_t__> prior_ind_lt_cor_beta_2_flat__;
        current_statement__ = 110;
        prior_ind_lt_cor_beta_2_flat__ = context__.vals_r("prior_ind_lt_cor_beta_2");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0); ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <=
               (stan::math::logical_eq(form_prior_ind_lt, 2) ? N : 0); ++sym2__) {
            current_statement__ = 110;
            stan::model::assign(prior_ind_lt_cor_beta_2,
              prior_ind_lt_cor_beta_2_flat__[(pos__ - 1)],
              "assigning variable prior_ind_lt_cor_beta_2",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 110;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 111;
      stan::math::validate_non_negative_index("prior_sha_st_var_a", "N", N);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "prior_sha_st_var_a",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      prior_sha_st_var_a_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&prior_sha_st_var_a)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_sha_st_var_a_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> prior_sha_st_var_a_flat__;
        current_statement__ = 112;
        prior_sha_st_var_a_flat__ = context__.vals_r("prior_sha_st_var_a");
        current_statement__ = 112;
        pos__ = 1;
        current_statement__ = 112;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 112;
          stan::model::assign(prior_sha_st_var_a,
            prior_sha_st_var_a_flat__[(pos__ - 1)],
            "assigning variable prior_sha_st_var_a",
            stan::model::index_uni(sym1__));
          current_statement__ = 112;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 113;
      stan::math::validate_non_negative_index("prior_sha_st_var_b", "N", N);
      current_statement__ = 114;
      context__.validate_dims("data initialization", "prior_sha_st_var_b",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      prior_sha_st_var_b_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&prior_sha_st_var_b)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_sha_st_var_b_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> prior_sha_st_var_b_flat__;
        current_statement__ = 114;
        prior_sha_st_var_b_flat__ = context__.vals_r("prior_sha_st_var_b");
        current_statement__ = 114;
        pos__ = 1;
        current_statement__ = 114;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 114;
          stan::model::assign(prior_sha_st_var_b,
            prior_sha_st_var_b_flat__[(pos__ - 1)],
            "assigning variable prior_sha_st_var_b",
            stan::model::index_uni(sym1__));
          current_statement__ = 114;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 115;
      stan::math::validate_non_negative_index("prior_sha_st_cor_lkj",
        "form_prior_sha_st == 0 ? 1 : 0",
        (stan::math::logical_eq(form_prior_sha_st, 0) ? 1 : 0));
      current_statement__ = 116;
      context__.validate_dims("data initialization", "prior_sha_st_cor_lkj",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_sha_st, 0) ? 1 : 0))});
      prior_sha_st_cor_lkj = std::vector<double>((stan::math::logical_eq(
                                                    form_prior_sha_st, 0) ? 1 : 0),
                               std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 116;
      prior_sha_st_cor_lkj = context__.vals_r("prior_sha_st_cor_lkj");
      current_statement__ = 117;
      stan::math::validate_non_negative_index("prior_sha_st_cor_wish_sigma",
        "form_prior_sha_st == 1 ? N : 0",
        (stan::math::logical_eq(form_prior_sha_st, 1) ? N : 0));
      current_statement__ = 118;
      stan::math::validate_non_negative_index("prior_sha_st_cor_wish_sigma",
        "form_prior_sha_st == 1 ? N : 0",
        (stan::math::logical_eq(form_prior_sha_st, 1) ? N : 0));
      current_statement__ = 119;
      context__.validate_dims("data initialization",
        "prior_sha_st_cor_wish_sigma", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_sha_st, 1) ? N : 0)),
          static_cast<size_t>(
            (stan::math::logical_eq(form_prior_sha_st, 1) ? N : 0))});
      prior_sha_st_cor_wish_sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant((
                                             stan::math::logical_eq(
                                               form_prior_sha_st, 1) ? N : 0),
                                             (stan::math::logical_eq(
                                                form_prior_sha_st, 1) ? N : 0),
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&prior_sha_st_cor_wish_sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_sha_st_cor_wish_sigma_data__.data(),
        (stan::math::logical_eq(form_prior_sha_st, 1) ? N : 0),
        (stan::math::logical_eq(form_prior_sha_st, 1) ? N : 0));
      {
        std::vector<local_scalar_t__> prior_sha_st_cor_wish_sigma_flat__;
        current_statement__ = 119;
        prior_sha_st_cor_wish_sigma_flat__ = context__.vals_r("prior_sha_st_cor_wish_sigma");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(form_prior_sha_st, 1) ? N : 0); ++sym1__) {
          current_statement__ = 119;
          for (int sym2__ = 1; sym2__ <=
               (stan::math::logical_eq(form_prior_sha_st, 1) ? N : 0); ++sym2__) {
            current_statement__ = 119;
            stan::model::assign(prior_sha_st_cor_wish_sigma,
              prior_sha_st_cor_wish_sigma_flat__[(pos__ - 1)],
              "assigning variable prior_sha_st_cor_wish_sigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 119;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 120;
      stan::math::validate_non_negative_index("prior_sha_st_cor_wish_nu",
        "form_prior_sha_st == 1 ? 1 : 0",
        (stan::math::logical_eq(form_prior_sha_st, 1) ? 1 : 0));
      current_statement__ = 121;
      context__.validate_dims("data initialization",
        "prior_sha_st_cor_wish_nu", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_sha_st, 1) ? 1 : 0))});
      prior_sha_st_cor_wish_nu = std::vector<double>((stan::math::logical_eq(
                                                        form_prior_sha_st, 1) ? 1 : 0),
                                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 121;
      prior_sha_st_cor_wish_nu = context__.vals_r("prior_sha_st_cor_wish_nu");
      current_statement__ = 121;
      stan::math::check_greater_or_equal(function__,
        "prior_sha_st_cor_wish_nu", prior_sha_st_cor_wish_nu, (N - 1));
      current_statement__ = 122;
      stan::math::validate_non_negative_index("prior_sha_st_cor_beta_1",
        "form_prior_sha_st == 2 ? N : 0",
        (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0));
      current_statement__ = 123;
      stan::math::validate_non_negative_index("prior_sha_st_cor_beta_1",
        "form_prior_sha_st == 2 ? N : 0",
        (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0));
      current_statement__ = 124;
      context__.validate_dims("data initialization",
        "prior_sha_st_cor_beta_1", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0)),
          static_cast<size_t>(
            (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0))});
      prior_sha_st_cor_beta_1_data__ = Eigen::Matrix<double,-1,-1>::Constant((
                                         stan::math::logical_eq(
                                           form_prior_sha_st, 2) ? N : 0),
                                         (stan::math::logical_eq(
                                            form_prior_sha_st, 2) ? N : 0),
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      new (&prior_sha_st_cor_beta_1)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_sha_st_cor_beta_1_data__.data(),
        (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0),
        (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0));
      {
        std::vector<local_scalar_t__> prior_sha_st_cor_beta_1_flat__;
        current_statement__ = 124;
        prior_sha_st_cor_beta_1_flat__ = context__.vals_r("prior_sha_st_cor_beta_1");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0); ++sym1__) {
          current_statement__ = 124;
          for (int sym2__ = 1; sym2__ <=
               (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0); ++sym2__) {
            current_statement__ = 124;
            stan::model::assign(prior_sha_st_cor_beta_1,
              prior_sha_st_cor_beta_1_flat__[(pos__ - 1)],
              "assigning variable prior_sha_st_cor_beta_1",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 124;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 125;
      stan::math::validate_non_negative_index("prior_sha_st_cor_beta_2",
        "form_prior_sha_st == 2 ? N : 0",
        (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0));
      current_statement__ = 126;
      stan::math::validate_non_negative_index("prior_sha_st_cor_beta_2",
        "form_prior_sha_st == 2 ? N : 0",
        (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0));
      current_statement__ = 127;
      context__.validate_dims("data initialization",
        "prior_sha_st_cor_beta_2", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0)),
          static_cast<size_t>(
            (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0))});
      prior_sha_st_cor_beta_2_data__ = Eigen::Matrix<double,-1,-1>::Constant((
                                         stan::math::logical_eq(
                                           form_prior_sha_st, 2) ? N : 0),
                                         (stan::math::logical_eq(
                                            form_prior_sha_st, 2) ? N : 0),
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      new (&prior_sha_st_cor_beta_2)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_sha_st_cor_beta_2_data__.data(),
        (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0),
        (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0));
      {
        std::vector<local_scalar_t__> prior_sha_st_cor_beta_2_flat__;
        current_statement__ = 127;
        prior_sha_st_cor_beta_2_flat__ = context__.vals_r("prior_sha_st_cor_beta_2");
        current_statement__ = 127;
        pos__ = 1;
        current_statement__ = 127;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0); ++sym1__) {
          current_statement__ = 127;
          for (int sym2__ = 1; sym2__ <=
               (stan::math::logical_eq(form_prior_sha_st, 2) ? N : 0); ++sym2__) {
            current_statement__ = 127;
            stan::model::assign(prior_sha_st_cor_beta_2,
              prior_sha_st_cor_beta_2_flat__[(pos__ - 1)],
              "assigning variable prior_sha_st_cor_beta_2",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 127;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 128;
      context__.validate_dims("data initialization", "prior_sha_st_ar_alpha",
        "double", std::vector<size_t>{});
      prior_sha_st_ar_alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 128;
      prior_sha_st_ar_alpha = context__.vals_r("prior_sha_st_ar_alpha")[(1 -
        1)];
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "prior_sha_st_ar_alpha",
        prior_sha_st_ar_alpha, 0);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "prior_sha_st_ar_beta",
        "double", std::vector<size_t>{});
      prior_sha_st_ar_beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 129;
      prior_sha_st_ar_beta = context__.vals_r("prior_sha_st_ar_beta")[(1 -
        1)];
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "prior_sha_st_ar_beta",
        prior_sha_st_ar_beta, 0);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("prior_sha_lt_sd", "N", N);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "prior_sha_lt_sd",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      prior_sha_lt_sd_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&prior_sha_lt_sd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_sha_lt_sd_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> prior_sha_lt_sd_flat__;
        current_statement__ = 131;
        prior_sha_lt_sd_flat__ = context__.vals_r("prior_sha_lt_sd");
        current_statement__ = 131;
        pos__ = 1;
        current_statement__ = 131;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 131;
          stan::model::assign(prior_sha_lt_sd, prior_sha_lt_sd_flat__[(pos__
            - 1)], "assigning variable prior_sha_lt_sd",
            stan::model::index_uni(sym1__));
          current_statement__ = 131;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 131;
      stan::math::check_greater_or_equal(function__, "prior_sha_lt_sd",
        prior_sha_lt_sd, 0);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("prior_y_init_mean", "N", N);
      current_statement__ = 133;
      context__.validate_dims("data initialization", "prior_y_init_mean",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      prior_y_init_mean_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&prior_y_init_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_y_init_mean_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> prior_y_init_mean_flat__;
        current_statement__ = 133;
        prior_y_init_mean_flat__ = context__.vals_r("prior_y_init_mean");
        current_statement__ = 133;
        pos__ = 1;
        current_statement__ = 133;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 133;
          stan::model::assign(prior_y_init_mean,
            prior_y_init_mean_flat__[(pos__ - 1)],
            "assigning variable prior_y_init_mean",
            stan::model::index_uni(sym1__));
          current_statement__ = 133;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "prior_y_init_mean",
        prior_y_init_mean, 0);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("prior_y_init_var", "N", N);
      current_statement__ = 135;
      context__.validate_dims("data initialization", "prior_y_init_var",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      prior_y_init_var_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&prior_y_init_var)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_y_init_var_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> prior_y_init_var_flat__;
        current_statement__ = 135;
        prior_y_init_var_flat__ = context__.vals_r("prior_y_init_var");
        current_statement__ = 135;
        pos__ = 1;
        current_statement__ = 135;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 135;
          stan::model::assign(prior_y_init_var,
            prior_y_init_var_flat__[(pos__ - 1)],
            "assigning variable prior_y_init_var",
            stan::model::index_uni(sym1__));
          current_statement__ = 135;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 136;
      context__.validate_dims("data initialization",
        "prior_sigma_t_inv_wish_nu", "double", std::vector<size_t>{});
      prior_sigma_t_inv_wish_nu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 136;
      prior_sigma_t_inv_wish_nu = context__.vals_r("prior_sigma_t_inv_wish_nu")[(1
        - 1)];
      current_statement__ = 136;
      stan::math::check_greater_or_equal(function__,
        "prior_sigma_t_inv_wish_nu", prior_sigma_t_inv_wish_nu, (N - 1));
      current_statement__ = 137;
      stan::math::validate_non_negative_index("prior_sigma_t_inv_wish_sigma",
        "N", N);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("prior_sigma_t_inv_wish_sigma",
        "N", N);
      current_statement__ = 139;
      context__.validate_dims("data initialization",
        "prior_sigma_t_inv_wish_sigma", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      prior_sigma_t_inv_wish_sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                                              N,
                                              std::numeric_limits<double>::quiet_NaN(
                                                ));
      new (&prior_sigma_t_inv_wish_sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_sigma_t_inv_wish_sigma_data__.data(),
        N, N);
      {
        std::vector<local_scalar_t__> prior_sigma_t_inv_wish_sigma_flat__;
        current_statement__ = 139;
        prior_sigma_t_inv_wish_sigma_flat__ = context__.vals_r("prior_sigma_t_inv_wish_sigma");
        current_statement__ = 139;
        pos__ = 1;
        current_statement__ = 139;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 139;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 139;
            stan::model::assign(prior_sigma_t_inv_wish_sigma,
              prior_sigma_t_inv_wish_sigma_flat__[(pos__ - 1)],
              "assigning variable prior_sigma_t_inv_wish_sigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 139;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 140;
      stan::math::validate_non_negative_index("ind_st_ar_param", "M", M);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("ind_st_ar_param", "N", N);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("log_ind_st_var", "M", M);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("log_ind_st_var", "N", N);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("ind_st_cor", "M", M);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("ind_st_cor", "N", N);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("ind_st_cor", "N", N);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("ind_lt_raw", "M", M);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("ind_lt_raw", "N", N);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("ind_lt_var", "N", N);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("ind_lt_cor", "N", N);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("ind_lt_cor", "N", N);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("sha_st_ar_param", "N", N);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("sha_st_var", "N", N);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("sha_st_cor", "N", N);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("sha_st_cor", "N", N);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("sha_lt_raw", "N", N);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("SIGMA_t", "N", N);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("SIGMA_t", "N", N);
      current_statement__ = 155;
      stan::math::validate_non_negative_index(
        "prior_ind_st_cor_hierarchical_beta_params", "N", N);
      current_statement__ = 156;
      stan::math::validate_non_negative_index(
        "prior_ind_st_cor_hierarchical_beta_params", "N", N);
      current_statement__ = 157;
      stan::math::validate_non_negative_index(
        "prior_ind_st_var_hierarchical_mu_params", "N", N);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("SIGMA_x", "M", M);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("SIGMA_x", "N", N);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("SIGMA_x", "N", N);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("ind_st_sd", "M", M);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("ind_st_sd", "N", N);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("sha_lt", "N", N);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("ind_lt", "M", M);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("ind_lt", "N", N);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("ind_lt_sd", "N", N);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("ind_lt_covar", "N", N);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("ind_lt_covar", "N", N);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("ind_lt_cov_cholesky", "N", N);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("ind_lt_cov_cholesky", "N", N);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("ind_st_var_2", "M", M);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("ind_st_var_2", "N", N);
      current_statement__ = 173;
      x_hat_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 173;
      x_hat_1dim__ = ((M + 2) * N);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("x_hat", "(M + 2) * N",
        x_hat_1dim__);
      current_statement__ = 174;
      SIGMA_init_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 174;
      SIGMA_init_1dim__ = ((M + 2) * N);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("SIGMA_init", "(M + 2) * N",
        SIGMA_init_1dim__);
      current_statement__ = 175;
      SIGMA_init_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 175;
      SIGMA_init_2dim__ = ((M + 2) * N);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("SIGMA_init", "(M + 2) * N",
        SIGMA_init_2dim__);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("sha_st_sd", "N", N);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("SIGMA_mu", "N", N);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("SIGMA_mu", "N", N);
      current_statement__ = 179;
      SIGMA_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 179;
      SIGMA_1dim__ = ((M + 2) * N);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("SIGMA", "(M + 2) * N",
        SIGMA_1dim__);
      current_statement__ = 180;
      SIGMA_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 180;
      SIGMA_2dim__ = ((M + 2) * N);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("SIGMA", "(M + 2) * N",
        SIGMA_2dim__);
      current_statement__ = 181;
      lt_discrepancies_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 181;
      lt_discrepancies_1dim__ = ((M + 2) * N);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("lt_discrepancies",
        "(M + 2) * N", lt_discrepancies_1dim__);
      current_statement__ = 182;
      AR_params_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 182;
      AR_params_1dim__ = ((M + 2) * N);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("AR_params", "(M + 2) * N",
        AR_params_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (M * N) + (M * N) + (M * ((N * (N - 1)) / 2)) + (M * N)
      + N + ((N * (N - 1)) / 2) + N + N + ((N * (N - 1)) / 2) + N + (N + ((N
      * (N - 1)) / 2)) + (N * N) + N;
  }
  inline std::string model_name() const final {
    return "model_ensemble_prior_hierarchical";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_ensemble_prior_hierarchical_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ind_st_ar_param =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 1;
      ind_st_ar_param = in__.template read_constrain_lub<
                          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                          jacobian__>(-1, 1, lp__, M, N);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> log_ind_st_var =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 2;
      log_ind_st_var = in__.template read<
                         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M,
                         N);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> ind_st_cor =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__));
      current_statement__ = 3;
      ind_st_cor = in__.template read_constrain_corr_matrix<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                     jacobian__>(lp__, M, N);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ind_lt_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 4;
      ind_lt_raw = in__.template read<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M, N);
      Eigen::Matrix<local_scalar_t__,-1,1> ind_lt_var =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 5;
      ind_lt_var = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, N);
      Eigen::Matrix<local_scalar_t__,-1,-1> ind_lt_cor =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 6;
      ind_lt_cor = in__.template read_constrain_corr_matrix<
                     Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                     N);
      Eigen::Matrix<local_scalar_t__,-1,1> sha_st_ar_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 7;
      sha_st_ar_param = in__.template read_constrain_lub<
                          Eigen::Matrix<local_scalar_t__,-1,1>,
                          jacobian__>(-1, 1, lp__, N);
      Eigen::Matrix<local_scalar_t__,-1,1> sha_st_var =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 8;
      sha_st_var = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, N);
      Eigen::Matrix<local_scalar_t__,-1,-1> sha_st_cor =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 9;
      sha_st_cor = in__.template read_constrain_corr_matrix<
                     Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                     N);
      Eigen::Matrix<local_scalar_t__,-1,1> sha_lt_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 10;
      sha_lt_raw = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,-1,-1> SIGMA_t =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 11;
      SIGMA_t = in__.template read_constrain_cov_matrix<
                  Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, N);
      Eigen::Matrix<local_scalar_t__,-1,-1>
        prior_ind_st_cor_hierarchical_beta_params =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 12;
      prior_ind_st_cor_hierarchical_beta_params = in__.template read_constrain_lb<
                                                    Eigen::Matrix<local_scalar_t__,-1,-1>,
                                                    jacobian__>(0, lp__, N,
                                                    N);
      Eigen::Matrix<local_scalar_t__,-1,1>
        prior_ind_st_var_hierarchical_mu_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 13;
      prior_ind_st_var_hierarchical_mu_params = in__.template read<
                                                  Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> SIGMA_x =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ind_st_sd =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,1> sha_lt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(sha_lt,
        stan::math::elt_multiply(prior_sha_lt_sd, sha_lt_raw),
        "assigning variable sha_lt");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ind_lt =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,1> ind_lt_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 18;
      stan::model::assign(ind_lt_sd, stan::math::sqrt(ind_lt_var),
        "assigning variable ind_lt_sd");
      Eigen::Matrix<local_scalar_t__,-1,-1> ind_lt_covar =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(ind_lt_covar,
        stan::math::diag_post_multiply(
          stan::math::diag_pre_multiply(ind_lt_sd, ind_lt_cor), ind_lt_sd),
        "assigning variable ind_lt_covar");
      Eigen::Matrix<local_scalar_t__,-1,-1> ind_lt_cov_cholesky =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 20;
      stan::model::assign(ind_lt_cov_cholesky,
        stan::math::cholesky_decompose(ind_lt_covar),
        "assigning variable ind_lt_cov_cholesky");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ind_st_var_2 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,1> x_hat =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(x_hat_1dim__,
          DUMMY_VAR__);
      current_statement__ = 22;
      stan::model::assign(x_hat,
        stan::math::append_row(prior_y_init_mean,
          stan::math::rep_vector(0.0, (N * (M + 1)))),
        "assigning variable x_hat");
      Eigen::Matrix<local_scalar_t__,-1,-1> SIGMA_init =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(SIGMA_init_1dim__,
          SIGMA_init_2dim__, DUMMY_VAR__);
      current_statement__ = 23;
      stan::model::assign(SIGMA_init,
        stan::math::rep_matrix(0, ((M + 2) * N), ((M + 2) * N)),
        "assigning variable SIGMA_init");
      Eigen::Matrix<local_scalar_t__,-1,1> sha_st_sd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 24;
      stan::model::assign(sha_st_sd, stan::math::sqrt(sha_st_var),
        "assigning variable sha_st_sd");
      Eigen::Matrix<local_scalar_t__,-1,-1> SIGMA_mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 25;
      stan::model::assign(SIGMA_mu,
        stan::math::diag_post_multiply(
          stan::math::diag_pre_multiply(sha_st_sd, sha_st_cor), sha_st_sd),
        "assigning variable SIGMA_mu");
      Eigen::Matrix<local_scalar_t__,-1,-1> SIGMA =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(SIGMA_1dim__,
          SIGMA_2dim__, DUMMY_VAR__);
      current_statement__ = 26;
      stan::model::assign(SIGMA,
        stan::math::rep_matrix(0, ((M + 2) * N), ((M + 2) * N)),
        "assigning variable SIGMA");
      Eigen::Matrix<local_scalar_t__,-1,1> lt_discrepancies =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lt_discrepancies_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> AR_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(AR_params_1dim__,
          DUMMY_VAR__);
      current_statement__ = 29;
      stan::model::assign(SIGMA, SIGMA_t, "assigning variable SIGMA",
        stan::model::index_min_max(1, N), stan::model::index_min_max(1, N));
      current_statement__ = 30;
      stan::model::assign(SIGMA, SIGMA_mu, "assigning variable SIGMA",
        stan::model::index_min_max((N + 1), (2 * N)),
        stan::model::index_min_max((N + 1), (2 * N)));
      current_statement__ = 36;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 31;
        stan::model::assign(ind_st_var_2,
          stan::math::exp(
            stan::math::add(prior_ind_st_var_hierarchical_mu_params,
              stan::math::elt_multiply(
                stan::math::sqrt(
                  stan::math::diagonal(
                    prior_ind_st_cor_hierarchical_beta_params)),
                stan::model::rvalue(log_ind_st_var, "log_ind_st_var",
                  stan::model::index_uni(i))))),
          "assigning variable ind_st_var_2", stan::model::index_uni(i));
        current_statement__ = 32;
        stan::model::assign(ind_st_sd,
          stan::math::sqrt(
            stan::model::rvalue(ind_st_var_2, "ind_st_var_2",
              stan::model::index_uni(i))), "assigning variable ind_st_sd",
          stan::model::index_uni(i));
        current_statement__ = 33;
        stan::model::assign(SIGMA_x,
          stan::math::diag_post_multiply(
            stan::math::diag_pre_multiply(
              stan::model::rvalue(ind_st_sd, "ind_st_sd",
                stan::model::index_uni(i)),
              stan::model::rvalue(ind_st_cor, "ind_st_cor",
                stan::model::index_uni(i))),
            stan::model::rvalue(ind_st_sd, "ind_st_sd",
              stan::model::index_uni(i))), "assigning variable SIGMA_x",
          stan::model::index_uni(i));
        current_statement__ = 34;
        stan::model::assign(SIGMA,
          stan::model::rvalue(SIGMA_x, "SIGMA_x", stan::model::index_uni(i)),
          "assigning variable SIGMA",
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)));
      }
      current_statement__ = 37;
      stan::model::assign(SIGMA_init,
        stan::math::diag_matrix(prior_y_init_var),
        "assigning variable SIGMA_init", stan::model::index_min_max(1, N),
        stan::model::index_min_max(1, N));
      current_statement__ = 38;
      stan::model::assign(SIGMA_init,
        stan::math::elt_divide(SIGMA_mu,
          stan::math::subtract(1,
            stan::math::multiply(sha_st_ar_param,
              stan::math::transpose(sha_st_ar_param)))),
        "assigning variable SIGMA_init",
        stan::model::index_min_max((N + 1), (2 * N)),
        stan::model::index_min_max((N + 1), (2 * N)));
      ;
      current_statement__ = 42;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 40;
        stan::model::assign(SIGMA_init,
          stan::math::elt_divide(
            stan::model::rvalue(SIGMA_x, "SIGMA_x", stan::model::index_uni(i)),
            stan::math::subtract(1,
              stan::math::multiply(
                stan::model::rvalue(ind_st_ar_param, "ind_st_ar_param",
                  stan::model::index_uni(i)),
                stan::math::transpose(
                  stan::model::rvalue(ind_st_ar_param, "ind_st_ar_param",
                    stan::model::index_uni(i)))))),
          "assigning variable SIGMA_init",
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)));
      }
      current_statement__ = 43;
      stan::model::assign(lt_discrepancies,
        stan::math::append_row(stan::math::rep_vector(0.0, N), sha_lt),
        "assigning variable lt_discrepancies",
        stan::model::index_min_max(1, (2 * N)));
      current_statement__ = 44;
      stan::model::assign(AR_params,
        stan::math::append_row(stan::math::rep_vector(1.0, N),
          sha_st_ar_param), "assigning variable AR_params",
        stan::model::index_min_max(1, (2 * N)));
      current_statement__ = 49;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 45;
        stan::model::assign(ind_lt,
          stan::math::multiply(ind_lt_cov_cholesky,
            stan::model::rvalue(ind_lt_raw, "ind_lt_raw",
              stan::model::index_uni(i))), "assigning variable ind_lt",
          stan::model::index_uni(i));
        current_statement__ = 46;
        stan::model::assign(lt_discrepancies,
          stan::model::rvalue(ind_lt, "ind_lt", stan::model::index_uni(i)),
          "assigning variable lt_discrepancies",
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)));
        current_statement__ = 47;
        stan::model::assign(AR_params,
          stan::model::rvalue(ind_st_ar_param, "ind_st_ar_param",
            stan::model::index_uni(i)), "assigning variable AR_params",
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)));
      }
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "ind_st_var_2",
        ind_st_var_2, 0);
      {
        current_statement__ = 50;
        lp_accum__.add(stan::math::inv_wishart_lpdf<propto__>(SIGMA_t,
                         prior_sigma_t_inv_wish_nu,
                         prior_sigma_t_inv_wish_sigma));
        current_statement__ = 51;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(sha_lt_raw));
        current_statement__ = 52;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(sha_st_var,
                         prior_sha_st_var_a, prior_sha_st_var_b));
        current_statement__ = 53;
        lp_accum__.add(stan::math::beta_lpdf<false>(
                         stan::math::divide(
                           stan::math::add(sha_st_ar_param, 1), 2),
                         prior_sha_st_ar_alpha, prior_sha_st_ar_beta));
        current_statement__ = 61;
        if (stan::math::logical_eq(form_prior_sha_st, 0)) {
          current_statement__ = 59;
          lp_accum__.add(stan::math::lkj_corr_lpdf<propto__>(sha_st_cor,
                           stan::model::rvalue(prior_sha_st_cor_lkj,
                             "prior_sha_st_cor_lkj",
                             stan::model::index_uni(1))));
        } else {
          current_statement__ = 58;
          if (stan::math::logical_eq(form_prior_sha_st, 1)) {
            current_statement__ = 56;
            lp_accum__.add(stan::math::inv_wishart_lpdf<propto__>(sha_st_cor,
                             stan::model::rvalue(prior_sha_st_cor_wish_nu,
                               "prior_sha_st_cor_wish_nu",
                               stan::model::index_uni(1)),
                             prior_sha_st_cor_wish_sigma));
          } else {
            current_statement__ = 54;
            lp_accum__.add(priors_cor_beta(sha_st_cor, N,
                             prior_sha_st_cor_beta_1,
                             prior_sha_st_cor_beta_2, pstream__));
          }
        }
        current_statement__ = 62;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(ind_lt_var,
                         prior_ind_lt_var_a, prior_ind_lt_var_b));
        current_statement__ = 70;
        if (stan::math::logical_eq(form_prior_ind_lt, 0)) {
          current_statement__ = 68;
          lp_accum__.add(stan::math::lkj_corr_lpdf<propto__>(ind_lt_cor,
                           stan::model::rvalue(prior_ind_lt_cor_lkj,
                             "prior_ind_lt_cor_lkj",
                             stan::model::index_uni(1))));
        } else {
          current_statement__ = 67;
          if (stan::math::logical_eq(form_prior_ind_lt, 1)) {
            current_statement__ = 65;
            lp_accum__.add(stan::math::inv_wishart_lpdf<propto__>(ind_lt_cor,
                             stan::model::rvalue(prior_ind_lt_cor_wish_nu,
                               "prior_ind_lt_cor_wish_nu",
                               stan::model::index_uni(1)),
                             prior_ind_lt_cor_wish_sigma));
          } else {
            current_statement__ = 63;
            lp_accum__.add(priors_cor_beta(ind_lt_cor, N,
                             prior_ind_lt_cor_beta_1,
                             prior_ind_lt_cor_beta_2, pstream__));
          }
        }
        current_statement__ = 71;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         prior_ind_st_var_hierarchical_mu_params,
                         stan::model::rvalue(
                           prior_ind_st_var_hierarchical_hyperparams,
                           "prior_ind_st_var_hierarchical_hyperparams",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(
                           prior_ind_st_var_hierarchical_hyperparams,
                           "prior_ind_st_var_hierarchical_hyperparams",
                           stan::model::index_uni(2))));
        current_statement__ = 72;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                         stan::math::diagonal(
                           prior_ind_st_cor_hierarchical_beta_params),
                         stan::model::rvalue(
                           prior_ind_st_var_hierarchical_hyperparams,
                           "prior_ind_st_var_hierarchical_hyperparams",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(
                           prior_ind_st_var_hierarchical_hyperparams,
                           "prior_ind_st_var_hierarchical_hyperparams",
                           stan::model::index_uni(4))));
        current_statement__ = 78;
        for (int k = 1; k <= (N - 1); ++k) {
          current_statement__ = 76;
          for (int l = (k + 1); l <= N; ++l) {
            current_statement__ = 73;
            lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                             stan::model::rvalue(
                               prior_ind_st_cor_hierarchical_beta_params,
                               "prior_ind_st_cor_hierarchical_beta_params",
                               stan::model::index_uni(k),
                               stan::model::index_uni(l)),
                             stan::model::rvalue(
                               prior_ind_st_cor_hierarchical_beta_hyper_params,
                               "prior_ind_st_cor_hierarchical_beta_hyper_params",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(
                               prior_ind_st_cor_hierarchical_beta_hyper_params,
                               "prior_ind_st_cor_hierarchical_beta_hyper_params",
                               stan::model::index_uni(2))));
            current_statement__ = 74;
            lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                             stan::model::rvalue(
                               prior_ind_st_cor_hierarchical_beta_params,
                               "prior_ind_st_cor_hierarchical_beta_params",
                               stan::model::index_uni(l),
                               stan::model::index_uni(k)),
                             stan::model::rvalue(
                               prior_ind_st_cor_hierarchical_beta_hyper_params,
                               "prior_ind_st_cor_hierarchical_beta_hyper_params",
                               stan::model::index_uni(3)),
                             stan::model::rvalue(
                               prior_ind_st_cor_hierarchical_beta_hyper_params,
                               "prior_ind_st_cor_hierarchical_beta_hyper_params",
                               stan::model::index_uni(4))));
          }
        }
        current_statement__ = 84;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 79;
          lp_accum__.add(stan::math::beta_lpdf<false>(
                           stan::math::divide(
                             stan::math::add(
                               stan::model::rvalue(ind_st_ar_param,
                                 "ind_st_ar_param", stan::model::index_uni(i)),
                               1), 2), prior_ind_st_ar_alpha,
                           prior_ind_st_ar_beta));
          current_statement__ = 80;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(ind_lt_raw, "ind_lt_raw",
                             stan::model::index_uni(i))));
          current_statement__ = 81;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(log_ind_st_var,
                             "log_ind_st_var", stan::model::index_uni(i))));
          current_statement__ = 82;
          lp_accum__.add(priors_cor_hierarchical_beta(
                           stan::model::rvalue(ind_st_cor, "ind_st_cor",
                             stan::model::index_uni(i)), N,
                           prior_ind_st_cor_hierarchical_beta_params,
                           pstream__));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ensemble_prior_hierarchical_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,-1,1>> ind_st_ar_param =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      ind_st_ar_param = in__.template read_constrain_lub<
                          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
                          jacobian__>(-1, 1, lp__, M, N);
      std::vector<Eigen::Matrix<double,-1,1>> log_ind_st_var =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      log_ind_st_var = in__.template read<
                         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M,
                         N);
      std::vector<Eigen::Matrix<double,-1,-1>> ind_st_cor =
        std::vector<Eigen::Matrix<double,-1,-1>>(M,
          Eigen::Matrix<double,-1,-1>::Constant(N, N,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      ind_st_cor = in__.template read_constrain_corr_matrix<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                     jacobian__>(lp__, M, N);
      std::vector<Eigen::Matrix<double,-1,1>> ind_lt_raw =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 4;
      ind_lt_raw = in__.template read<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M, N);
      Eigen::Matrix<double,-1,1> ind_lt_var =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      ind_lt_var = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, N);
      Eigen::Matrix<double,-1,-1> ind_lt_cor =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      ind_lt_cor = in__.template read_constrain_corr_matrix<
                     Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                     N);
      Eigen::Matrix<double,-1,1> sha_st_ar_param =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      sha_st_ar_param = in__.template read_constrain_lub<
                          Eigen::Matrix<local_scalar_t__,-1,1>,
                          jacobian__>(-1, 1, lp__, N);
      Eigen::Matrix<double,-1,1> sha_st_var =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      sha_st_var = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, N);
      Eigen::Matrix<double,-1,-1> sha_st_cor =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      sha_st_cor = in__.template read_constrain_corr_matrix<
                     Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                     N);
      Eigen::Matrix<double,-1,1> sha_lt_raw =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      sha_lt_raw = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,-1,-1> SIGMA_t =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      SIGMA_t = in__.template read_constrain_cov_matrix<
                  Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, N);
      Eigen::Matrix<double,-1,-1> prior_ind_st_cor_hierarchical_beta_params =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      prior_ind_st_cor_hierarchical_beta_params = in__.template read_constrain_lb<
                                                    Eigen::Matrix<local_scalar_t__,-1,-1>,
                                                    jacobian__>(0, lp__, N,
                                                    N);
      Eigen::Matrix<double,-1,1> prior_ind_st_var_hierarchical_mu_params =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      prior_ind_st_var_hierarchical_mu_params = in__.template read<
                                                  Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      std::vector<Eigen::Matrix<double,-1,-1>> SIGMA_x =
        std::vector<Eigen::Matrix<double,-1,-1>>(M,
          Eigen::Matrix<double,-1,-1>::Constant(N, N,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> ind_st_sd =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> sha_lt =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> ind_lt =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> ind_lt_sd =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> ind_lt_covar =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> ind_lt_cov_cholesky =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> ind_st_var_2 =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> x_hat =
        Eigen::Matrix<double,-1,1>::Constant(x_hat_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> SIGMA_init =
        Eigen::Matrix<double,-1,-1>::Constant(SIGMA_init_1dim__,
          SIGMA_init_2dim__, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sha_st_sd =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> SIGMA_mu =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> SIGMA =
        Eigen::Matrix<double,-1,-1>::Constant(SIGMA_1dim__, SIGMA_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lt_discrepancies =
        Eigen::Matrix<double,-1,1>::Constant(lt_discrepancies_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> AR_params =
        Eigen::Matrix<double,-1,1>::Constant(AR_params_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(ind_st_ar_param[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(log_ind_st_var[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            out__.write(stan::model::rvalue(ind_st_cor, "ind_st_cor",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(ind_lt_raw[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(ind_lt_var);
      out__.write(ind_lt_cor);
      out__.write(sha_st_ar_param);
      out__.write(sha_st_var);
      out__.write(sha_st_cor);
      out__.write(sha_lt_raw);
      out__.write(SIGMA_t);
      out__.write(prior_ind_st_cor_hierarchical_beta_params);
      out__.write(prior_ind_st_var_hierarchical_mu_params);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 16;
      stan::model::assign(sha_lt,
        stan::math::elt_multiply(prior_sha_lt_sd, sha_lt_raw),
        "assigning variable sha_lt");
      current_statement__ = 18;
      stan::model::assign(ind_lt_sd, stan::math::sqrt(ind_lt_var),
        "assigning variable ind_lt_sd");
      current_statement__ = 19;
      stan::model::assign(ind_lt_covar,
        stan::math::diag_post_multiply(
          stan::math::diag_pre_multiply(ind_lt_sd, ind_lt_cor), ind_lt_sd),
        "assigning variable ind_lt_covar");
      current_statement__ = 20;
      stan::model::assign(ind_lt_cov_cholesky,
        stan::math::cholesky_decompose(ind_lt_covar),
        "assigning variable ind_lt_cov_cholesky");
      current_statement__ = 22;
      stan::model::assign(x_hat,
        stan::math::append_row(prior_y_init_mean,
          stan::math::rep_vector(0.0, (N * (M + 1)))),
        "assigning variable x_hat");
      current_statement__ = 23;
      stan::model::assign(SIGMA_init,
        stan::math::rep_matrix(0, ((M + 2) * N), ((M + 2) * N)),
        "assigning variable SIGMA_init");
      current_statement__ = 24;
      stan::model::assign(sha_st_sd, stan::math::sqrt(sha_st_var),
        "assigning variable sha_st_sd");
      current_statement__ = 25;
      stan::model::assign(SIGMA_mu,
        stan::math::diag_post_multiply(
          stan::math::diag_pre_multiply(sha_st_sd, sha_st_cor), sha_st_sd),
        "assigning variable SIGMA_mu");
      current_statement__ = 26;
      stan::model::assign(SIGMA,
        stan::math::rep_matrix(0, ((M + 2) * N), ((M + 2) * N)),
        "assigning variable SIGMA");
      current_statement__ = 29;
      stan::model::assign(SIGMA, SIGMA_t, "assigning variable SIGMA",
        stan::model::index_min_max(1, N), stan::model::index_min_max(1, N));
      current_statement__ = 30;
      stan::model::assign(SIGMA, SIGMA_mu, "assigning variable SIGMA",
        stan::model::index_min_max((N + 1), (2 * N)),
        stan::model::index_min_max((N + 1), (2 * N)));
      current_statement__ = 36;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 31;
        stan::model::assign(ind_st_var_2,
          stan::math::exp(
            stan::math::add(prior_ind_st_var_hierarchical_mu_params,
              stan::math::elt_multiply(
                stan::math::sqrt(
                  stan::math::diagonal(
                    prior_ind_st_cor_hierarchical_beta_params)),
                stan::model::rvalue(log_ind_st_var, "log_ind_st_var",
                  stan::model::index_uni(i))))),
          "assigning variable ind_st_var_2", stan::model::index_uni(i));
        current_statement__ = 32;
        stan::model::assign(ind_st_sd,
          stan::math::sqrt(
            stan::model::rvalue(ind_st_var_2, "ind_st_var_2",
              stan::model::index_uni(i))), "assigning variable ind_st_sd",
          stan::model::index_uni(i));
        current_statement__ = 33;
        stan::model::assign(SIGMA_x,
          stan::math::diag_post_multiply(
            stan::math::diag_pre_multiply(
              stan::model::rvalue(ind_st_sd, "ind_st_sd",
                stan::model::index_uni(i)),
              stan::model::rvalue(ind_st_cor, "ind_st_cor",
                stan::model::index_uni(i))),
            stan::model::rvalue(ind_st_sd, "ind_st_sd",
              stan::model::index_uni(i))), "assigning variable SIGMA_x",
          stan::model::index_uni(i));
        current_statement__ = 34;
        stan::model::assign(SIGMA,
          stan::model::rvalue(SIGMA_x, "SIGMA_x", stan::model::index_uni(i)),
          "assigning variable SIGMA",
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)));
      }
      current_statement__ = 37;
      stan::model::assign(SIGMA_init,
        stan::math::diag_matrix(prior_y_init_var),
        "assigning variable SIGMA_init", stan::model::index_min_max(1, N),
        stan::model::index_min_max(1, N));
      current_statement__ = 38;
      stan::model::assign(SIGMA_init,
        stan::math::elt_divide(SIGMA_mu,
          stan::math::subtract(1,
            stan::math::multiply(sha_st_ar_param,
              stan::math::transpose(sha_st_ar_param)))),
        "assigning variable SIGMA_init",
        stan::model::index_min_max((N + 1), (2 * N)),
        stan::model::index_min_max((N + 1), (2 * N)));
      ;
      current_statement__ = 42;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 40;
        stan::model::assign(SIGMA_init,
          stan::math::elt_divide(
            stan::model::rvalue(SIGMA_x, "SIGMA_x", stan::model::index_uni(i)),
            stan::math::subtract(1,
              stan::math::multiply(
                stan::model::rvalue(ind_st_ar_param, "ind_st_ar_param",
                  stan::model::index_uni(i)),
                stan::math::transpose(
                  stan::model::rvalue(ind_st_ar_param, "ind_st_ar_param",
                    stan::model::index_uni(i)))))),
          "assigning variable SIGMA_init",
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)));
      }
      current_statement__ = 43;
      stan::model::assign(lt_discrepancies,
        stan::math::append_row(stan::math::rep_vector(0.0, N), sha_lt),
        "assigning variable lt_discrepancies",
        stan::model::index_min_max(1, (2 * N)));
      current_statement__ = 44;
      stan::model::assign(AR_params,
        stan::math::append_row(stan::math::rep_vector(1.0, N),
          sha_st_ar_param), "assigning variable AR_params",
        stan::model::index_min_max(1, (2 * N)));
      current_statement__ = 49;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 45;
        stan::model::assign(ind_lt,
          stan::math::multiply(ind_lt_cov_cholesky,
            stan::model::rvalue(ind_lt_raw, "ind_lt_raw",
              stan::model::index_uni(i))), "assigning variable ind_lt",
          stan::model::index_uni(i));
        current_statement__ = 46;
        stan::model::assign(lt_discrepancies,
          stan::model::rvalue(ind_lt, "ind_lt", stan::model::index_uni(i)),
          "assigning variable lt_discrepancies",
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)));
        current_statement__ = 47;
        stan::model::assign(AR_params,
          stan::model::rvalue(ind_st_ar_param, "ind_st_ar_param",
            stan::model::index_uni(i)), "assigning variable AR_params",
          stan::model::index_min_max((((i + 1) * N) + 1), ((i + 2) * N)));
      }
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "ind_st_var_2",
        ind_st_var_2, 0);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              out__.write(stan::model::rvalue(SIGMA_x, "SIGMA_x",
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(ind_st_sd[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(sha_lt);
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(ind_lt[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(ind_lt_sd);
        out__.write(ind_lt_covar);
        out__.write(ind_lt_cov_cholesky);
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(ind_st_var_2[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(x_hat);
        out__.write(SIGMA_init);
        out__.write(sha_st_sd);
        out__.write(SIGMA_mu);
        out__.write(SIGMA);
        out__.write(lt_discrepancies);
        out__.write(AR_params);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ind_st_ar_param =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 1;
          stan::model::assign(ind_st_ar_param, in__.read<local_scalar_t__>(),
            "assigning variable ind_st_ar_param",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lub(-1, 1, ind_st_ar_param);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> log_ind_st_var =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 2;
          stan::model::assign(log_ind_st_var, in__.read<local_scalar_t__>(),
            "assigning variable log_ind_st_var",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write(log_ind_st_var);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> ind_st_cor =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 3;
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            current_statement__ = 3;
            stan::model::assign(ind_st_cor, in__.read<local_scalar_t__>(),
              "assigning variable ind_st_cor",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_corr_matrix(ind_st_cor);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ind_lt_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 4;
          stan::model::assign(ind_lt_raw, in__.read<local_scalar_t__>(),
            "assigning variable ind_lt_raw", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(ind_lt_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> ind_lt_var =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(ind_lt_var,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable ind_lt_var");
      out__.write_free_lb(0, ind_lt_var);
      Eigen::Matrix<local_scalar_t__,-1,-1> ind_lt_cor =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(ind_lt_cor,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N),
        "assigning variable ind_lt_cor");
      out__.write_free_corr_matrix(ind_lt_cor);
      Eigen::Matrix<local_scalar_t__,-1,1> sha_st_ar_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(sha_st_ar_param,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable sha_st_ar_param");
      out__.write_free_lub(-1, 1, sha_st_ar_param);
      Eigen::Matrix<local_scalar_t__,-1,1> sha_st_var =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(sha_st_var,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable sha_st_var");
      out__.write_free_lb(0, sha_st_var);
      Eigen::Matrix<local_scalar_t__,-1,-1> sha_st_cor =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(sha_st_cor,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N),
        "assigning variable sha_st_cor");
      out__.write_free_corr_matrix(sha_st_cor);
      Eigen::Matrix<local_scalar_t__,-1,1> sha_lt_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(sha_lt_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable sha_lt_raw");
      out__.write(sha_lt_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> SIGMA_t =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(SIGMA_t,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N),
        "assigning variable SIGMA_t");
      out__.write_free_cov_matrix(SIGMA_t);
      Eigen::Matrix<local_scalar_t__,-1,-1>
        prior_ind_st_cor_hierarchical_beta_params =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(prior_ind_st_cor_hierarchical_beta_params,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N),
        "assigning variable prior_ind_st_cor_hierarchical_beta_params");
      out__.write_free_lb(0, prior_ind_st_cor_hierarchical_beta_params);
      Eigen::Matrix<local_scalar_t__,-1,1>
        prior_ind_st_var_hierarchical_mu_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(prior_ind_st_var_hierarchical_mu_params,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable prior_ind_st_var_hierarchical_mu_params");
      out__.write(prior_ind_st_var_hierarchical_mu_params);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "ind_st_ar_param",
        "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(N)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "log_ind_st_var",
        "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(N)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "ind_st_cor",
        "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(N),
          static_cast<size_t>(N)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "ind_lt_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(N)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "ind_lt_var",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "ind_lt_cor",
        "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sha_st_ar_param",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sha_st_var",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "sha_st_cor",
        "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "sha_lt_raw",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "SIGMA_t",
        "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization",
        "prior_ind_st_cor_hierarchical_beta_params", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization",
        "prior_ind_st_var_hierarchical_mu_params", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ind_st_ar_param =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> ind_st_ar_param_flat__;
        current_statement__ = 1;
        ind_st_ar_param_flat__ = context__.vals_r("ind_st_ar_param");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(ind_st_ar_param,
              ind_st_ar_param_flat__[(pos__ - 1)],
              "assigning variable ind_st_ar_param",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lub(-1, 1, ind_st_ar_param);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> log_ind_st_var =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> log_ind_st_var_flat__;
        current_statement__ = 2;
        log_ind_st_var_flat__ = context__.vals_r("log_ind_st_var");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(log_ind_st_var, log_ind_st_var_flat__[(pos__
              - 1)], "assigning variable log_ind_st_var",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(log_ind_st_var);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> ind_st_cor =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> ind_st_cor_flat__;
        current_statement__ = 3;
        ind_st_cor_flat__ = context__.vals_r("ind_st_cor");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 3;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 3;
              stan::model::assign(ind_st_cor, ind_st_cor_flat__[(pos__ - 1)],
                "assigning variable ind_st_cor",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 3;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_corr_matrix(ind_st_cor);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> ind_lt_raw =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> ind_lt_raw_flat__;
        current_statement__ = 4;
        ind_lt_raw_flat__ = context__.vals_r("ind_lt_raw");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 4;
            stan::model::assign(ind_lt_raw, ind_lt_raw_flat__[(pos__ - 1)],
              "assigning variable ind_lt_raw",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(ind_lt_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> ind_lt_var =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> ind_lt_var_flat__;
        current_statement__ = 5;
        ind_lt_var_flat__ = context__.vals_r("ind_lt_var");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(ind_lt_var, ind_lt_var_flat__[(pos__ - 1)],
            "assigning variable ind_lt_var", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, ind_lt_var);
      Eigen::Matrix<local_scalar_t__,-1,-1> ind_lt_cor =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> ind_lt_cor_flat__;
        current_statement__ = 6;
        ind_lt_cor_flat__ = context__.vals_r("ind_lt_cor");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(ind_lt_cor, ind_lt_cor_flat__[(pos__ - 1)],
              "assigning variable ind_lt_cor",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_corr_matrix(ind_lt_cor);
      Eigen::Matrix<local_scalar_t__,-1,1> sha_st_ar_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sha_st_ar_param_flat__;
        current_statement__ = 7;
        sha_st_ar_param_flat__ = context__.vals_r("sha_st_ar_param");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(sha_st_ar_param, sha_st_ar_param_flat__[(pos__
            - 1)], "assigning variable sha_st_ar_param",
            stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, sha_st_ar_param);
      Eigen::Matrix<local_scalar_t__,-1,1> sha_st_var =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sha_st_var_flat__;
        current_statement__ = 8;
        sha_st_var_flat__ = context__.vals_r("sha_st_var");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(sha_st_var, sha_st_var_flat__[(pos__ - 1)],
            "assigning variable sha_st_var", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sha_st_var);
      Eigen::Matrix<local_scalar_t__,-1,-1> sha_st_cor =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sha_st_cor_flat__;
        current_statement__ = 9;
        sha_st_cor_flat__ = context__.vals_r("sha_st_cor");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 9;
            stan::model::assign(sha_st_cor, sha_st_cor_flat__[(pos__ - 1)],
              "assigning variable sha_st_cor",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 9;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_corr_matrix(sha_st_cor);
      Eigen::Matrix<local_scalar_t__,-1,1> sha_lt_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sha_lt_raw_flat__;
        current_statement__ = 10;
        sha_lt_raw_flat__ = context__.vals_r("sha_lt_raw");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(sha_lt_raw, sha_lt_raw_flat__[(pos__ - 1)],
            "assigning variable sha_lt_raw", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(sha_lt_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> SIGMA_t =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> SIGMA_t_flat__;
        current_statement__ = 11;
        SIGMA_t_flat__ = context__.vals_r("SIGMA_t");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 11;
            stan::model::assign(SIGMA_t, SIGMA_t_flat__[(pos__ - 1)],
              "assigning variable SIGMA_t", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 11;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cov_matrix(SIGMA_t);
      Eigen::Matrix<local_scalar_t__,-1,-1>
        prior_ind_st_cor_hierarchical_beta_params =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__>
          prior_ind_st_cor_hierarchical_beta_params_flat__;
        current_statement__ = 12;
        prior_ind_st_cor_hierarchical_beta_params_flat__ = context__.vals_r("prior_ind_st_cor_hierarchical_beta_params");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 12;
            stan::model::assign(prior_ind_st_cor_hierarchical_beta_params,
              prior_ind_st_cor_hierarchical_beta_params_flat__[(pos__ - 1)],
              "assigning variable prior_ind_st_cor_hierarchical_beta_params",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 12;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, prior_ind_st_cor_hierarchical_beta_params);
      Eigen::Matrix<local_scalar_t__,-1,1>
        prior_ind_st_var_hierarchical_mu_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__>
          prior_ind_st_var_hierarchical_mu_params_flat__;
        current_statement__ = 13;
        prior_ind_st_var_hierarchical_mu_params_flat__ = context__.vals_r("prior_ind_st_var_hierarchical_mu_params");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 13;
          stan::model::assign(prior_ind_st_var_hierarchical_mu_params,
            prior_ind_st_var_hierarchical_mu_params_flat__[(pos__ - 1)],
            "assigning variable prior_ind_st_var_hierarchical_mu_params",
            stan::model::index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(prior_ind_st_var_hierarchical_mu_params);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"ind_st_ar_param", "log_ind_st_var",
                "ind_st_cor", "ind_lt_raw", "ind_lt_var", "ind_lt_cor",
                "sha_st_ar_param", "sha_st_var", "sha_st_cor", "sha_lt_raw",
                "SIGMA_t", "prior_ind_st_cor_hierarchical_beta_params",
                "prior_ind_st_var_hierarchical_mu_params"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"SIGMA_x", "ind_st_sd", "sha_lt", "ind_lt", "ind_lt_sd",
             "ind_lt_covar", "ind_lt_cov_cholesky", "ind_st_var_2", "x_hat",
             "SIGMA_init", "sha_st_sd", "SIGMA_mu", "SIGMA",
             "lt_discrepancies", "AR_params"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(M),
                                                 static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(M),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(M),
                  static_cast<size_t>(N), static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(M),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(N), static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(x_hat_1dim__)},
             std::vector<size_t>{static_cast<size_t>(SIGMA_init_1dim__),
               static_cast<size_t>(SIGMA_init_2dim__)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(SIGMA_1dim__),
               static_cast<size_t>(SIGMA_2dim__)},
             std::vector<size_t>{static_cast<size_t>(lt_discrepancies_1dim__)},
             std::vector<size_t>{static_cast<size_t>(AR_params_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "ind_st_ar_param" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "log_ind_st_var" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
          param_names__.emplace_back(std::string() + "ind_st_cor" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "ind_lt_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "ind_lt_var" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "ind_lt_cor" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "sha_st_ar_param" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "sha_st_var" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "sha_st_cor" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "sha_lt_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "SIGMA_t" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "prior_ind_st_cor_hierarchical_beta_params" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() +
        "prior_ind_st_var_hierarchical_mu_params" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "SIGMA_x" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_st_sd" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sha_lt" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_lt" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "ind_lt_sd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_lt_covar" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_lt_cov_cholesky" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_st_var_2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= x_hat_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= SIGMA_init_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= SIGMA_init_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "SIGMA_init" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sha_st_sd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "SIGMA_mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= SIGMA_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= SIGMA_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "SIGMA" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= lt_discrepancies_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "lt_discrepancies" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= AR_params_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "AR_params" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "ind_st_ar_param" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "log_ind_st_var" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "ind_st_cor" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "ind_lt_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "ind_lt_var" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "ind_lt_cor" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "sha_st_ar_param" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "sha_st_var" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "sha_st_cor" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "sha_lt_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (N + ((N * (N - 1)) / 2)); ++sym1__) {
      param_names__.emplace_back(std::string() + "SIGMA_t" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "prior_ind_st_cor_hierarchical_beta_params" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() +
        "prior_ind_st_var_hierarchical_mu_params" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "SIGMA_x" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_st_sd" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sha_lt" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_lt" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "ind_lt_sd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_lt_covar" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_lt_cov_cholesky" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "ind_st_var_2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= x_hat_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "x_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= SIGMA_init_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= SIGMA_init_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "SIGMA_init" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sha_st_sd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "SIGMA_mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= SIGMA_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= SIGMA_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "SIGMA" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= lt_discrepancies_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "lt_discrepancies" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= AR_params_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "AR_params" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"ind_st_ar_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"log_ind_st_var\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"ind_st_cor\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"ind_lt_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"ind_lt_var\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"ind_lt_cor\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sha_st_ar_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sha_st_var\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sha_st_cor\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sha_lt_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"SIGMA_t\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"prior_ind_st_cor_hierarchical_beta_params\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"prior_ind_st_var_hierarchical_mu_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"SIGMA_x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"ind_st_sd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sha_lt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_covar\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_cov_cholesky\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_st_var_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"x_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(x_hat_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA_init\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(SIGMA_init_1dim__) + ",\"cols\":" + std::to_string(SIGMA_init_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sha_st_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA_mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(SIGMA_1dim__) + ",\"cols\":" + std::to_string(SIGMA_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lt_discrepancies\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lt_discrepancies_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"AR_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(AR_params_1dim__) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"ind_st_ar_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"log_ind_st_var\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"ind_st_cor\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((N * (N - 1)) /2)) + "}},\"block\":\"parameters\"},{\"name\":\"ind_lt_raw\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"ind_lt_var\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"ind_lt_cor\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((N * (N - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"sha_st_ar_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sha_st_var\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sha_st_cor\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((N * (N - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"sha_lt_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"SIGMA_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((N + ((N * (N - 1)) /2))) + "},\"block\":\"parameters\"},{\"name\":\"prior_ind_st_cor_hierarchical_beta_params\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"prior_ind_st_var_hierarchical_mu_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"SIGMA_x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"ind_st_sd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sha_lt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_covar\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_cov_cholesky\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_st_var_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"x_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(x_hat_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA_init\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(SIGMA_init_1dim__) + ",\"cols\":" + std::to_string(SIGMA_init_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sha_st_sd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA_mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(SIGMA_1dim__) + ",\"cols\":" + std::to_string(SIGMA_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lt_discrepancies\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lt_discrepancies_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"AR_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(AR_params_1dim__) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((M * N) + (M * N)) + ((M * N) *
      N)) + (M * N)) + N) + (N * N)) + N) + N) + (N * N)) + N) + (N * N)) +
      (N * N)) + N);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((((((M * N) * N) + (M * N)) + N) + (M * N)) + N) + (N * N))
      + (N * N)) + (M * N)) + x_hat_1dim__) + (SIGMA_init_1dim__ *
      SIGMA_init_2dim__)) + N) + (N * N)) + (SIGMA_1dim__ * SIGMA_2dim__)) +
      lt_discrepancies_1dim__) + AR_params_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((M * N) + (M * N)) + ((M * N) *
      N)) + (M * N)) + N) + (N * N)) + N) + N) + (N * N)) + N) + (N * N)) +
      (N * N)) + N);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((((((M * N) * N) + (M * N)) + N) + (M * N)) + N) + (N * N))
      + (N * N)) + (M * N)) + x_hat_1dim__) + (SIGMA_init_1dim__ *
      SIGMA_init_2dim__)) + N) + (N * N)) + (SIGMA_1dim__ * SIGMA_2dim__)) +
      lt_discrepancies_1dim__) + AR_params_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ensemble_prior_hierarchical_namespace::model_ensemble_prior_hierarchical;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ensemble_prior_hierarchical_namespace::profiles__;
}
#endif
#endif
