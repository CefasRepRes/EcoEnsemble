// Generated by rstantools.  Do not edit by hand.

/*
    EcoEnsemble is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EcoEnsemble is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EcoEnsemble.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_ensemble_prior_hierarchical_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 116, column 2 to column 56)",
                                                      " (in 'string', line 117, column 2 to column 37)",
                                                      " (in 'string', line 118, column 2 to column 38)",
                                                      " (in 'string', line 119, column 2 to column 32)",
                                                      " (in 'string', line 120, column 2 to column 34)",
                                                      " (in 'string', line 121, column 2 to column 29)",
                                                      " (in 'string', line 123, column 2 to column 47)",
                                                      " (in 'string', line 124, column 2 to column 34)",
                                                      " (in 'string', line 125, column 2 to column 29)",
                                                      " (in 'string', line 126, column 2 to column 24)",
                                                      " (in 'string', line 130, column 2 to column 25)",
                                                      " (in 'string', line 139, column 4 to column 72)",
                                                      " (in 'string', line 140, column 4 to column 56)",
                                                      " (in 'string', line 143, column 2 to column 32)",
                                                      " (in 'string', line 144, column 2 to column 32)",
                                                      " (in 'string', line 145, column 2 to column 52)",
                                                      " (in 'string', line 146, column 2 to column 29)",
                                                      " (in 'string', line 147, column 2 to column 42)",
                                                      " (in 'string', line 148, column 2 to column 100)",
                                                      " (in 'string', line 149, column 2 to column 70)",
                                                      " (in 'string', line 151, column 2 to column 44)",
                                                      " (in 'string', line 152, column 2 to column 87)",
                                                      " (in 'string', line 153, column 2 to column 79)",
                                                      " (in 'string', line 155, column 2 to column 42)",
                                                      " (in 'string', line 156, column 2 to column 98)",
                                                      " (in 'string', line 164, column 2 to column 75)",
                                                      " (in 'string', line 165, column 2 to column 38)",
                                                      " (in 'string', line 166, column 2 to column 30)",
                                                      " (in 'string', line 168, column 2 to column 29)",
                                                      " (in 'string', line 169, column 2 to column 50)",
                                                      " (in 'string', line 171, column 3 to column 147)",
                                                      " (in 'string', line 172, column 4 to column 41)",
                                                      " (in 'string', line 173, column 4 to column 96)",
                                                      " (in 'string', line 174, column 3 to column 79)",
                                                      " (in 'string', line 170, column 16 to line 175, column 3)",
                                                      " (in 'string', line 170, column 2 to line 175, column 3)",
                                                      " (in 'string', line 177, column 2 to column 54)",
                                                      " (in 'string', line 178, column 2 to column 99)",
                                                      " (in 'string', line 178, column 99 to column 100)",
                                                      " (in 'string', line 180, column 4 to column 133)",
                                                      " (in 'string', line 179, column 16 to line 181, column 3)",
                                                      " (in 'string', line 179, column 2 to line 181, column 3)",
                                                      " (in 'string', line 182, column 2 to column 70)",
                                                      " (in 'string', line 183, column 2 to column 72)",
                                                      " (in 'string', line 185, column 4 to column 50)",
                                                      " (in 'string', line 186, column 4 to column 61)",
                                                      " (in 'string', line 187, column 3 to column 62)",
                                                      " (in 'string', line 184, column 16 to line 188, column 3)",
                                                      " (in 'string', line 184, column 2 to line 188, column 3)",
                                                      " (in 'string', line 195, column 2 to column 81)",
                                                      " (in 'string', line 197, column 2 to column 28)",
                                                      " (in 'string', line 198, column 2 to column 60)",
                                                      " (in 'string', line 200, column 2 to column 93)",
                                                      " (in 'string', line 207, column 4 to column 95)",
                                                      " (in 'string', line 206, column 9 to line 208, column 3)",
                                                      " (in 'string', line 205, column 4 to column 87)",
                                                      " (in 'string', line 204, column 35 to line 206, column 3)",
                                                      " (in 'string', line 204, column 9 to line 208, column 3)",
                                                      " (in 'string', line 203, column 4 to column 51)",
                                                      " (in 'string', line 202, column 28 to line 204, column 3)",
                                                      " (in 'string', line 202, column 2 to line 208, column 3)",
                                                      " (in 'string', line 212, column 2 to column 60)",
                                                      " (in 'string', line 219, column 4 to column 95)",
                                                      " (in 'string', line 218, column 8 to line 220, column 3)",
                                                      " (in 'string', line 217, column 4 to column 87)",
                                                      " (in 'string', line 216, column 35 to line 218, column 3)",
                                                      " (in 'string', line 216, column 9 to line 220, column 3)",
                                                      " (in 'string', line 215, column 4 to column 51)",
                                                      " (in 'string', line 214, column 28 to line 216, column 3)",
                                                      " (in 'string', line 214, column 2 to line 220, column 3)",
                                                      " (in 'string', line 222, column 1 to column 141)",
                                                      " (in 'string', line 223, column 4 to column 159)",
                                                      " (in 'string', line 226, column 10 to line 227, column 121)",
                                                      " (in 'string', line 228, column 10 to line 229, column 121)",
                                                      " (in 'string', line 225, column 27 to line 230, column 9)",
                                                      " (in 'string', line 225, column 8 to line 230, column 9)",
                                                      " (in 'string', line 224, column 24 to line 231, column 7)",
                                                      " (in 'string', line 224, column 6 to line 231, column 7)",
                                                      " (in 'string', line 234, column 4 to column 98)",
                                                      " (in 'string', line 235, column 4 to column 33)",
                                                      " (in 'string', line 236, column 4 to column 37)",
                                                      " (in 'string', line 238, column 4 to column 104)",
                                                      " (in 'string', line 232, column 15 to line 239, column 3)",
                                                      " (in 'string', line 232, column 2 to line 239, column 3)",
                                                      " (in 'string', line 42, column 2 to column 18)",
                                                      " (in 'string', line 52, column 2 to column 17)",
                                                      " (in 'string', line 70, column 2 to column 42)",
                                                      " (in 'string', line 71, column 2 to column 42)",
                                                      " (in 'string', line 72, column 2 to column 42)",
                                                      " (in 'string', line 78, column 2 to column 61)",
                                                      " (in 'string', line 79, column 2 to column 55)",
                                                      " (in 'string', line 81, column 2 to column 38)",
                                                      " (in 'string', line 82, column 2 to column 37)",
                                                      " (in 'string', line 84, column 10 to column 11)",
                                                      " (in 'string', line 84, column 2 to column 33)",
                                                      " (in 'string', line 85, column 10 to column 11)",
                                                      " (in 'string', line 85, column 2 to column 33)",
                                                      " (in 'string', line 86, column 8 to column 38)",
                                                      " (in 'string', line 86, column 2 to column 66)",
                                                      " (in 'string', line 87, column 9 to column 39)",
                                                      " (in 'string', line 87, column 41 to column 71)",
                                                      " (in 'string', line 87, column 2 to column 101)",
                                                      " (in 'string', line 88, column 8 to column 38)",
                                                      " (in 'string', line 88, column 2 to column 81)",
                                                      " (in 'string', line 89, column 10 to column 40)",
                                                      " (in 'string', line 89, column 42 to column 72)",
                                                      " (in 'string', line 89, column 2 to column 98)",
                                                      " (in 'string', line 90, column 10 to column 40)",
                                                      " (in 'string', line 90, column 42 to column 72)",
                                                      " (in 'string', line 90, column 2 to column 98)",
                                                      " (in 'string', line 93, column 9 to column 10)",
                                                      " (in 'string', line 93, column 1 to column 32)",
                                                      " (in 'string', line 94, column 10 to column 11)",
                                                      " (in 'string', line 94, column 2 to column 33)",
                                                      " (in 'string', line 95, column 7 to column 36)",
                                                      " (in 'string', line 95, column 1 to column 64)",
                                                      " (in 'string', line 96, column 8 to column 37)",
                                                      " (in 'string', line 96, column 38 to column 67)",
                                                      " (in 'string', line 96, column 1 to column 97)",
                                                      " (in 'string', line 97, column 7 to column 36)",
                                                      " (in 'string', line 97, column 1 to column 79)",
                                                      " (in 'string', line 98, column 9 to column 38)",
                                                      " (in 'string', line 98, column 39 to column 68)",
                                                      " (in 'string', line 98, column 1 to column 94)",
                                                      " (in 'string', line 99, column 10 to column 39)",
                                                      " (in 'string', line 99, column 40 to column 69)",
                                                      " (in 'string', line 99, column 2 to column 95)",
                                                      " (in 'string', line 101, column 2 to column 38)",
                                                      " (in 'string', line 102, column 2 to column 37)",
                                                      " (in 'string', line 104, column 19 to column 20)",
                                                      " (in 'string', line 104, column 1 to column 38)",
                                                      " (in 'string', line 106, column 19 to column 20)",
                                                      " (in 'string', line 106, column 1 to column 40)",
                                                      " (in 'string', line 107, column 10 to column 11)",
                                                      " (in 'string', line 107, column 2 to column 30)",
                                                      " (in 'string', line 108, column 2 to column 44)",
                                                      " (in 'string', line 109, column 8 to column 9)",
                                                      " (in 'string', line 109, column 11 to column 12)",
                                                      " (in 'string', line 109, column 1 to column 43)",
                                                      " (in 'string', line 116, column 8 to column 9)",
                                                      " (in 'string', line 116, column 37 to column 38)",
                                                      " (in 'string', line 117, column 8 to column 9)",
                                                      " (in 'string', line 117, column 19 to column 20)",
                                                      " (in 'string', line 118, column 8 to column 9)",
                                                      " (in 'string', line 118, column 24 to column 25)",
                                                      " (in 'string', line 119, column 8 to column 9)",
                                                      " (in 'string', line 119, column 18 to column 19)",
                                                      " (in 'string', line 120, column 20 to column 21)",
                                                      " (in 'string', line 121, column 15 to column 16)",
                                                      " (in 'string', line 123, column 28 to column 29)",
                                                      " (in 'string', line 124, column 20 to column 21)",
                                                      " (in 'string', line 125, column 15 to column 16)",
                                                      " (in 'string', line 126, column 10 to column 11)",
                                                      " (in 'string', line 130, column 14 to column 15)",
                                                      " (in 'string', line 139, column 22 to column 23)",
                                                      " (in 'string', line 139, column 26 to column 27)",
                                                      " (in 'string', line 140, column 12 to column 13)",
                                                      " (in 'string', line 143, column 8 to column 9)",
                                                      " (in 'string', line 143, column 19 to column 20)",
                                                      " (in 'string', line 143, column 21 to column 22)",
                                                      " (in 'string', line 144, column 8 to column 9)",
                                                      " (in 'string', line 144, column 19 to column 20)",
                                                      " (in 'string', line 145, column 10 to column 11)",
                                                      " (in 'string', line 146, column 8 to column 9)",
                                                      " (in 'string', line 146, column 19 to column 20)",
                                                      " (in 'string', line 147, column 10 to column 11)",
                                                      " (in 'string', line 148, column 10 to column 11)",
                                                      " (in 'string', line 148, column 12 to column 13)",
                                                      " (in 'string', line 149, column 10 to column 11)",
                                                      " (in 'string', line 149, column 12 to column 13)",
                                                      " (in 'string', line 151, column 8 to column 9)",
                                                      " (in 'string', line 151, column 28 to column 29)",
                                                      " (in 'string', line 152, column 10 to column 19)",
                                                      " (in 'string', line 153, column 10 to column 19)",
                                                      " (in 'string', line 153, column 20 to column 29)",
                                                      " (in 'string', line 155, column 10 to column 11)",
                                                      " (in 'string', line 156, column 10 to column 11)",
                                                      " (in 'string', line 156, column 12 to column 13)",
                                                      " (in 'string', line 164, column 9 to column 18)",
                                                      " (in 'string', line 164, column 21 to column 30)",
                                                      " (in 'string', line 165, column 9 to column 18)",
                                                      " (in 'string', line 166, column 9 to column 18)",
                                                      " (in 'string', line 6, column 4 to column 48)",
                                                      " (in 'string', line 5, column 19 to line 7, column 3)",
                                                      " (in 'string', line 12, column 4 to column 19)",
                                                      " (in 'string', line 13, column 4 to column 17)",
                                                      " (in 'string', line 16, column 8 to column 69)",
                                                      " (in 'string', line 15, column 24 to line 17, column 7)",
                                                      " (in 'string', line 15, column 6 to line 17, column 7)",
                                                      " (in 'string', line 14, column 24 to line 18, column 5)",
                                                      " (in 'string', line 14, column 4 to line 18, column 5)",
                                                      " (in 'string', line 19, column 4 to column 21)",
                                                      " (in 'string', line 11, column 72 to line 20, column 3)",
                                                      " (in 'string', line 25, column 4 to column 23)",
                                                      " (in 'string', line 28, column 8 to column 78)",
                                                      " (in 'string', line 27, column 24 to line 29, column 7)",
                                                      " (in 'string', line 27, column 6 to line 29, column 7)",
                                                      " (in 'string', line 26, column 22 to line 30, column 5)",
                                                      " (in 'string', line 26, column 4 to line 30, column 5)",
                                                      " (in 'string', line 31, column 4 to column 21)",
                                                      " (in 'string', line 24, column 71 to line 32, column 3)",
                                                      " (in 'string', line 34, column 4 to column 16)",
                                                      " (in 'string', line 36, column 5 to column 56)",
                                                      " (in 'string', line 35, column 18 to line 37, column 4)",
                                                      " (in 'string', line 35, column 4 to line 37, column 4)",
                                                      " (in 'string', line 38, column 3 to column 14)",
                                                      " (in 'string', line 33, column 50 to line 39, column 3)"};
template <typename T0__>
stan::promote_args_t<T0__>
As(const T0__& Rho, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 183;
    return (((1 / stan::math::pi()) *
              stan::math::atan((Rho / stan::math::sqrt((1 - pow(Rho, 2))))))
             + 0.5);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct As_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& Rho, std::ostream* pstream__)  const 
{
return As(Rho, pstream__);
}
};
template <typename T0__, typename T2__, typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
priors_cor_beta(const T0__& Rho_arg__, const int& N,
                const T2__& beta_1_arg__, const T3__& beta_2_arg__,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& Rho = to_ref(Rho_arg__);
  const auto& beta_1 = to_ref(beta_1_arg__);
  const auto& beta_2 = to_ref(beta_2_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ log_prior;
    log_prior = DUMMY_VAR__;
    
    current_statement__ = 186;
    log_prior = 0;
    current_statement__ = 191;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 189;
      for (int j = (i + 1); j <= N; ++j) {
        current_statement__ = 187;
        log_prior = (log_prior +
                      beta_lpdf<false>(
                        As(
                          rvalue(Rho,
                            cons_list(index_uni(i),
                              cons_list(index_uni(j), nil_index_list())),
                            "Rho"), pstream__),
                        rvalue(beta_1,
                          cons_list(index_uni(i),
                            cons_list(index_uni(j), nil_index_list())),
                          "beta_1"),
                        rvalue(beta_2,
                          cons_list(index_uni(i),
                            cons_list(index_uni(j), nil_index_list())),
                          "beta_2")));}}
    current_statement__ = 192;
    return log_prior;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct priors_cor_beta_functor__ {
template <typename T0__, typename T2__, typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
operator()(const T0__& Rho, const int& N, const T2__& beta_1,
           const T3__& beta_2, std::ostream* pstream__)  const 
{
return priors_cor_beta(Rho, N, beta_1, beta_2, pstream__);
}
};
template <typename T0__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T2__>>
priors_cor_hierarchical_beta(const T0__& ind_st_cor_arg__, const int& N,
                             const T2__& M_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T2__>>;
  const auto& ind_st_cor = to_ref(ind_st_cor_arg__);
  const auto& M = to_ref(M_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ log_prior;
    log_prior = DUMMY_VAR__;
    
    current_statement__ = 194;
    log_prior = 0;
    current_statement__ = 199;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 197;
      for (int j = (i + 1); j <= N; ++j) {
        current_statement__ = 195;
        log_prior = (log_prior +
                      beta_lpdf<false>(
                        (0.5 *
                          (rvalue(ind_st_cor,
                             cons_list(index_uni(i),
                               cons_list(index_uni(j), nil_index_list())),
                             "ind_st_cor") + 1)),
                        rvalue(M,
                          cons_list(index_uni(i),
                            cons_list(index_uni(j), nil_index_list())), "M"),
                        rvalue(M,
                          cons_list(index_uni(j),
                            cons_list(index_uni(i), nil_index_list())), "M")));
      }}
    current_statement__ = 200;
    return log_prior;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct priors_cor_hierarchical_beta_functor__ {
template <typename T0__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T2__>>
operator()(const T0__& ind_st_cor, const int& N, const T2__& M,
           std::ostream* pstream__)  const 
{
return priors_cor_hierarchical_beta(ind_st_cor, N, M, pstream__);
}
};
int
sq_int(const std::vector<int>& model_num_species, const int& M,
       std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int ret;
    ret = std::numeric_limits<int>::min();
    
    current_statement__ = 202;
    ret = 0;
    current_statement__ = 205;
    for (int i = 1; i <= M; ++i) {
      current_statement__ = 203;
      ret = (ret + (model_num_species[(i - 1)] * model_num_species[(i - 1)]));
    }
    current_statement__ = 206;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sq_int_functor__ {
int
operator()(const std::vector<int>& model_num_species, const int& M,
           std::ostream* pstream__)  const 
{
return sq_int(model_num_species, M, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_ensemble_prior_hierarchical final : public model_base_crtp<model_ensemble_prior_hierarchical> {
private:
  int N;
  int M;
  int form_prior_ind_st;
  int form_prior_ind_lt;
  int form_prior_sha_st;
  Eigen::Matrix<double, -1, 1> prior_ind_st_cor_hierarchical_beta_hyper_params;
  Eigen::Matrix<double, -1, 1> prior_ind_st_var_hierarchical_hyperparams;
  double prior_ind_st_ar_alpha;
  double prior_ind_st_ar_beta;
  Eigen::Matrix<double, -1, 1> prior_ind_lt_var_a;
  Eigen::Matrix<double, -1, 1> prior_ind_lt_var_b;
  std::vector<double> prior_ind_lt_cor_lkj;
  Eigen::Matrix<double, -1, -1> prior_ind_lt_cor_wish_sigma;
  std::vector<double> prior_ind_lt_cor_wish_nu;
  Eigen::Matrix<double, -1, -1> prior_ind_lt_cor_beta_1;
  Eigen::Matrix<double, -1, -1> prior_ind_lt_cor_beta_2;
  Eigen::Matrix<double, -1, 1> prior_sha_st_var_a;
  Eigen::Matrix<double, -1, 1> prior_sha_st_var_b;
  std::vector<double> prior_sha_st_cor_lkj;
  Eigen::Matrix<double, -1, -1> prior_sha_st_cor_wish_sigma;
  std::vector<double> prior_sha_st_cor_wish_nu;
  Eigen::Matrix<double, -1, -1> prior_sha_st_cor_beta_1;
  Eigen::Matrix<double, -1, -1> prior_sha_st_cor_beta_2;
  double prior_sha_st_ar_alpha;
  double prior_sha_st_ar_beta;
  Eigen::Matrix<double, -1, 1> prior_sha_lt_sd;
  Eigen::Matrix<double, -1, 1> prior_y_init_mean;
  Eigen::Matrix<double, -1, 1> prior_y_init_var;
  double prior_sigma_t_inv_wish_nu;
  Eigen::Matrix<double, -1, -1> prior_sigma_t_inv_wish_sigma;
  int x_hat_1dim__;
  int SIGMA_init_1dim__;
  int SIGMA_init_2dim__;
  int SIGMA_1dim__;
  int SIGMA_2dim__;
  int lt_discrepancies_1dim__;
  int AR_params_1dim__;
 
public:
  ~model_ensemble_prior_hierarchical() { }
  
  inline std::string model_name() const final { return "model_ensemble_prior_hierarchical"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_ensemble_prior_hierarchical(stan::io::var_context& context__,
                                    unsigned int random_seed__ = 0,
                                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_ensemble_prior_hierarchical_namespace::model_ensemble_prior_hierarchical";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 85;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 85;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 85;
      current_statement__ = 85;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 86;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 86;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 86;
      current_statement__ = 86;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 87;
      context__.validate_dims("data initialization","form_prior_ind_st",
          "int",context__.to_vec());
      form_prior_ind_st = std::numeric_limits<int>::min();
      
      current_statement__ = 87;
      form_prior_ind_st = context__.vals_i("form_prior_ind_st")[(1 - 1)];
      current_statement__ = 87;
      current_statement__ = 87;
      check_greater_or_equal(function__, "form_prior_ind_st",
                             form_prior_ind_st, 0);
      current_statement__ = 87;
      current_statement__ = 87;
      check_less_or_equal(function__, "form_prior_ind_st", form_prior_ind_st,
                          3);
      current_statement__ = 88;
      context__.validate_dims("data initialization","form_prior_ind_lt",
          "int",context__.to_vec());
      form_prior_ind_lt = std::numeric_limits<int>::min();
      
      current_statement__ = 88;
      form_prior_ind_lt = context__.vals_i("form_prior_ind_lt")[(1 - 1)];
      current_statement__ = 88;
      current_statement__ = 88;
      check_greater_or_equal(function__, "form_prior_ind_lt",
                             form_prior_ind_lt, 0);
      current_statement__ = 88;
      current_statement__ = 88;
      check_less_or_equal(function__, "form_prior_ind_lt", form_prior_ind_lt,
                          2);
      current_statement__ = 89;
      context__.validate_dims("data initialization","form_prior_sha_st",
          "int",context__.to_vec());
      form_prior_sha_st = std::numeric_limits<int>::min();
      
      current_statement__ = 89;
      form_prior_sha_st = context__.vals_i("form_prior_sha_st")[(1 - 1)];
      current_statement__ = 89;
      current_statement__ = 89;
      check_greater_or_equal(function__, "form_prior_sha_st",
                             form_prior_sha_st, 0);
      current_statement__ = 89;
      current_statement__ = 89;
      check_less_or_equal(function__, "form_prior_sha_st", form_prior_sha_st,
                          2);
      current_statement__ = 90;
      context__.validate_dims("data initialization",
          "prior_ind_st_cor_hierarchical_beta_hyper_params","double",
          context__.to_vec(4));
      prior_ind_st_cor_hierarchical_beta_hyper_params = Eigen::Matrix<double, -1, 1>(4);
      stan::math::fill(prior_ind_st_cor_hierarchical_beta_hyper_params, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_ind_st_cor_hierarchical_beta_hyper_params_flat__;
        current_statement__ = 90;
        assign(prior_ind_st_cor_hierarchical_beta_hyper_params_flat__,
          nil_index_list(),
          context__.vals_r("prior_ind_st_cor_hierarchical_beta_hyper_params"),
          "assigning variable prior_ind_st_cor_hierarchical_beta_hyper_params_flat__");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 90;
          assign(prior_ind_st_cor_hierarchical_beta_hyper_params,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_ind_st_cor_hierarchical_beta_hyper_params_flat__[(pos__ -
                                                                    1)],
            "assigning variable prior_ind_st_cor_hierarchical_beta_hyper_params");
          current_statement__ = 90;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 91;
      context__.validate_dims("data initialization",
          "prior_ind_st_var_hierarchical_hyperparams","double",
          context__.to_vec(4));
      prior_ind_st_var_hierarchical_hyperparams = Eigen::Matrix<double, -1, 1>(4);
      stan::math::fill(prior_ind_st_var_hierarchical_hyperparams, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_ind_st_var_hierarchical_hyperparams_flat__;
        current_statement__ = 91;
        assign(prior_ind_st_var_hierarchical_hyperparams_flat__,
          nil_index_list(),
          context__.vals_r("prior_ind_st_var_hierarchical_hyperparams"),
          "assigning variable prior_ind_st_var_hierarchical_hyperparams_flat__");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 91;
          assign(prior_ind_st_var_hierarchical_hyperparams,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_ind_st_var_hierarchical_hyperparams_flat__[(pos__ - 1)],
            "assigning variable prior_ind_st_var_hierarchical_hyperparams");
          current_statement__ = 91;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 92;
      context__.validate_dims("data initialization","prior_ind_st_ar_alpha",
          "double",context__.to_vec());
      prior_ind_st_ar_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 92;
      prior_ind_st_ar_alpha = context__.vals_r("prior_ind_st_ar_alpha")[
          (1 - 1)];
      current_statement__ = 92;
      current_statement__ = 92;
      check_greater_or_equal(function__, "prior_ind_st_ar_alpha",
                             prior_ind_st_ar_alpha, 0);
      current_statement__ = 93;
      context__.validate_dims("data initialization","prior_ind_st_ar_beta",
          "double",context__.to_vec());
      prior_ind_st_ar_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 93;
      prior_ind_st_ar_beta = context__.vals_r("prior_ind_st_ar_beta")[
          (1 - 1)];
      current_statement__ = 93;
      current_statement__ = 93;
      check_greater_or_equal(function__, "prior_ind_st_ar_beta",
                             prior_ind_st_ar_beta, 0);
      current_statement__ = 94;
      validate_non_negative_index("prior_ind_lt_var_a", "N", N);
      current_statement__ = 95;
      context__.validate_dims("data initialization","prior_ind_lt_var_a",
          "double",context__.to_vec(N));
      prior_ind_lt_var_a = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(prior_ind_lt_var_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_ind_lt_var_a_flat__;
        current_statement__ = 95;
        assign(prior_ind_lt_var_a_flat__, nil_index_list(),
          context__.vals_r("prior_ind_lt_var_a"),
          "assigning variable prior_ind_lt_var_a_flat__");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 95;
          assign(prior_ind_lt_var_a,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_ind_lt_var_a_flat__[(pos__ - 1)],
            "assigning variable prior_ind_lt_var_a");
          current_statement__ = 95;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 96;
      validate_non_negative_index("prior_ind_lt_var_b", "N", N);
      current_statement__ = 97;
      context__.validate_dims("data initialization","prior_ind_lt_var_b",
          "double",context__.to_vec(N));
      prior_ind_lt_var_b = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(prior_ind_lt_var_b, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_ind_lt_var_b_flat__;
        current_statement__ = 97;
        assign(prior_ind_lt_var_b_flat__, nil_index_list(),
          context__.vals_r("prior_ind_lt_var_b"),
          "assigning variable prior_ind_lt_var_b_flat__");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 97;
          assign(prior_ind_lt_var_b,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_ind_lt_var_b_flat__[(pos__ - 1)],
            "assigning variable prior_ind_lt_var_b");
          current_statement__ = 97;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 98;
      validate_non_negative_index("prior_ind_lt_cor_lkj",
                                  "form_prior_ind_lt == 0 ? 1 : 0",
                                  (logical_eq(form_prior_ind_lt, 0) ? 1 : 0));
      current_statement__ = 99;
      context__.validate_dims("data initialization","prior_ind_lt_cor_lkj",
          "double",
          context__.to_vec((logical_eq(form_prior_ind_lt, 0) ? 1 : 0)));
      prior_ind_lt_cor_lkj = std::vector<double>((
                                                    logical_eq(
                                                      form_prior_ind_lt, 0) ?
                                                    1 : 0), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 99;
      assign(prior_ind_lt_cor_lkj, nil_index_list(),
        context__.vals_r("prior_ind_lt_cor_lkj"),
        "assigning variable prior_ind_lt_cor_lkj");
      current_statement__ = 100;
      validate_non_negative_index("prior_ind_lt_cor_wish_sigma",
                                  "form_prior_ind_lt == 1 ? N : 0",
                                  (logical_eq(form_prior_ind_lt, 1) ? N : 0));
      current_statement__ = 101;
      validate_non_negative_index("prior_ind_lt_cor_wish_sigma",
                                  "form_prior_ind_lt == 1 ? N : 0",
                                  (logical_eq(form_prior_ind_lt, 1) ? N : 0));
      current_statement__ = 102;
      context__.validate_dims("data initialization",
          "prior_ind_lt_cor_wish_sigma","double",
          context__.to_vec((logical_eq(form_prior_ind_lt, 1) ? N : 0),
            (logical_eq(form_prior_ind_lt, 1) ? N : 0)));
      prior_ind_lt_cor_wish_sigma = Eigen::Matrix<double, -1, -1>((
                                                                    logical_eq(
                                                                    form_prior_ind_lt,
                                                                    1) ? N :
                                                                    0), (
        logical_eq(form_prior_ind_lt, 1) ? N : 0));
      stan::math::fill(prior_ind_lt_cor_wish_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_ind_lt_cor_wish_sigma_flat__;
        current_statement__ = 102;
        assign(prior_ind_lt_cor_wish_sigma_flat__, nil_index_list(),
          context__.vals_r("prior_ind_lt_cor_wish_sigma"),
          "assigning variable prior_ind_lt_cor_wish_sigma_flat__");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1;
             sym1__ <= (logical_eq(form_prior_ind_lt, 1) ? N : 0); ++sym1__) {
          current_statement__ = 102;
          for (int sym2__ = 1;
               sym2__ <= (logical_eq(form_prior_ind_lt, 1) ? N : 0); ++sym2__) {
            current_statement__ = 102;
            assign(prior_ind_lt_cor_wish_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_ind_lt_cor_wish_sigma_flat__[(pos__ - 1)],
              "assigning variable prior_ind_lt_cor_wish_sigma");
            current_statement__ = 102;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 103;
      validate_non_negative_index("prior_ind_lt_cor_wish_nu",
                                  "form_prior_ind_lt == 1 ? 1 : 0",
                                  (logical_eq(form_prior_ind_lt, 1) ? 1 : 0));
      current_statement__ = 104;
      context__.validate_dims("data initialization",
          "prior_ind_lt_cor_wish_nu","double",
          context__.to_vec((logical_eq(form_prior_ind_lt, 1) ? 1 : 0)));
      prior_ind_lt_cor_wish_nu = std::vector<double>((
                                                        logical_eq(
                                                          form_prior_ind_lt,
                                                          1) ? 1 : 0), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 104;
      assign(prior_ind_lt_cor_wish_nu, nil_index_list(),
        context__.vals_r("prior_ind_lt_cor_wish_nu"),
        "assigning variable prior_ind_lt_cor_wish_nu");
      current_statement__ = 104;
      for (int sym1__ = 1;
           sym1__ <= (logical_eq(form_prior_ind_lt, 1) ? 1 : 0); ++sym1__) {
        current_statement__ = 104;
        current_statement__ = 104;
        check_greater_or_equal(function__,
                               "prior_ind_lt_cor_wish_nu[sym1__]",
                               prior_ind_lt_cor_wish_nu[(sym1__ - 1)],
                               (N - 1));}
      current_statement__ = 105;
      validate_non_negative_index("prior_ind_lt_cor_beta_1",
                                  "form_prior_ind_lt == 2 ? N : 0",
                                  (logical_eq(form_prior_ind_lt, 2) ? N : 0));
      current_statement__ = 106;
      validate_non_negative_index("prior_ind_lt_cor_beta_1",
                                  "form_prior_ind_lt == 2 ? N : 0",
                                  (logical_eq(form_prior_ind_lt, 2) ? N : 0));
      current_statement__ = 107;
      context__.validate_dims("data initialization",
          "prior_ind_lt_cor_beta_1","double",
          context__.to_vec((logical_eq(form_prior_ind_lt, 2) ? N : 0),
            (logical_eq(form_prior_ind_lt, 2) ? N : 0)));
      prior_ind_lt_cor_beta_1 = Eigen::Matrix<double, -1, -1>((
                                                                 logical_eq(
                                                                   form_prior_ind_lt,
                                                                   2) ? N : 0), (
        logical_eq(form_prior_ind_lt, 2) ? N : 0));
      stan::math::fill(prior_ind_lt_cor_beta_1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_ind_lt_cor_beta_1_flat__;
        current_statement__ = 107;
        assign(prior_ind_lt_cor_beta_1_flat__, nil_index_list(),
          context__.vals_r("prior_ind_lt_cor_beta_1"),
          "assigning variable prior_ind_lt_cor_beta_1_flat__");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1;
             sym1__ <= (logical_eq(form_prior_ind_lt, 2) ? N : 0); ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1;
               sym2__ <= (logical_eq(form_prior_ind_lt, 2) ? N : 0); ++sym2__) {
            current_statement__ = 107;
            assign(prior_ind_lt_cor_beta_1,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_ind_lt_cor_beta_1_flat__[(pos__ - 1)],
              "assigning variable prior_ind_lt_cor_beta_1");
            current_statement__ = 107;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 108;
      validate_non_negative_index("prior_ind_lt_cor_beta_2",
                                  "form_prior_ind_lt == 2 ? N : 0",
                                  (logical_eq(form_prior_ind_lt, 2) ? N : 0));
      current_statement__ = 109;
      validate_non_negative_index("prior_ind_lt_cor_beta_2",
                                  "form_prior_ind_lt == 2 ? N : 0",
                                  (logical_eq(form_prior_ind_lt, 2) ? N : 0));
      current_statement__ = 110;
      context__.validate_dims("data initialization",
          "prior_ind_lt_cor_beta_2","double",
          context__.to_vec((logical_eq(form_prior_ind_lt, 2) ? N : 0),
            (logical_eq(form_prior_ind_lt, 2) ? N : 0)));
      prior_ind_lt_cor_beta_2 = Eigen::Matrix<double, -1, -1>((
                                                                 logical_eq(
                                                                   form_prior_ind_lt,
                                                                   2) ? N : 0), (
        logical_eq(form_prior_ind_lt, 2) ? N : 0));
      stan::math::fill(prior_ind_lt_cor_beta_2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_ind_lt_cor_beta_2_flat__;
        current_statement__ = 110;
        assign(prior_ind_lt_cor_beta_2_flat__, nil_index_list(),
          context__.vals_r("prior_ind_lt_cor_beta_2"),
          "assigning variable prior_ind_lt_cor_beta_2_flat__");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1;
             sym1__ <= (logical_eq(form_prior_ind_lt, 2) ? N : 0); ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1;
               sym2__ <= (logical_eq(form_prior_ind_lt, 2) ? N : 0); ++sym2__) {
            current_statement__ = 110;
            assign(prior_ind_lt_cor_beta_2,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_ind_lt_cor_beta_2_flat__[(pos__ - 1)],
              "assigning variable prior_ind_lt_cor_beta_2");
            current_statement__ = 110;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 111;
      validate_non_negative_index("prior_sha_st_var_a", "N", N);
      current_statement__ = 112;
      context__.validate_dims("data initialization","prior_sha_st_var_a",
          "double",context__.to_vec(N));
      prior_sha_st_var_a = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(prior_sha_st_var_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sha_st_var_a_flat__;
        current_statement__ = 112;
        assign(prior_sha_st_var_a_flat__, nil_index_list(),
          context__.vals_r("prior_sha_st_var_a"),
          "assigning variable prior_sha_st_var_a_flat__");
        current_statement__ = 112;
        pos__ = 1;
        current_statement__ = 112;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 112;
          assign(prior_sha_st_var_a,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_sha_st_var_a_flat__[(pos__ - 1)],
            "assigning variable prior_sha_st_var_a");
          current_statement__ = 112;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 113;
      validate_non_negative_index("prior_sha_st_var_b", "N", N);
      current_statement__ = 114;
      context__.validate_dims("data initialization","prior_sha_st_var_b",
          "double",context__.to_vec(N));
      prior_sha_st_var_b = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(prior_sha_st_var_b, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sha_st_var_b_flat__;
        current_statement__ = 114;
        assign(prior_sha_st_var_b_flat__, nil_index_list(),
          context__.vals_r("prior_sha_st_var_b"),
          "assigning variable prior_sha_st_var_b_flat__");
        current_statement__ = 114;
        pos__ = 1;
        current_statement__ = 114;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 114;
          assign(prior_sha_st_var_b,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_sha_st_var_b_flat__[(pos__ - 1)],
            "assigning variable prior_sha_st_var_b");
          current_statement__ = 114;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 115;
      validate_non_negative_index("prior_sha_st_cor_lkj",
                                  "form_prior_sha_st == 0 ? 1 : 0",
                                  (logical_eq(form_prior_sha_st, 0) ? 1 : 0));
      current_statement__ = 116;
      context__.validate_dims("data initialization","prior_sha_st_cor_lkj",
          "double",
          context__.to_vec((logical_eq(form_prior_sha_st, 0) ? 1 : 0)));
      prior_sha_st_cor_lkj = std::vector<double>((
                                                    logical_eq(
                                                      form_prior_sha_st, 0) ?
                                                    1 : 0), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 116;
      assign(prior_sha_st_cor_lkj, nil_index_list(),
        context__.vals_r("prior_sha_st_cor_lkj"),
        "assigning variable prior_sha_st_cor_lkj");
      current_statement__ = 117;
      validate_non_negative_index("prior_sha_st_cor_wish_sigma",
                                  "form_prior_sha_st == 1 ? N : 0",
                                  (logical_eq(form_prior_sha_st, 1) ? N : 0));
      current_statement__ = 118;
      validate_non_negative_index("prior_sha_st_cor_wish_sigma",
                                  "form_prior_sha_st == 1 ? N : 0",
                                  (logical_eq(form_prior_sha_st, 1) ? N : 0));
      current_statement__ = 119;
      context__.validate_dims("data initialization",
          "prior_sha_st_cor_wish_sigma","double",
          context__.to_vec((logical_eq(form_prior_sha_st, 1) ? N : 0),
            (logical_eq(form_prior_sha_st, 1) ? N : 0)));
      prior_sha_st_cor_wish_sigma = Eigen::Matrix<double, -1, -1>((
                                                                    logical_eq(
                                                                    form_prior_sha_st,
                                                                    1) ? N :
                                                                    0), (
        logical_eq(form_prior_sha_st, 1) ? N : 0));
      stan::math::fill(prior_sha_st_cor_wish_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sha_st_cor_wish_sigma_flat__;
        current_statement__ = 119;
        assign(prior_sha_st_cor_wish_sigma_flat__, nil_index_list(),
          context__.vals_r("prior_sha_st_cor_wish_sigma"),
          "assigning variable prior_sha_st_cor_wish_sigma_flat__");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1;
             sym1__ <= (logical_eq(form_prior_sha_st, 1) ? N : 0); ++sym1__) {
          current_statement__ = 119;
          for (int sym2__ = 1;
               sym2__ <= (logical_eq(form_prior_sha_st, 1) ? N : 0); ++sym2__) {
            current_statement__ = 119;
            assign(prior_sha_st_cor_wish_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_sha_st_cor_wish_sigma_flat__[(pos__ - 1)],
              "assigning variable prior_sha_st_cor_wish_sigma");
            current_statement__ = 119;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 120;
      validate_non_negative_index("prior_sha_st_cor_wish_nu",
                                  "form_prior_sha_st == 1 ? 1 : 0",
                                  (logical_eq(form_prior_sha_st, 1) ? 1 : 0));
      current_statement__ = 121;
      context__.validate_dims("data initialization",
          "prior_sha_st_cor_wish_nu","double",
          context__.to_vec((logical_eq(form_prior_sha_st, 1) ? 1 : 0)));
      prior_sha_st_cor_wish_nu = std::vector<double>((
                                                        logical_eq(
                                                          form_prior_sha_st,
                                                          1) ? 1 : 0), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 121;
      assign(prior_sha_st_cor_wish_nu, nil_index_list(),
        context__.vals_r("prior_sha_st_cor_wish_nu"),
        "assigning variable prior_sha_st_cor_wish_nu");
      current_statement__ = 121;
      for (int sym1__ = 1;
           sym1__ <= (logical_eq(form_prior_sha_st, 1) ? 1 : 0); ++sym1__) {
        current_statement__ = 121;
        current_statement__ = 121;
        check_greater_or_equal(function__,
                               "prior_sha_st_cor_wish_nu[sym1__]",
                               prior_sha_st_cor_wish_nu[(sym1__ - 1)],
                               (N - 1));}
      current_statement__ = 122;
      validate_non_negative_index("prior_sha_st_cor_beta_1",
                                  "form_prior_sha_st == 2 ? N : 0",
                                  (logical_eq(form_prior_sha_st, 2) ? N : 0));
      current_statement__ = 123;
      validate_non_negative_index("prior_sha_st_cor_beta_1",
                                  "form_prior_sha_st == 2 ? N : 0",
                                  (logical_eq(form_prior_sha_st, 2) ? N : 0));
      current_statement__ = 124;
      context__.validate_dims("data initialization",
          "prior_sha_st_cor_beta_1","double",
          context__.to_vec((logical_eq(form_prior_sha_st, 2) ? N : 0),
            (logical_eq(form_prior_sha_st, 2) ? N : 0)));
      prior_sha_st_cor_beta_1 = Eigen::Matrix<double, -1, -1>((
                                                                 logical_eq(
                                                                   form_prior_sha_st,
                                                                   2) ? N : 0), (
        logical_eq(form_prior_sha_st, 2) ? N : 0));
      stan::math::fill(prior_sha_st_cor_beta_1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sha_st_cor_beta_1_flat__;
        current_statement__ = 124;
        assign(prior_sha_st_cor_beta_1_flat__, nil_index_list(),
          context__.vals_r("prior_sha_st_cor_beta_1"),
          "assigning variable prior_sha_st_cor_beta_1_flat__");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1;
             sym1__ <= (logical_eq(form_prior_sha_st, 2) ? N : 0); ++sym1__) {
          current_statement__ = 124;
          for (int sym2__ = 1;
               sym2__ <= (logical_eq(form_prior_sha_st, 2) ? N : 0); ++sym2__) {
            current_statement__ = 124;
            assign(prior_sha_st_cor_beta_1,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_sha_st_cor_beta_1_flat__[(pos__ - 1)],
              "assigning variable prior_sha_st_cor_beta_1");
            current_statement__ = 124;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 125;
      validate_non_negative_index("prior_sha_st_cor_beta_2",
                                  "form_prior_sha_st == 2 ? N : 0",
                                  (logical_eq(form_prior_sha_st, 2) ? N : 0));
      current_statement__ = 126;
      validate_non_negative_index("prior_sha_st_cor_beta_2",
                                  "form_prior_sha_st == 2 ? N : 0",
                                  (logical_eq(form_prior_sha_st, 2) ? N : 0));
      current_statement__ = 127;
      context__.validate_dims("data initialization",
          "prior_sha_st_cor_beta_2","double",
          context__.to_vec((logical_eq(form_prior_sha_st, 2) ? N : 0),
            (logical_eq(form_prior_sha_st, 2) ? N : 0)));
      prior_sha_st_cor_beta_2 = Eigen::Matrix<double, -1, -1>((
                                                                 logical_eq(
                                                                   form_prior_sha_st,
                                                                   2) ? N : 0), (
        logical_eq(form_prior_sha_st, 2) ? N : 0));
      stan::math::fill(prior_sha_st_cor_beta_2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sha_st_cor_beta_2_flat__;
        current_statement__ = 127;
        assign(prior_sha_st_cor_beta_2_flat__, nil_index_list(),
          context__.vals_r("prior_sha_st_cor_beta_2"),
          "assigning variable prior_sha_st_cor_beta_2_flat__");
        current_statement__ = 127;
        pos__ = 1;
        current_statement__ = 127;
        for (int sym1__ = 1;
             sym1__ <= (logical_eq(form_prior_sha_st, 2) ? N : 0); ++sym1__) {
          current_statement__ = 127;
          for (int sym2__ = 1;
               sym2__ <= (logical_eq(form_prior_sha_st, 2) ? N : 0); ++sym2__) {
            current_statement__ = 127;
            assign(prior_sha_st_cor_beta_2,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_sha_st_cor_beta_2_flat__[(pos__ - 1)],
              "assigning variable prior_sha_st_cor_beta_2");
            current_statement__ = 127;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 128;
      context__.validate_dims("data initialization","prior_sha_st_ar_alpha",
          "double",context__.to_vec());
      prior_sha_st_ar_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 128;
      prior_sha_st_ar_alpha = context__.vals_r("prior_sha_st_ar_alpha")[
          (1 - 1)];
      current_statement__ = 128;
      current_statement__ = 128;
      check_greater_or_equal(function__, "prior_sha_st_ar_alpha",
                             prior_sha_st_ar_alpha, 0);
      current_statement__ = 129;
      context__.validate_dims("data initialization","prior_sha_st_ar_beta",
          "double",context__.to_vec());
      prior_sha_st_ar_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 129;
      prior_sha_st_ar_beta = context__.vals_r("prior_sha_st_ar_beta")[
          (1 - 1)];
      current_statement__ = 129;
      current_statement__ = 129;
      check_greater_or_equal(function__, "prior_sha_st_ar_beta",
                             prior_sha_st_ar_beta, 0);
      current_statement__ = 130;
      validate_non_negative_index("prior_sha_lt_sd", "N", N);
      current_statement__ = 131;
      context__.validate_dims("data initialization","prior_sha_lt_sd",
          "double",context__.to_vec(N));
      prior_sha_lt_sd = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(prior_sha_lt_sd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sha_lt_sd_flat__;
        current_statement__ = 131;
        assign(prior_sha_lt_sd_flat__, nil_index_list(),
          context__.vals_r("prior_sha_lt_sd"),
          "assigning variable prior_sha_lt_sd_flat__");
        current_statement__ = 131;
        pos__ = 1;
        current_statement__ = 131;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 131;
          assign(prior_sha_lt_sd,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_sha_lt_sd_flat__[(pos__ - 1)],
            "assigning variable prior_sha_lt_sd");
          current_statement__ = 131;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 131;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 131;
        current_statement__ = 131;
        check_greater_or_equal(function__, "prior_sha_lt_sd[sym1__]",
                               prior_sha_lt_sd[(sym1__ - 1)], 0);}
      current_statement__ = 132;
      validate_non_negative_index("prior_y_init_mean", "N", N);
      current_statement__ = 133;
      context__.validate_dims("data initialization","prior_y_init_mean",
          "double",context__.to_vec(N));
      prior_y_init_mean = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(prior_y_init_mean, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_y_init_mean_flat__;
        current_statement__ = 133;
        assign(prior_y_init_mean_flat__, nil_index_list(),
          context__.vals_r("prior_y_init_mean"),
          "assigning variable prior_y_init_mean_flat__");
        current_statement__ = 133;
        pos__ = 1;
        current_statement__ = 133;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 133;
          assign(prior_y_init_mean,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_y_init_mean_flat__[(pos__ - 1)],
            "assigning variable prior_y_init_mean");
          current_statement__ = 133;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 133;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 133;
        current_statement__ = 133;
        check_greater_or_equal(function__, "prior_y_init_mean[sym1__]",
                               prior_y_init_mean[(sym1__ - 1)], 0);}
      current_statement__ = 134;
      validate_non_negative_index("prior_y_init_var", "N", N);
      current_statement__ = 135;
      context__.validate_dims("data initialization","prior_y_init_var",
          "double",context__.to_vec(N));
      prior_y_init_var = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(prior_y_init_var, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_y_init_var_flat__;
        current_statement__ = 135;
        assign(prior_y_init_var_flat__, nil_index_list(),
          context__.vals_r("prior_y_init_var"),
          "assigning variable prior_y_init_var_flat__");
        current_statement__ = 135;
        pos__ = 1;
        current_statement__ = 135;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 135;
          assign(prior_y_init_var,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_y_init_var_flat__[(pos__ - 1)],
            "assigning variable prior_y_init_var");
          current_statement__ = 135;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 136;
      context__.validate_dims("data initialization",
          "prior_sigma_t_inv_wish_nu","double",context__.to_vec());
      prior_sigma_t_inv_wish_nu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 136;
      prior_sigma_t_inv_wish_nu = context__.vals_r("prior_sigma_t_inv_wish_nu")[
          (1 - 1)];
      current_statement__ = 136;
      current_statement__ = 136;
      check_greater_or_equal(function__, "prior_sigma_t_inv_wish_nu",
                             prior_sigma_t_inv_wish_nu, (N - 1));
      current_statement__ = 137;
      validate_non_negative_index("prior_sigma_t_inv_wish_sigma", "N", N);
      current_statement__ = 138;
      validate_non_negative_index("prior_sigma_t_inv_wish_sigma", "N", N);
      current_statement__ = 139;
      context__.validate_dims("data initialization",
          "prior_sigma_t_inv_wish_sigma","double",context__.to_vec(N, N));
      prior_sigma_t_inv_wish_sigma = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(prior_sigma_t_inv_wish_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sigma_t_inv_wish_sigma_flat__;
        current_statement__ = 139;
        assign(prior_sigma_t_inv_wish_sigma_flat__, nil_index_list(),
          context__.vals_r("prior_sigma_t_inv_wish_sigma"),
          "assigning variable prior_sigma_t_inv_wish_sigma_flat__");
        current_statement__ = 139;
        pos__ = 1;
        current_statement__ = 139;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 139;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 139;
            assign(prior_sigma_t_inv_wish_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_sigma_t_inv_wish_sigma_flat__[(pos__ - 1)],
              "assigning variable prior_sigma_t_inv_wish_sigma");
            current_statement__ = 139;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 140;
      validate_non_negative_index("ind_st_ar_param", "M", M);
      current_statement__ = 141;
      validate_non_negative_index("ind_st_ar_param", "N", N);
      current_statement__ = 142;
      validate_non_negative_index("log_ind_st_var", "M", M);
      current_statement__ = 143;
      validate_non_negative_index("log_ind_st_var", "N", N);
      current_statement__ = 144;
      validate_non_negative_index("ind_st_cor", "M", M);
      current_statement__ = 145;
      validate_non_negative_index("ind_st_cor", "N", N);
      current_statement__ = 145;
      validate_non_negative_index("ind_st_cor", "N", N);
      current_statement__ = 146;
      validate_non_negative_index("ind_lt_raw", "M", M);
      current_statement__ = 147;
      validate_non_negative_index("ind_lt_raw", "N", N);
      current_statement__ = 148;
      validate_non_negative_index("ind_lt_var", "N", N);
      current_statement__ = 149;
      validate_non_negative_index("ind_lt_cor", "N", N);
      current_statement__ = 149;
      validate_non_negative_index("ind_lt_cor", "N", N);
      current_statement__ = 150;
      validate_non_negative_index("sha_st_ar_param", "N", N);
      current_statement__ = 151;
      validate_non_negative_index("sha_st_var", "N", N);
      current_statement__ = 152;
      validate_non_negative_index("sha_st_cor", "N", N);
      current_statement__ = 152;
      validate_non_negative_index("sha_st_cor", "N", N);
      current_statement__ = 153;
      validate_non_negative_index("sha_lt_raw", "N", N);
      current_statement__ = 154;
      validate_non_negative_index("SIGMA_t", "N", N);
      current_statement__ = 154;
      validate_non_negative_index("SIGMA_t", "N", N);
      current_statement__ = 155;
      validate_non_negative_index("prior_ind_st_cor_hierarchical_beta_params",
                                  "N", N);
      current_statement__ = 156;
      validate_non_negative_index("prior_ind_st_cor_hierarchical_beta_params",
                                  "N", N);
      current_statement__ = 157;
      validate_non_negative_index("prior_ind_st_var_hierarchical_mu_params",
                                  "N", N);
      current_statement__ = 158;
      validate_non_negative_index("SIGMA_x", "M", M);
      current_statement__ = 159;
      validate_non_negative_index("SIGMA_x", "N", N);
      current_statement__ = 160;
      validate_non_negative_index("SIGMA_x", "N", N);
      current_statement__ = 161;
      validate_non_negative_index("ind_st_sd", "M", M);
      current_statement__ = 162;
      validate_non_negative_index("ind_st_sd", "N", N);
      current_statement__ = 163;
      validate_non_negative_index("sha_lt", "N", N);
      current_statement__ = 164;
      validate_non_negative_index("ind_lt", "M", M);
      current_statement__ = 165;
      validate_non_negative_index("ind_lt", "N", N);
      current_statement__ = 166;
      validate_non_negative_index("ind_lt_sd", "N", N);
      current_statement__ = 167;
      validate_non_negative_index("ind_lt_covar", "N", N);
      current_statement__ = 168;
      validate_non_negative_index("ind_lt_covar", "N", N);
      current_statement__ = 169;
      validate_non_negative_index("ind_lt_cov_cholesky", "N", N);
      current_statement__ = 170;
      validate_non_negative_index("ind_lt_cov_cholesky", "N", N);
      current_statement__ = 171;
      validate_non_negative_index("ind_st_var_2", "M", M);
      current_statement__ = 172;
      validate_non_negative_index("ind_st_var_2", "N", N);
      current_statement__ = 173;
      x_hat_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 173;
      x_hat_1dim__ = ((M + 2) * N);
      current_statement__ = 173;
      validate_non_negative_index("x_hat", "(M + 2) * N", x_hat_1dim__);
      current_statement__ = 174;
      SIGMA_init_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 174;
      SIGMA_init_1dim__ = ((M + 2) * N);
      current_statement__ = 174;
      validate_non_negative_index("SIGMA_init", "(M + 2) * N",
                                  SIGMA_init_1dim__);
      current_statement__ = 175;
      SIGMA_init_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 175;
      SIGMA_init_2dim__ = ((M + 2) * N);
      current_statement__ = 175;
      validate_non_negative_index("SIGMA_init", "(M + 2) * N",
                                  SIGMA_init_2dim__);
      current_statement__ = 176;
      validate_non_negative_index("sha_st_sd", "N", N);
      current_statement__ = 177;
      validate_non_negative_index("SIGMA_mu", "N", N);
      current_statement__ = 178;
      validate_non_negative_index("SIGMA_mu", "N", N);
      current_statement__ = 179;
      SIGMA_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 179;
      SIGMA_1dim__ = ((M + 2) * N);
      current_statement__ = 179;
      validate_non_negative_index("SIGMA", "(M + 2) * N", SIGMA_1dim__);
      current_statement__ = 180;
      SIGMA_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 180;
      SIGMA_2dim__ = ((M + 2) * N);
      current_statement__ = 180;
      validate_non_negative_index("SIGMA", "(M + 2) * N", SIGMA_2dim__);
      current_statement__ = 181;
      lt_discrepancies_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 181;
      lt_discrepancies_1dim__ = ((M + 2) * N);
      current_statement__ = 181;
      validate_non_negative_index("lt_discrepancies", "(M + 2) * N",
                                  lt_discrepancies_1dim__);
      current_statement__ = 182;
      AR_params_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 182;
      AR_params_1dim__ = ((M + 2) * N);
      current_statement__ = 182;
      validate_non_negative_index("AR_params", "(M + 2) * N",
                                  AR_params_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += M * N;
      num_params_r__ += M * N;
      num_params_r__ += M * ((N * (N - 1)) / 2);
      num_params_r__ += M * N;
      num_params_r__ += N;
      num_params_r__ += ((N * (N - 1)) / 2);
      num_params_r__ += N;
      num_params_r__ += N;
      num_params_r__ += ((N * (N - 1)) / 2);
      num_params_r__ += N;
      num_params_r__ += (N + ((N * (N - 1)) / 2));
      num_params_r__ += N * N;
      num_params_r__ += N;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_ensemble_prior_hierarchical_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ind_st_ar_param;
      ind_st_ar_param = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(M, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(ind_st_ar_param, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        assign(ind_st_ar_param,
          cons_list(index_uni(sym1__), nil_index_list()), in__.vector(N),
          "assigning variable ind_st_ar_param");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 1;
          if (jacobian__) {
            current_statement__ = 1;
            assign(ind_st_ar_param,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(
                ind_st_ar_param[(sym1__ - 1)][(sym2__ - 1)], -1, 1, lp__),
              "assigning variable ind_st_ar_param");
          } else {
            current_statement__ = 1;
            assign(ind_st_ar_param,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(
                ind_st_ar_param[(sym1__ - 1)][(sym2__ - 1)], -1, 1),
              "assigning variable ind_st_ar_param");
          }}}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_ind_st_var;
      log_ind_st_var = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(M, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(log_ind_st_var, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 2;
        assign(log_ind_st_var,
          cons_list(index_uni(sym1__), nil_index_list()), in__.vector(N),
          "assigning variable log_ind_st_var");}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> ind_st_cor;
      ind_st_cor = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(M, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N));
      stan::math::fill(ind_st_cor, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ind_st_cor_in__;
      ind_st_cor_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(M, Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((N * (N - 1)) / 2)));
      stan::math::fill(ind_st_cor_in__, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        assign(ind_st_cor_in__,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(((N * (N - 1)) / 2)),
          "assigning variable ind_st_cor_in__");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(ind_st_cor, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::corr_matrix_constrain(ind_st_cor_in__[(sym1__ - 1)],
              N, lp__), "assigning variable ind_st_cor");
        } else {
          current_statement__ = 3;
          assign(ind_st_cor, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::corr_matrix_constrain(ind_st_cor_in__[(sym1__ - 1)],
              N), "assigning variable ind_st_cor");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ind_lt_raw;
      ind_lt_raw = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(M, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(ind_lt_raw, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 4;
        assign(ind_lt_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(N), "assigning variable ind_lt_raw");}
      Eigen::Matrix<local_scalar_t__, -1, 1> ind_lt_var;
      ind_lt_var = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(ind_lt_var, DUMMY_VAR__);
      
      current_statement__ = 5;
      ind_lt_var = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(ind_lt_var, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(ind_lt_var[(sym1__ - 1)], 0, lp__),
            "assigning variable ind_lt_var");
        } else {
          current_statement__ = 5;
          assign(ind_lt_var, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(ind_lt_var[(sym1__ - 1)], 0),
            "assigning variable ind_lt_var");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> ind_lt_cor;
      ind_lt_cor = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(ind_lt_cor, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ind_lt_cor_in__;
      ind_lt_cor_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((N * (N - 1))
                                                                 / 2));
      stan::math::fill(ind_lt_cor_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      ind_lt_cor_in__ = in__.vector(((N * (N - 1)) / 2));
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        assign(ind_lt_cor, nil_index_list(),
          stan::math::corr_matrix_constrain(ind_lt_cor_in__, N, lp__),
          "assigning variable ind_lt_cor");
      } else {
        current_statement__ = 6;
        assign(ind_lt_cor, nil_index_list(),
          stan::math::corr_matrix_constrain(ind_lt_cor_in__, N),
          "assigning variable ind_lt_cor");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> sha_st_ar_param;
      sha_st_ar_param = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(sha_st_ar_param, DUMMY_VAR__);
      
      current_statement__ = 7;
      sha_st_ar_param = in__.vector(N);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(sha_st_ar_param,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(sha_st_ar_param[(sym1__ - 1)], 
              -1, 1, lp__), "assigning variable sha_st_ar_param");
        } else {
          current_statement__ = 7;
          assign(sha_st_ar_param,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(sha_st_ar_param[(sym1__ - 1)], -1, 1),
            "assigning variable sha_st_ar_param");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> sha_st_var;
      sha_st_var = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(sha_st_var, DUMMY_VAR__);
      
      current_statement__ = 8;
      sha_st_var = in__.vector(N);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(sha_st_var, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sha_st_var[(sym1__ - 1)], 0, lp__),
            "assigning variable sha_st_var");
        } else {
          current_statement__ = 8;
          assign(sha_st_var, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sha_st_var[(sym1__ - 1)], 0),
            "assigning variable sha_st_var");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> sha_st_cor;
      sha_st_cor = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(sha_st_cor, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sha_st_cor_in__;
      sha_st_cor_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((N * (N - 1))
                                                                 / 2));
      stan::math::fill(sha_st_cor_in__, DUMMY_VAR__);
      
      current_statement__ = 9;
      sha_st_cor_in__ = in__.vector(((N * (N - 1)) / 2));
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        assign(sha_st_cor, nil_index_list(),
          stan::math::corr_matrix_constrain(sha_st_cor_in__, N, lp__),
          "assigning variable sha_st_cor");
      } else {
        current_statement__ = 9;
        assign(sha_st_cor, nil_index_list(),
          stan::math::corr_matrix_constrain(sha_st_cor_in__, N),
          "assigning variable sha_st_cor");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> sha_lt_raw;
      sha_lt_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(sha_lt_raw, DUMMY_VAR__);
      
      current_statement__ = 10;
      sha_lt_raw = in__.vector(N);
      Eigen::Matrix<local_scalar_t__, -1, -1> SIGMA_t;
      SIGMA_t = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(SIGMA_t, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> SIGMA_t_in__;
      SIGMA_t_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((N +
                                                              ((N * (N - 1))
                                                                / 2)));
      stan::math::fill(SIGMA_t_in__, DUMMY_VAR__);
      
      current_statement__ = 11;
      SIGMA_t_in__ = in__.vector((N + ((N * (N - 1)) / 2)));
      current_statement__ = 11;
      if (jacobian__) {
        current_statement__ = 11;
        assign(SIGMA_t, nil_index_list(),
          stan::math::cov_matrix_constrain(SIGMA_t_in__, N, lp__),
          "assigning variable SIGMA_t");
      } else {
        current_statement__ = 11;
        assign(SIGMA_t, nil_index_list(),
          stan::math::cov_matrix_constrain(SIGMA_t_in__, N),
          "assigning variable SIGMA_t");
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> prior_ind_st_cor_hierarchical_beta_params;
      prior_ind_st_cor_hierarchical_beta_params = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(prior_ind_st_cor_hierarchical_beta_params, DUMMY_VAR__);
      
      current_statement__ = 12;
      prior_ind_st_cor_hierarchical_beta_params = in__.matrix(N, N);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 12;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 12;
          if (jacobian__) {
            current_statement__ = 12;
            assign(prior_ind_st_cor_hierarchical_beta_params,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lb_constrain(
                rvalue(prior_ind_st_cor_hierarchical_beta_params,
                  cons_list(index_uni(sym1__),
                    cons_list(index_uni(sym2__), nil_index_list())),
                  "prior_ind_st_cor_hierarchical_beta_params"), 0, lp__),
              "assigning variable prior_ind_st_cor_hierarchical_beta_params");
          } else {
            current_statement__ = 12;
            assign(prior_ind_st_cor_hierarchical_beta_params,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lb_constrain(
                rvalue(prior_ind_st_cor_hierarchical_beta_params,
                  cons_list(index_uni(sym1__),
                    cons_list(index_uni(sym2__), nil_index_list())),
                  "prior_ind_st_cor_hierarchical_beta_params"), 0),
              "assigning variable prior_ind_st_cor_hierarchical_beta_params");
          }}}
      Eigen::Matrix<local_scalar_t__, -1, 1> prior_ind_st_var_hierarchical_mu_params;
      prior_ind_st_var_hierarchical_mu_params = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(prior_ind_st_var_hierarchical_mu_params, DUMMY_VAR__);
      
      current_statement__ = 13;
      prior_ind_st_var_hierarchical_mu_params = in__.vector(N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> SIGMA_x;
      SIGMA_x = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(M, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N));
      stan::math::fill(SIGMA_x, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ind_st_sd;
      ind_st_sd = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(M, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(ind_st_sd, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sha_lt;
      sha_lt = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(sha_lt, DUMMY_VAR__);
      
      current_statement__ = 16;
      assign(sha_lt, nil_index_list(),
        elt_multiply(prior_sha_lt_sd, sha_lt_raw),
        "assigning variable sha_lt");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ind_lt;
      ind_lt = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(M, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(ind_lt, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ind_lt_sd;
      ind_lt_sd = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(ind_lt_sd, DUMMY_VAR__);
      
      current_statement__ = 18;
      assign(ind_lt_sd, nil_index_list(), stan::math::sqrt(ind_lt_var),
        "assigning variable ind_lt_sd");
      Eigen::Matrix<local_scalar_t__, -1, -1> ind_lt_covar;
      ind_lt_covar = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(ind_lt_covar, DUMMY_VAR__);
      
      current_statement__ = 19;
      assign(ind_lt_covar, nil_index_list(),
        diag_post_multiply(diag_pre_multiply(ind_lt_sd, ind_lt_cor),
          ind_lt_sd), "assigning variable ind_lt_covar");
      Eigen::Matrix<local_scalar_t__, -1, -1> ind_lt_cov_cholesky;
      ind_lt_cov_cholesky = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(ind_lt_cov_cholesky, DUMMY_VAR__);
      
      current_statement__ = 20;
      assign(ind_lt_cov_cholesky, nil_index_list(),
        cholesky_decompose(ind_lt_covar),
        "assigning variable ind_lt_cov_cholesky");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ind_st_var_2;
      ind_st_var_2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(M, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(ind_st_var_2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> x_hat;
      x_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(x_hat_1dim__);
      stan::math::fill(x_hat, DUMMY_VAR__);
      
      current_statement__ = 22;
      assign(x_hat, nil_index_list(),
        append_row(prior_y_init_mean, rep_vector(0.0, (N * (M + 1)))),
        "assigning variable x_hat");
      Eigen::Matrix<local_scalar_t__, -1, -1> SIGMA_init;
      SIGMA_init = Eigen::Matrix<local_scalar_t__, -1, -1>(SIGMA_init_1dim__, SIGMA_init_2dim__);
      stan::math::fill(SIGMA_init, DUMMY_VAR__);
      
      current_statement__ = 23;
      assign(SIGMA_init, nil_index_list(),
        rep_matrix(0, ((M + 2) * N), ((M + 2) * N)),
        "assigning variable SIGMA_init");
      Eigen::Matrix<local_scalar_t__, -1, 1> sha_st_sd;
      sha_st_sd = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(sha_st_sd, DUMMY_VAR__);
      
      current_statement__ = 24;
      assign(sha_st_sd, nil_index_list(), stan::math::sqrt(sha_st_var),
        "assigning variable sha_st_sd");
      Eigen::Matrix<local_scalar_t__, -1, -1> SIGMA_mu;
      SIGMA_mu = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(SIGMA_mu, DUMMY_VAR__);
      
      current_statement__ = 25;
      assign(SIGMA_mu, nil_index_list(),
        diag_post_multiply(diag_pre_multiply(sha_st_sd, sha_st_cor),
          sha_st_sd), "assigning variable SIGMA_mu");
      Eigen::Matrix<local_scalar_t__, -1, -1> SIGMA;
      SIGMA = Eigen::Matrix<local_scalar_t__, -1, -1>(SIGMA_1dim__, SIGMA_2dim__);
      stan::math::fill(SIGMA, DUMMY_VAR__);
      
      current_statement__ = 26;
      assign(SIGMA, nil_index_list(),
        rep_matrix(0, ((M + 2) * N), ((M + 2) * N)),
        "assigning variable SIGMA");
      Eigen::Matrix<local_scalar_t__, -1, 1> lt_discrepancies;
      lt_discrepancies = Eigen::Matrix<local_scalar_t__, -1, 1>(lt_discrepancies_1dim__);
      stan::math::fill(lt_discrepancies, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> AR_params;
      AR_params = Eigen::Matrix<local_scalar_t__, -1, 1>(AR_params_1dim__);
      stan::math::fill(AR_params, DUMMY_VAR__);
      
      current_statement__ = 29;
      assign(SIGMA,
        cons_list(index_min_max(1, N),
          cons_list(index_min_max(1, N), nil_index_list())), SIGMA_t,
        "assigning variable SIGMA");
      current_statement__ = 30;
      assign(SIGMA,
        cons_list(index_min_max((N + 1), (2 * N)),
          cons_list(index_min_max((N + 1), (2 * N)), nil_index_list())),
        SIGMA_mu, "assigning variable SIGMA");
      current_statement__ = 36;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 31;
        assign(ind_st_var_2, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp(
            add(prior_ind_st_var_hierarchical_mu_params,
              elt_multiply(
                stan::math::sqrt(
                  diagonal(prior_ind_st_cor_hierarchical_beta_params)),
                log_ind_st_var[(i - 1)]))), "assigning variable ind_st_var_2");
        current_statement__ = 32;
        assign(ind_st_sd, cons_list(index_uni(i), nil_index_list()),
          stan::math::sqrt(ind_st_var_2[(i - 1)]),
          "assigning variable ind_st_sd");
        current_statement__ = 33;
        assign(SIGMA_x, cons_list(index_uni(i), nil_index_list()),
          diag_post_multiply(
            diag_pre_multiply(ind_st_sd[(i - 1)], ind_st_cor[(i - 1)]),
            ind_st_sd[(i - 1)]), "assigning variable SIGMA_x");
        current_statement__ = 34;
        assign(SIGMA,
          cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
            cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
              nil_index_list())), SIGMA_x[(i - 1)],
          "assigning variable SIGMA");}
      current_statement__ = 37;
      assign(SIGMA_init,
        cons_list(index_min_max(1, N),
          cons_list(index_min_max(1, N), nil_index_list())),
        diag_matrix(prior_y_init_var), "assigning variable SIGMA_init");
      current_statement__ = 38;
      assign(SIGMA_init,
        cons_list(index_min_max((N + 1), (2 * N)),
          cons_list(index_min_max((N + 1), (2 * N)), nil_index_list())),
        elt_divide(SIGMA_mu,
          subtract(1, multiply(sha_st_ar_param, transpose(sha_st_ar_param)))),
        "assigning variable SIGMA_init");
      ;
      current_statement__ = 42;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 40;
        assign(SIGMA_init,
          cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
            cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
              nil_index_list())),
          elt_divide(SIGMA_x[(i - 1)],
            subtract(1,
              multiply(ind_st_ar_param[(i - 1)],
                transpose(ind_st_ar_param[(i - 1)])))),
          "assigning variable SIGMA_init");}
      current_statement__ = 43;
      assign(lt_discrepancies,
        cons_list(index_min_max(1, (2 * N)), nil_index_list()),
        append_row(rep_vector(0.0, N), sha_lt),
        "assigning variable lt_discrepancies");
      current_statement__ = 44;
      assign(AR_params,
        cons_list(index_min_max(1, (2 * N)), nil_index_list()),
        append_row(rep_vector(1.0, N), sha_st_ar_param),
        "assigning variable AR_params");
      current_statement__ = 49;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 45;
        assign(ind_lt, cons_list(index_uni(i), nil_index_list()),
          multiply(ind_lt_cov_cholesky, ind_lt_raw[(i - 1)]),
          "assigning variable ind_lt");
        current_statement__ = 46;
        assign(lt_discrepancies,
          cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
            nil_index_list()), ind_lt[(i - 1)],
          "assigning variable lt_discrepancies");
        current_statement__ = 47;
        assign(AR_params,
          cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
            nil_index_list()), ind_st_ar_param[(i - 1)],
          "assigning variable AR_params");}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 21;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 21;
          current_statement__ = 21;
          check_greater_or_equal(function__, "ind_st_var_2[sym1__, sym2__]",
                                 ind_st_var_2[(sym1__ - 1)][(sym2__ - 1)], 0);
        }}
      {
        current_statement__ = 50;
        lp_accum__.add(
          inv_wishart_lpdf<propto__>(SIGMA_t, prior_sigma_t_inv_wish_nu,
            prior_sigma_t_inv_wish_sigma));
        current_statement__ = 51;
        lp_accum__.add(std_normal_lpdf<propto__>(sha_lt_raw));
        current_statement__ = 52;
        lp_accum__.add(
          gamma_lpdf<propto__>(sha_st_var, prior_sha_st_var_a,
            prior_sha_st_var_b));
        current_statement__ = 53;
        lp_accum__.add(
          beta_lpdf<false>(divide(add(sha_st_ar_param, 1), 2),
            prior_sha_st_ar_alpha, prior_sha_st_ar_beta));
        current_statement__ = 61;
        if (logical_eq(form_prior_sha_st, 0)) {
          current_statement__ = 59;
          lp_accum__.add(
            lkj_corr_lpdf<propto__>(sha_st_cor,
              prior_sha_st_cor_lkj[(1 - 1)]));
        } else {
          current_statement__ = 58;
          if (logical_eq(form_prior_sha_st, 1)) {
            current_statement__ = 56;
            lp_accum__.add(
              inv_wishart_lpdf<propto__>(sha_st_cor,
                prior_sha_st_cor_wish_nu[(1 - 1)],
                prior_sha_st_cor_wish_sigma));
          } else {
            current_statement__ = 54;
            lp_accum__.add(
              priors_cor_beta(sha_st_cor, N, prior_sha_st_cor_beta_1,
                prior_sha_st_cor_beta_2, pstream__));
          }
        }
        current_statement__ = 62;
        lp_accum__.add(
          gamma_lpdf<propto__>(ind_lt_var, prior_ind_lt_var_a,
            prior_ind_lt_var_b));
        current_statement__ = 70;
        if (logical_eq(form_prior_ind_lt, 0)) {
          current_statement__ = 68;
          lp_accum__.add(
            lkj_corr_lpdf<propto__>(ind_lt_cor,
              prior_ind_lt_cor_lkj[(1 - 1)]));
        } else {
          current_statement__ = 67;
          if (logical_eq(form_prior_ind_lt, 1)) {
            current_statement__ = 65;
            lp_accum__.add(
              inv_wishart_lpdf<propto__>(ind_lt_cor,
                prior_ind_lt_cor_wish_nu[(1 - 1)],
                prior_ind_lt_cor_wish_sigma));
          } else {
            current_statement__ = 63;
            lp_accum__.add(
              priors_cor_beta(ind_lt_cor, N, prior_ind_lt_cor_beta_1,
                prior_ind_lt_cor_beta_2, pstream__));
          }
        }
        current_statement__ = 71;
        lp_accum__.add(
          normal_lpdf<propto__>(prior_ind_st_var_hierarchical_mu_params,
            prior_ind_st_var_hierarchical_hyperparams[(1 - 1)],
            prior_ind_st_var_hierarchical_hyperparams[(2 - 1)]));
        current_statement__ = 72;
        lp_accum__.add(
          inv_gamma_lpdf<propto__>(
            diagonal(prior_ind_st_cor_hierarchical_beta_params),
            prior_ind_st_var_hierarchical_hyperparams[(3 - 1)],
            prior_ind_st_var_hierarchical_hyperparams[(4 - 1)]));
        current_statement__ = 78;
        for (int k = 1; k <= (N - 1); ++k) {
          current_statement__ = 76;
          for (int l = (k + 1); l <= N; ++l) {
            current_statement__ = 73;
            lp_accum__.add(
              gamma_lpdf<propto__>(
                rvalue(prior_ind_st_cor_hierarchical_beta_params,
                  cons_list(index_uni(k),
                    cons_list(index_uni(l), nil_index_list())),
                  "prior_ind_st_cor_hierarchical_beta_params"),
                prior_ind_st_cor_hierarchical_beta_hyper_params[(1 - 1)],
                prior_ind_st_cor_hierarchical_beta_hyper_params[(2 - 1)]));
            current_statement__ = 74;
            lp_accum__.add(
              gamma_lpdf<propto__>(
                rvalue(prior_ind_st_cor_hierarchical_beta_params,
                  cons_list(index_uni(l),
                    cons_list(index_uni(k), nil_index_list())),
                  "prior_ind_st_cor_hierarchical_beta_params"),
                prior_ind_st_cor_hierarchical_beta_hyper_params[(3 - 1)],
                prior_ind_st_cor_hierarchical_beta_hyper_params[(4 - 1)]));}}
        current_statement__ = 84;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 79;
          lp_accum__.add(
            beta_lpdf<false>(divide(add(ind_st_ar_param[(i - 1)], 1), 2),
              prior_ind_st_ar_alpha, prior_ind_st_ar_beta));
          current_statement__ = 80;
          lp_accum__.add(std_normal_lpdf<propto__>(ind_lt_raw[(i - 1)]));
          current_statement__ = 81;
          lp_accum__.add(std_normal_lpdf<propto__>(log_ind_st_var[(i - 1)]));
          current_statement__ = 82;
          lp_accum__.add(
            priors_cor_hierarchical_beta(ind_st_cor[(i - 1)], N,
              prior_ind_st_cor_hierarchical_beta_params, pstream__));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_ensemble_prior_hierarchical_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<double, -1, 1>> ind_st_ar_param;
      ind_st_ar_param = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(ind_st_ar_param, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        assign(ind_st_ar_param,
          cons_list(index_uni(sym1__), nil_index_list()), in__.vector(N),
          "assigning variable ind_st_ar_param");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 1;
          assign(ind_st_ar_param,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_constrain(
              ind_st_ar_param[(sym1__ - 1)][(sym2__ - 1)], -1, 1),
            "assigning variable ind_st_ar_param");}}
      std::vector<Eigen::Matrix<double, -1, 1>> log_ind_st_var;
      log_ind_st_var = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(log_ind_st_var, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 2;
        assign(log_ind_st_var,
          cons_list(index_uni(sym1__), nil_index_list()), in__.vector(N),
          "assigning variable log_ind_st_var");}
      std::vector<Eigen::Matrix<double, -1, -1>> ind_st_cor;
      ind_st_cor = std::vector<Eigen::Matrix<double, -1, -1>>(M, Eigen::Matrix<double, -1, -1>(N, N));
      stan::math::fill(ind_st_cor, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> ind_st_cor_in__;
      ind_st_cor_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(M, Eigen::Matrix<local_scalar_t__, -1, 1>(
        ((N * (N - 1)) / 2)));
      stan::math::fill(ind_st_cor_in__, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        assign(ind_st_cor_in__,
          cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(((N * (N - 1)) / 2)),
          "assigning variable ind_st_cor_in__");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        assign(ind_st_cor, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::corr_matrix_constrain(ind_st_cor_in__[(sym1__ - 1)], N),
          "assigning variable ind_st_cor");}
      std::vector<Eigen::Matrix<double, -1, 1>> ind_lt_raw;
      ind_lt_raw = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(ind_lt_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 4;
        assign(ind_lt_raw, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(N), "assigning variable ind_lt_raw");}
      Eigen::Matrix<double, -1, 1> ind_lt_var;
      ind_lt_var = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(ind_lt_var, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      ind_lt_var = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(ind_lt_var, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(ind_lt_var[(sym1__ - 1)], 0),
          "assigning variable ind_lt_var");}
      Eigen::Matrix<double, -1, -1> ind_lt_cor;
      ind_lt_cor = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ind_lt_cor, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ind_lt_cor_in__;
      ind_lt_cor_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((N * (N - 1))
                                                                 / 2));
      stan::math::fill(ind_lt_cor_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      ind_lt_cor_in__ = in__.vector(((N * (N - 1)) / 2));
      current_statement__ = 6;
      assign(ind_lt_cor, nil_index_list(),
        stan::math::corr_matrix_constrain(ind_lt_cor_in__, N),
        "assigning variable ind_lt_cor");
      Eigen::Matrix<double, -1, 1> sha_st_ar_param;
      sha_st_ar_param = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_st_ar_param, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      sha_st_ar_param = in__.vector(N);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 7;
        assign(sha_st_ar_param,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(sha_st_ar_param[(sym1__ - 1)], -1, 1),
          "assigning variable sha_st_ar_param");}
      Eigen::Matrix<double, -1, 1> sha_st_var;
      sha_st_var = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_st_var, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      sha_st_var = in__.vector(N);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 8;
        assign(sha_st_var, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sha_st_var[(sym1__ - 1)], 0),
          "assigning variable sha_st_var");}
      Eigen::Matrix<double, -1, -1> sha_st_cor;
      sha_st_cor = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(sha_st_cor, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sha_st_cor_in__;
      sha_st_cor_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((N * (N - 1))
                                                                 / 2));
      stan::math::fill(sha_st_cor_in__, DUMMY_VAR__);
      
      current_statement__ = 9;
      sha_st_cor_in__ = in__.vector(((N * (N - 1)) / 2));
      current_statement__ = 9;
      assign(sha_st_cor, nil_index_list(),
        stan::math::corr_matrix_constrain(sha_st_cor_in__, N),
        "assigning variable sha_st_cor");
      Eigen::Matrix<double, -1, 1> sha_lt_raw;
      sha_lt_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_lt_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      sha_lt_raw = in__.vector(N);
      Eigen::Matrix<double, -1, -1> SIGMA_t;
      SIGMA_t = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(SIGMA_t, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> SIGMA_t_in__;
      SIGMA_t_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((N +
                                                              ((N * (N - 1))
                                                                / 2)));
      stan::math::fill(SIGMA_t_in__, DUMMY_VAR__);
      
      current_statement__ = 11;
      SIGMA_t_in__ = in__.vector((N + ((N * (N - 1)) / 2)));
      current_statement__ = 11;
      assign(SIGMA_t, nil_index_list(),
        stan::math::cov_matrix_constrain(SIGMA_t_in__, N),
        "assigning variable SIGMA_t");
      Eigen::Matrix<double, -1, -1> prior_ind_st_cor_hierarchical_beta_params;
      prior_ind_st_cor_hierarchical_beta_params = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(prior_ind_st_cor_hierarchical_beta_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      prior_ind_st_cor_hierarchical_beta_params = in__.matrix(N, N);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 12;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 12;
          assign(prior_ind_st_cor_hierarchical_beta_params,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lb_constrain(
              rvalue(prior_ind_st_cor_hierarchical_beta_params,
                cons_list(index_uni(sym1__),
                  cons_list(index_uni(sym2__), nil_index_list())),
                "prior_ind_st_cor_hierarchical_beta_params"), 0),
            "assigning variable prior_ind_st_cor_hierarchical_beta_params");}
      }
      Eigen::Matrix<double, -1, 1> prior_ind_st_var_hierarchical_mu_params;
      prior_ind_st_var_hierarchical_mu_params = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(prior_ind_st_var_hierarchical_mu_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      prior_ind_st_var_hierarchical_mu_params = in__.vector(N);
      std::vector<Eigen::Matrix<double, -1, -1>> SIGMA_x;
      SIGMA_x = std::vector<Eigen::Matrix<double, -1, -1>>(M, Eigen::Matrix<double, -1, -1>(N, N));
      stan::math::fill(SIGMA_x, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> ind_st_sd;
      ind_st_sd = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(ind_st_sd, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sha_lt;
      sha_lt = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_lt, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> ind_lt;
      ind_lt = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(ind_lt, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ind_lt_sd;
      ind_lt_sd = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(ind_lt_sd, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> ind_lt_covar;
      ind_lt_covar = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ind_lt_covar, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> ind_lt_cov_cholesky;
      ind_lt_cov_cholesky = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ind_lt_cov_cholesky, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> ind_st_var_2;
      ind_st_var_2 = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(ind_st_var_2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> x_hat;
      x_hat = Eigen::Matrix<double, -1, 1>(x_hat_1dim__);
      stan::math::fill(x_hat, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> SIGMA_init;
      SIGMA_init = Eigen::Matrix<double, -1, -1>(SIGMA_init_1dim__, SIGMA_init_2dim__);
      stan::math::fill(SIGMA_init, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sha_st_sd;
      sha_st_sd = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_st_sd, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> SIGMA_mu;
      SIGMA_mu = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(SIGMA_mu, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> SIGMA;
      SIGMA = Eigen::Matrix<double, -1, -1>(SIGMA_1dim__, SIGMA_2dim__);
      stan::math::fill(SIGMA, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> lt_discrepancies;
      lt_discrepancies = Eigen::Matrix<double, -1, 1>(lt_discrepancies_1dim__);
      stan::math::fill(lt_discrepancies, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> AR_params;
      AR_params = Eigen::Matrix<double, -1, 1>(AR_params_1dim__);
      stan::math::fill(AR_params, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(ind_st_ar_param[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(log_ind_st_var[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            vars__.emplace_back(
              rvalue(ind_st_cor,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                "ind_st_cor"));}}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(ind_lt_raw[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(ind_lt_var[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(ind_lt_cor,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "ind_lt_cor"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sha_st_ar_param[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sha_st_var[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(sha_st_cor,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "sha_st_cor"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sha_lt_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(SIGMA_t,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "SIGMA_t"));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(prior_ind_st_cor_hierarchical_beta_params,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "prior_ind_st_cor_hierarchical_beta_params"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(
          prior_ind_st_var_hierarchical_mu_params[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 16;
      assign(sha_lt, nil_index_list(),
        elt_multiply(prior_sha_lt_sd, sha_lt_raw),
        "assigning variable sha_lt");
      current_statement__ = 18;
      assign(ind_lt_sd, nil_index_list(), stan::math::sqrt(ind_lt_var),
        "assigning variable ind_lt_sd");
      current_statement__ = 19;
      assign(ind_lt_covar, nil_index_list(),
        diag_post_multiply(diag_pre_multiply(ind_lt_sd, ind_lt_cor),
          ind_lt_sd), "assigning variable ind_lt_covar");
      current_statement__ = 20;
      assign(ind_lt_cov_cholesky, nil_index_list(),
        cholesky_decompose(ind_lt_covar),
        "assigning variable ind_lt_cov_cholesky");
      current_statement__ = 22;
      assign(x_hat, nil_index_list(),
        append_row(prior_y_init_mean, rep_vector(0.0, (N * (M + 1)))),
        "assigning variable x_hat");
      current_statement__ = 23;
      assign(SIGMA_init, nil_index_list(),
        rep_matrix(0, ((M + 2) * N), ((M + 2) * N)),
        "assigning variable SIGMA_init");
      current_statement__ = 24;
      assign(sha_st_sd, nil_index_list(), stan::math::sqrt(sha_st_var),
        "assigning variable sha_st_sd");
      current_statement__ = 25;
      assign(SIGMA_mu, nil_index_list(),
        diag_post_multiply(diag_pre_multiply(sha_st_sd, sha_st_cor),
          sha_st_sd), "assigning variable SIGMA_mu");
      current_statement__ = 26;
      assign(SIGMA, nil_index_list(),
        rep_matrix(0, ((M + 2) * N), ((M + 2) * N)),
        "assigning variable SIGMA");
      current_statement__ = 29;
      assign(SIGMA,
        cons_list(index_min_max(1, N),
          cons_list(index_min_max(1, N), nil_index_list())), SIGMA_t,
        "assigning variable SIGMA");
      current_statement__ = 30;
      assign(SIGMA,
        cons_list(index_min_max((N + 1), (2 * N)),
          cons_list(index_min_max((N + 1), (2 * N)), nil_index_list())),
        SIGMA_mu, "assigning variable SIGMA");
      current_statement__ = 36;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 31;
        assign(ind_st_var_2, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp(
            add(prior_ind_st_var_hierarchical_mu_params,
              elt_multiply(
                stan::math::sqrt(
                  diagonal(prior_ind_st_cor_hierarchical_beta_params)),
                log_ind_st_var[(i - 1)]))), "assigning variable ind_st_var_2");
        current_statement__ = 32;
        assign(ind_st_sd, cons_list(index_uni(i), nil_index_list()),
          stan::math::sqrt(ind_st_var_2[(i - 1)]),
          "assigning variable ind_st_sd");
        current_statement__ = 33;
        assign(SIGMA_x, cons_list(index_uni(i), nil_index_list()),
          diag_post_multiply(
            diag_pre_multiply(ind_st_sd[(i - 1)], ind_st_cor[(i - 1)]),
            ind_st_sd[(i - 1)]), "assigning variable SIGMA_x");
        current_statement__ = 34;
        assign(SIGMA,
          cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
            cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
              nil_index_list())), SIGMA_x[(i - 1)],
          "assigning variable SIGMA");}
      current_statement__ = 37;
      assign(SIGMA_init,
        cons_list(index_min_max(1, N),
          cons_list(index_min_max(1, N), nil_index_list())),
        diag_matrix(prior_y_init_var), "assigning variable SIGMA_init");
      current_statement__ = 38;
      assign(SIGMA_init,
        cons_list(index_min_max((N + 1), (2 * N)),
          cons_list(index_min_max((N + 1), (2 * N)), nil_index_list())),
        elt_divide(SIGMA_mu,
          subtract(1, multiply(sha_st_ar_param, transpose(sha_st_ar_param)))),
        "assigning variable SIGMA_init");
      ;
      current_statement__ = 42;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 40;
        assign(SIGMA_init,
          cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
            cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
              nil_index_list())),
          elt_divide(SIGMA_x[(i - 1)],
            subtract(1,
              multiply(ind_st_ar_param[(i - 1)],
                transpose(ind_st_ar_param[(i - 1)])))),
          "assigning variable SIGMA_init");}
      current_statement__ = 43;
      assign(lt_discrepancies,
        cons_list(index_min_max(1, (2 * N)), nil_index_list()),
        append_row(rep_vector(0.0, N), sha_lt),
        "assigning variable lt_discrepancies");
      current_statement__ = 44;
      assign(AR_params,
        cons_list(index_min_max(1, (2 * N)), nil_index_list()),
        append_row(rep_vector(1.0, N), sha_st_ar_param),
        "assigning variable AR_params");
      current_statement__ = 49;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 45;
        assign(ind_lt, cons_list(index_uni(i), nil_index_list()),
          multiply(ind_lt_cov_cholesky, ind_lt_raw[(i - 1)]),
          "assigning variable ind_lt");
        current_statement__ = 46;
        assign(lt_discrepancies,
          cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
            nil_index_list()), ind_lt[(i - 1)],
          "assigning variable lt_discrepancies");
        current_statement__ = 47;
        assign(AR_params,
          cons_list(index_min_max((((i + 1) * N) + 1), ((i + 2) * N)),
            nil_index_list()), ind_st_ar_param[(i - 1)],
          "assigning variable AR_params");}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 21;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 21;
          current_statement__ = 21;
          check_greater_or_equal(function__, "ind_st_var_2[sym1__, sym2__]",
                                 ind_st_var_2[(sym1__ - 1)][(sym2__ - 1)], 0);
        }}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              vars__.emplace_back(
                rvalue(SIGMA_x,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "SIGMA_x"));}}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(ind_st_sd[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(sha_lt[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(ind_lt[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(ind_lt_sd[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(ind_lt_covar,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "ind_lt_covar"));}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(ind_lt_cov_cholesky,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "ind_lt_cov_cholesky"));}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(ind_st_var_2[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= x_hat_1dim__; ++sym1__) {
          vars__.emplace_back(x_hat[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= SIGMA_init_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= SIGMA_init_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(SIGMA_init,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "SIGMA_init"));}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(sha_st_sd[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(SIGMA_mu,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "SIGMA_mu"));}}
        for (int sym1__ = 1; sym1__ <= SIGMA_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= SIGMA_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(SIGMA,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "SIGMA"));
          }}
        for (int sym1__ = 1; sym1__ <= lt_discrepancies_1dim__; ++sym1__) {
          vars__.emplace_back(lt_discrepancies[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= AR_params_1dim__; ++sym1__) {
          vars__.emplace_back(AR_params[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<Eigen::Matrix<double, -1, 1>> ind_st_ar_param;
      ind_st_ar_param = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(ind_st_ar_param, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ind_st_ar_param_flat__;
        current_statement__ = 1;
        assign(ind_st_ar_param_flat__, nil_index_list(),
          context__.vals_r("ind_st_ar_param"),
          "assigning variable ind_st_ar_param_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 1;
            assign(ind_st_ar_param,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ind_st_ar_param_flat__[(pos__ - 1)],
              "assigning variable ind_st_ar_param");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> ind_st_ar_param_free__;
      ind_st_ar_param_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(ind_st_ar_param_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 1;
          assign(ind_st_ar_param_free__,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_free(ind_st_ar_param[(sym1__ - 1)][(sym2__ - 1)],
              -1, 1), "assigning variable ind_st_ar_param_free__");}}
      std::vector<Eigen::Matrix<double, -1, 1>> log_ind_st_var;
      log_ind_st_var = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(log_ind_st_var, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> log_ind_st_var_flat__;
        current_statement__ = 2;
        assign(log_ind_st_var_flat__, nil_index_list(),
          context__.vals_r("log_ind_st_var"),
          "assigning variable log_ind_st_var_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 2;
            assign(log_ind_st_var,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              log_ind_st_var_flat__[(pos__ - 1)],
              "assigning variable log_ind_st_var");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, -1>> ind_st_cor;
      ind_st_cor = std::vector<Eigen::Matrix<double, -1, -1>>(M, Eigen::Matrix<double, -1, -1>(N, N));
      stan::math::fill(ind_st_cor, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ind_st_cor_flat__;
        current_statement__ = 3;
        assign(ind_st_cor_flat__, nil_index_list(),
          context__.vals_r("ind_st_cor"),
          "assigning variable ind_st_cor_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 3;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 3;
              assign(ind_st_cor,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                ind_st_cor_flat__[(pos__ - 1)],
                "assigning variable ind_st_cor");
              current_statement__ = 3;
              pos__ = (pos__ + 1);}}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> ind_st_cor_free__;
      ind_st_cor_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(
        ((N * (N - 1)) / 2)));
      stan::math::fill(ind_st_cor_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        assign(ind_st_cor_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::corr_matrix_free(ind_st_cor[(sym1__ - 1)]),
          "assigning variable ind_st_cor_free__");}
      std::vector<Eigen::Matrix<double, -1, 1>> ind_lt_raw;
      ind_lt_raw = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(ind_lt_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ind_lt_raw_flat__;
        current_statement__ = 4;
        assign(ind_lt_raw_flat__, nil_index_list(),
          context__.vals_r("ind_lt_raw"),
          "assigning variable ind_lt_raw_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 4;
            assign(ind_lt_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ind_lt_raw_flat__[(pos__ - 1)], "assigning variable ind_lt_raw");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> ind_lt_var;
      ind_lt_var = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(ind_lt_var, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ind_lt_var_flat__;
        current_statement__ = 5;
        assign(ind_lt_var_flat__, nil_index_list(),
          context__.vals_r("ind_lt_var"),
          "assigning variable ind_lt_var_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          assign(ind_lt_var, cons_list(index_uni(sym1__), nil_index_list()),
            ind_lt_var_flat__[(pos__ - 1)], "assigning variable ind_lt_var");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> ind_lt_var_free__;
      ind_lt_var_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(ind_lt_var_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(ind_lt_var_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(ind_lt_var[(sym1__ - 1)], 0),
          "assigning variable ind_lt_var_free__");}
      Eigen::Matrix<double, -1, -1> ind_lt_cor;
      ind_lt_cor = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(ind_lt_cor, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ind_lt_cor_flat__;
        current_statement__ = 6;
        assign(ind_lt_cor_flat__, nil_index_list(),
          context__.vals_r("ind_lt_cor"),
          "assigning variable ind_lt_cor_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 6;
            assign(ind_lt_cor,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ind_lt_cor_flat__[(pos__ - 1)], "assigning variable ind_lt_cor");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> ind_lt_cor_free__;
      ind_lt_cor_free__ = Eigen::Matrix<double, -1, 1>(((N * (N - 1)) / 2));
      stan::math::fill(ind_lt_cor_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(ind_lt_cor_free__, nil_index_list(),
        stan::math::corr_matrix_free(ind_lt_cor),
        "assigning variable ind_lt_cor_free__");
      Eigen::Matrix<double, -1, 1> sha_st_ar_param;
      sha_st_ar_param = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_st_ar_param, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sha_st_ar_param_flat__;
        current_statement__ = 7;
        assign(sha_st_ar_param_flat__, nil_index_list(),
          context__.vals_r("sha_st_ar_param"),
          "assigning variable sha_st_ar_param_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 7;
          assign(sha_st_ar_param,
            cons_list(index_uni(sym1__), nil_index_list()),
            sha_st_ar_param_flat__[(pos__ - 1)],
            "assigning variable sha_st_ar_param");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sha_st_ar_param_free__;
      sha_st_ar_param_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_st_ar_param_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 7;
        assign(sha_st_ar_param_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(sha_st_ar_param[(sym1__ - 1)], -1, 1),
          "assigning variable sha_st_ar_param_free__");}
      Eigen::Matrix<double, -1, 1> sha_st_var;
      sha_st_var = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_st_var, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sha_st_var_flat__;
        current_statement__ = 8;
        assign(sha_st_var_flat__, nil_index_list(),
          context__.vals_r("sha_st_var"),
          "assigning variable sha_st_var_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 8;
          assign(sha_st_var, cons_list(index_uni(sym1__), nil_index_list()),
            sha_st_var_flat__[(pos__ - 1)], "assigning variable sha_st_var");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sha_st_var_free__;
      sha_st_var_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_st_var_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 8;
        assign(sha_st_var_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sha_st_var[(sym1__ - 1)], 0),
          "assigning variable sha_st_var_free__");}
      Eigen::Matrix<double, -1, -1> sha_st_cor;
      sha_st_cor = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(sha_st_cor, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sha_st_cor_flat__;
        current_statement__ = 9;
        assign(sha_st_cor_flat__, nil_index_list(),
          context__.vals_r("sha_st_cor"),
          "assigning variable sha_st_cor_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 9;
            assign(sha_st_cor,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              sha_st_cor_flat__[(pos__ - 1)], "assigning variable sha_st_cor");
            current_statement__ = 9;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> sha_st_cor_free__;
      sha_st_cor_free__ = Eigen::Matrix<double, -1, 1>(((N * (N - 1)) / 2));
      stan::math::fill(sha_st_cor_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      assign(sha_st_cor_free__, nil_index_list(),
        stan::math::corr_matrix_free(sha_st_cor),
        "assigning variable sha_st_cor_free__");
      Eigen::Matrix<double, -1, 1> sha_lt_raw;
      sha_lt_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sha_lt_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sha_lt_raw_flat__;
        current_statement__ = 10;
        assign(sha_lt_raw_flat__, nil_index_list(),
          context__.vals_r("sha_lt_raw"),
          "assigning variable sha_lt_raw_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 10;
          assign(sha_lt_raw, cons_list(index_uni(sym1__), nil_index_list()),
            sha_lt_raw_flat__[(pos__ - 1)], "assigning variable sha_lt_raw");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, -1> SIGMA_t;
      SIGMA_t = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(SIGMA_t, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> SIGMA_t_flat__;
        current_statement__ = 11;
        assign(SIGMA_t_flat__, nil_index_list(), context__.vals_r("SIGMA_t"),
          "assigning variable SIGMA_t_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 11;
            assign(SIGMA_t,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              SIGMA_t_flat__[(pos__ - 1)], "assigning variable SIGMA_t");
            current_statement__ = 11;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> SIGMA_t_free__;
      SIGMA_t_free__ = Eigen::Matrix<double, -1, 1>((N + ((N * (N - 1)) / 2)));
      stan::math::fill(SIGMA_t_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      assign(SIGMA_t_free__, nil_index_list(),
        stan::math::cov_matrix_free(SIGMA_t),
        "assigning variable SIGMA_t_free__");
      Eigen::Matrix<double, -1, -1> prior_ind_st_cor_hierarchical_beta_params;
      prior_ind_st_cor_hierarchical_beta_params = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(prior_ind_st_cor_hierarchical_beta_params, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_ind_st_cor_hierarchical_beta_params_flat__;
        current_statement__ = 12;
        assign(prior_ind_st_cor_hierarchical_beta_params_flat__,
          nil_index_list(),
          context__.vals_r("prior_ind_st_cor_hierarchical_beta_params"),
          "assigning variable prior_ind_st_cor_hierarchical_beta_params_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 12;
            assign(prior_ind_st_cor_hierarchical_beta_params,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_ind_st_cor_hierarchical_beta_params_flat__[(pos__ - 1)],
              "assigning variable prior_ind_st_cor_hierarchical_beta_params");
            current_statement__ = 12;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> prior_ind_st_cor_hierarchical_beta_params_free__;
      prior_ind_st_cor_hierarchical_beta_params_free__ = Eigen::Matrix<double, -1, -1>(N, N);
      stan::math::fill(prior_ind_st_cor_hierarchical_beta_params_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 12;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 12;
          assign(prior_ind_st_cor_hierarchical_beta_params_free__,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lb_free(
              rvalue(prior_ind_st_cor_hierarchical_beta_params,
                cons_list(index_uni(sym1__),
                  cons_list(index_uni(sym2__), nil_index_list())),
                "prior_ind_st_cor_hierarchical_beta_params"), 0),
            "assigning variable prior_ind_st_cor_hierarchical_beta_params_free__");
        }}
      Eigen::Matrix<double, -1, 1> prior_ind_st_var_hierarchical_mu_params;
      prior_ind_st_var_hierarchical_mu_params = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(prior_ind_st_var_hierarchical_mu_params, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_ind_st_var_hierarchical_mu_params_flat__;
        current_statement__ = 13;
        assign(prior_ind_st_var_hierarchical_mu_params_flat__,
          nil_index_list(),
          context__.vals_r("prior_ind_st_var_hierarchical_mu_params"),
          "assigning variable prior_ind_st_var_hierarchical_mu_params_flat__");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 13;
          assign(prior_ind_st_var_hierarchical_mu_params,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_ind_st_var_hierarchical_mu_params_flat__[(pos__ - 1)],
            "assigning variable prior_ind_st_var_hierarchical_mu_params");
          current_statement__ = 13;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            ind_st_ar_param_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(log_ind_st_var[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ((N * (N - 1)) / 2); ++sym2__) {
          vars__.emplace_back(ind_st_cor_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(ind_lt_raw[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(ind_lt_var_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
        vars__.emplace_back(ind_lt_cor_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sha_st_ar_param_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sha_st_var_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
        vars__.emplace_back(sha_st_cor_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sha_lt_raw[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= (N + ((N * (N - 1)) / 2)); ++sym1__) {
        vars__.emplace_back(SIGMA_t_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(prior_ind_st_cor_hierarchical_beta_params_free__,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "prior_ind_st_cor_hierarchical_beta_params_free__"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(
          prior_ind_st_var_hierarchical_mu_params[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("ind_st_ar_param");
    names__.emplace_back("log_ind_st_var");
    names__.emplace_back("ind_st_cor");
    names__.emplace_back("ind_lt_raw");
    names__.emplace_back("ind_lt_var");
    names__.emplace_back("ind_lt_cor");
    names__.emplace_back("sha_st_ar_param");
    names__.emplace_back("sha_st_var");
    names__.emplace_back("sha_st_cor");
    names__.emplace_back("sha_lt_raw");
    names__.emplace_back("SIGMA_t");
    names__.emplace_back("prior_ind_st_cor_hierarchical_beta_params");
    names__.emplace_back("prior_ind_st_var_hierarchical_mu_params");
    names__.emplace_back("SIGMA_x");
    names__.emplace_back("ind_st_sd");
    names__.emplace_back("sha_lt");
    names__.emplace_back("ind_lt");
    names__.emplace_back("ind_lt_sd");
    names__.emplace_back("ind_lt_covar");
    names__.emplace_back("ind_lt_cov_cholesky");
    names__.emplace_back("ind_st_var_2");
    names__.emplace_back("x_hat");
    names__.emplace_back("SIGMA_init");
    names__.emplace_back("sha_st_sd");
    names__.emplace_back("SIGMA_mu");
    names__.emplace_back("SIGMA");
    names__.emplace_back("lt_discrepancies");
    names__.emplace_back("AR_params");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(x_hat_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(SIGMA_init_1dim__)
                                             ,
                                             static_cast<size_t>(SIGMA_init_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(SIGMA_1dim__)
                                             ,
                                             static_cast<size_t>(SIGMA_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(lt_discrepancies_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(AR_params_1dim__)
                                             });
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ind_st_ar_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "log_ind_st_var" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "ind_st_cor" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              }}
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ind_lt_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ind_lt_var" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ind_lt_cor" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sha_st_ar_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sha_st_var" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "sha_st_cor" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sha_lt_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "SIGMA_t" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "prior_ind_st_cor_hierarchical_beta_params" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "prior_ind_st_var_hierarchical_mu_params" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "SIGMA_x" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_st_sd" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sha_lt" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_lt" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ind_lt_sd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_lt_covar" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_lt_cov_cholesky" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_st_var_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= x_hat_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= SIGMA_init_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= SIGMA_init_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "SIGMA_init" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sha_st_sd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "SIGMA_mu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= SIGMA_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= SIGMA_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "SIGMA" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= lt_discrepancies_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lt_discrepancies" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= AR_params_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "AR_params" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ind_st_ar_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "log_ind_st_var" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ind_st_cor" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ind_lt_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ind_lt_var" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ind_lt_cor" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sha_st_ar_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sha_st_var" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((N * (N - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sha_st_cor" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sha_lt_raw" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= (N + ((N * (N - 1)) / 2)); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "SIGMA_t" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "prior_ind_st_cor_hierarchical_beta_params" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "prior_ind_st_var_hierarchical_mu_params" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "SIGMA_x" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_st_sd" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sha_lt" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_lt" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ind_lt_sd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_lt_covar" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_lt_cov_cholesky" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ind_st_var_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= x_hat_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= SIGMA_init_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= SIGMA_init_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "SIGMA_init" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sha_st_sd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "SIGMA_mu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= SIGMA_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= SIGMA_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "SIGMA" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= lt_discrepancies_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lt_discrepancies" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= AR_params_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "AR_params" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"ind_st_ar_param\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"log_ind_st_var\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"ind_st_cor\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"ind_lt_raw\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"ind_lt_var\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"ind_lt_cor\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"parameters\"},{\"name\":\"sha_st_ar_param\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"sha_st_var\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"sha_st_cor\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"parameters\"},{\"name\":\"sha_lt_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"SIGMA_t\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"parameters\"},{\"name\":\"prior_ind_st_cor_hierarchical_beta_params\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"parameters\"},{\"name\":\"prior_ind_st_var_hierarchical_mu_params\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"SIGMA_x\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"ind_st_sd\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"sha_lt\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_sd\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_covar\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_cov_cholesky\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_st_var_2\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"x_hat\",\"type\":{\"name\":\"vector\",\"length\":" << x_hat_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA_init\",\"type\":{\"name\":\"matrix\",\"rows\":" << SIGMA_init_1dim__ << ",\"cols\":" << SIGMA_init_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"sha_st_sd\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA_mu\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA\",\"type\":{\"name\":\"matrix\",\"rows\":" << SIGMA_1dim__ << ",\"cols\":" << SIGMA_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"lt_discrepancies\",\"type\":{\"name\":\"vector\",\"length\":" << lt_discrepancies_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"AR_params\",\"type\":{\"name\":\"vector\",\"length\":" << AR_params_1dim__ << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"ind_st_ar_param\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"log_ind_st_var\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"ind_st_cor\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << ((N * (N - 1)) / 2) << "}},\"block\":\"parameters\"},{\"name\":\"ind_lt_raw\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"ind_lt_var\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"ind_lt_cor\",\"type\":{\"name\":\"vector\",\"length\":" << ((N * (N - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"sha_st_ar_param\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"sha_st_var\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"sha_st_cor\",\"type\":{\"name\":\"vector\",\"length\":" << ((N * (N - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"sha_lt_raw\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"SIGMA_t\",\"type\":{\"name\":\"vector\",\"length\":" << (N + ((N * (N - 1)) / 2)) << "},\"block\":\"parameters\"},{\"name\":\"prior_ind_st_cor_hierarchical_beta_params\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"parameters\"},{\"name\":\"prior_ind_st_var_hierarchical_mu_params\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"SIGMA_x\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"ind_st_sd\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"sha_lt\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_sd\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_covar\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_lt_cov_cholesky\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"ind_st_var_2\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"x_hat\",\"type\":{\"name\":\"vector\",\"length\":" << x_hat_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA_init\",\"type\":{\"name\":\"matrix\",\"rows\":" << SIGMA_init_1dim__ << ",\"cols\":" << SIGMA_init_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"sha_st_sd\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA_mu\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"SIGMA\",\"type\":{\"name\":\"matrix\",\"rows\":" << SIGMA_1dim__ << ",\"cols\":" << SIGMA_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"lt_discrepancies\",\"type\":{\"name\":\"vector\",\"length\":" << lt_discrepancies_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"AR_params\",\"type\":{\"name\":\"vector\",\"length\":" << AR_params_1dim__ << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_ensemble_prior_hierarchical_namespace::model_ensemble_prior_hierarchical;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ensemble_prior_hierarchical_namespace::profiles__;
}
#endif
#endif
