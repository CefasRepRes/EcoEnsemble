// Generated by rstantools.  Do not edit by hand.

// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::plugins(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/mat/fun/Eigen.hpp>
#include <boost/integer/integer_log2.hpp>
#include <RcppEigen.h>
// Code generated by Stan version 2.21.0
#include <stan/model/standalone_functions_header.hpp>
namespace user_142e939cec9833edba21f82f6cf43f94 { 
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using namespace stan::math;
typedef Eigen::Matrix<double, Eigen::Dynamic, 1> vector_d;
typedef Eigen::Matrix<double, 1, Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> matrix_d;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "unknown file name");
    reader.add_event(60, 58, "end", "unknown file name");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T8__, typename T9__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T8__, typename boost::math::tools::promote_args<T9__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
KalmanFilter_back(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& rhos,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& dee,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& R,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& Q,
                      const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& C,
                      const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& P,
                      const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& xhat,
                      const int& Time,
                      const Eigen::Matrix<T8__, Eigen::Dynamic, Eigen::Dynamic>& y,
                      const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& obs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T8__, typename boost::math::tools::promote_args<T9__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("xhat_b", "Time", Time);
        validate_non_negative_index("xhat_b", "num_elements(xhat)", num_elements(xhat));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> xhat_b(Time, num_elements(xhat));
        stan::math::initialize(xhat_b, DUMMY_VAR__);
        stan::math::fill(xhat_b, DUMMY_VAR__);
        current_statement_begin__ = 5;
        validate_non_negative_index("P_", "num_elements(xhat)", num_elements(xhat));
        validate_non_negative_index("P_", "num_elements(xhat)", num_elements(xhat));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> P_(num_elements(xhat), num_elements(xhat));
        stan::math::initialize(P_, DUMMY_VAR__);
        stan::math::fill(P_, DUMMY_VAR__);
        stan::math::assign(P_,P);
        current_statement_begin__ = 6;
        validate_non_negative_index("P_s", "num_elements(xhat)", num_elements(xhat));
        validate_non_negative_index("P_s", "num_elements(xhat)", num_elements(xhat));
        validate_non_negative_index("P_s", "Time", Time);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > P_s(Time, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(num_elements(xhat), num_elements(xhat)));
        stan::math::initialize(P_s, DUMMY_VAR__);
        stan::math::fill(P_s, DUMMY_VAR__);
        current_statement_begin__ = 7;
        validate_non_negative_index("A", "num_elements(xhat)", num_elements(xhat));
        validate_non_negative_index("A", "num_elements(xhat)", num_elements(xhat));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A(num_elements(xhat), num_elements(xhat));
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A, DUMMY_VAR__);
        stan::math::assign(A,multiply(rhos, transpose(rhos)));
        current_statement_begin__ = 8;
        validate_non_negative_index("xhat_", "num_elements(xhat)", num_elements(xhat));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xhat_(num_elements(xhat));
        stan::math::initialize(xhat_, DUMMY_VAR__);
        stan::math::fill(xhat_, DUMMY_VAR__);
        stan::math::assign(xhat_,xhat);
        current_statement_begin__ = 9;
        validate_non_negative_index("xhat_s", "Time", Time);
        validate_non_negative_index("xhat_s", "num_elements(xhat)", num_elements(xhat));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> xhat_s(Time, num_elements(xhat));
        stan::math::initialize(xhat_s, DUMMY_VAR__);
        stan::math::fill(xhat_s, DUMMY_VAR__);
        current_statement_begin__ = 10;
        validate_non_negative_index("G", "num_elements(xhat)", num_elements(xhat));
        validate_non_negative_index("G", "cols(y)", cols(y));
        validate_non_negative_index("G", "Time", Time);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > G(Time, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(num_elements(xhat), cols(y)));
        stan::math::initialize(G, DUMMY_VAR__);
        stan::math::fill(G, DUMMY_VAR__);
        current_statement_begin__ = 11;
        validate_non_negative_index("G_", "num_elements(xhat)", num_elements(xhat));
        validate_non_negative_index("G_", "cols(y)", cols(y));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> G_(num_elements(xhat), cols(y));
        stan::math::initialize(G_, DUMMY_VAR__);
        stan::math::fill(G_, DUMMY_VAR__);
        current_statement_begin__ = 12;
        validate_non_negative_index("er", "Time", Time);
        validate_non_negative_index("er", "cols(y)", cols(y));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> er(Time, cols(y));
        stan::math::initialize(er, DUMMY_VAR__);
        stan::math::fill(er, DUMMY_VAR__);
        current_statement_begin__ = 13;
        local_scalar_t__ est(DUMMY_VAR__);
        (void) est;  // dummy to suppress unused var warning
        stan::math::initialize(est, DUMMY_VAR__);
        stan::math::fill(est, DUMMY_VAR__);
        current_statement_begin__ = 14;
        validate_non_negative_index("Qs_inv", "Time", Time);
        validate_non_negative_index("Qs_inv", "cols(y)", cols(y));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Qs_inv(Time, cols(y));
        stan::math::initialize(Qs_inv, DUMMY_VAR__);
        stan::math::fill(Qs_inv, DUMMY_VAR__);
        current_statement_begin__ = 16;
        validate_non_negative_index("Identity", "num_elements(xhat)", num_elements(xhat));
        validate_non_negative_index("Identity", "num_elements(xhat)", num_elements(xhat));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Identity(num_elements(xhat), num_elements(xhat));
        stan::math::initialize(Identity, DUMMY_VAR__);
        stan::math::fill(Identity, DUMMY_VAR__);
        stan::math::assign(Identity,diag_matrix(rep_vector(1.0, num_elements(xhat))));
        current_statement_begin__ = 17;
        validate_non_negative_index("L", "num_elements(xhat)", num_elements(xhat));
        validate_non_negative_index("L", "num_elements(xhat)", num_elements(xhat));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L(num_elements(xhat), num_elements(xhat));
        stan::math::initialize(L, DUMMY_VAR__);
        stan::math::fill(L, DUMMY_VAR__);
        current_statement_begin__ = 18;
        validate_non_negative_index("r", "num_elements(xhat)", num_elements(xhat));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r(num_elements(xhat));
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        stan::math::assign(r,rep_vector(0, num_elements(xhat)));
        current_statement_begin__ = 19;
        int k_i(0);
        (void) k_i;  // dummy to suppress unused var warning
        stan::math::fill(k_i, std::numeric_limits<int>::min());
        current_statement_begin__ = 20;
        int l_j(0);
        (void) l_j;  // dummy to suppress unused var warning
        stan::math::fill(l_j, std::numeric_limits<int>::min());
        current_statement_begin__ = 21;
        for (int i = 1; i <= Time; ++i) {
            current_statement_begin__ = 23;
            stan::math::assign(P_, add(elt_multiply(P_, A), Q));
            current_statement_begin__ = 24;
            stan::math::assign(xhat_, elt_multiply(rhos, xhat_));
            current_statement_begin__ = 25;
            stan::model::assign(P_s, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), 
                        P_, 
                        "assigning variable P_s");
            current_statement_begin__ = 26;
            stan::model::assign(xhat_s, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        transpose(xhat_), 
                        "assigning variable xhat_s");
            current_statement_begin__ = 27;
            for (int j = 1; j <= cols(y); ++j) {
                current_statement_begin__ = 29;
                if (as_bool(logical_eq(get_base1(obs, i, j, "obs", 1), 1.0))) {
                    current_statement_begin__ = 31;
                    stan::model::assign(G_, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                multiply(P_, transpose(stan::model::rvalue(C, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "C"))), 
                                "assigning variable G_");
                    current_statement_begin__ = 32;
                    stan::model::assign(Qs_inv, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (1 / (multiply(stan::model::rvalue(C, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "C"), stan::model::rvalue(G_, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "G_")) + get_base1(R, j, "R", 1))), 
                                "assigning variable Qs_inv");
                    current_statement_begin__ = 33;
                    stan::math::assign(est, dot_product(transpose(add(xhat_, dee)), stan::model::rvalue(C, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "C")));
                    current_statement_begin__ = 34;
                    stan::model::assign(er, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(y, i, j, "y", 1) - est), 
                                "assigning variable er");
                    current_statement_begin__ = 35;
                    stan::model::assign(G, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), 
                                multiply(get_base1(Qs_inv, i, j, "Qs_inv", 1), stan::model::rvalue(G_, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "G_")), 
                                "assigning variable G");
                    current_statement_begin__ = 36;
                    stan::math::assign(xhat_, add(xhat_, multiply(stan::model::rvalue(G, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), "G"), get_base1(er, i, j, "er", 1))));
                    current_statement_begin__ = 37;
                    stan::math::assign(P_, subtract(P_, multiply(stan::model::rvalue(G, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()))), "G"), transpose(stan::model::rvalue(G_, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "G_")))));
                }
            }
        }
        current_statement_begin__ = 41;
        for (int i = 1; i <= Time; ++i) {
            current_statement_begin__ = 43;
            stan::math::assign(k_i, ((Time + 1) - i));
            current_statement_begin__ = 44;
            for (int j = 1; j <= cols(y); ++j) {
                current_statement_begin__ = 46;
                stan::math::assign(l_j, ((cols(y) + 1) - j));
                current_statement_begin__ = 47;
                if (as_bool(logical_eq(get_base1(obs, k_i, l_j, "obs", 1), 1.0))) {
                    current_statement_begin__ = 49;
                    stan::math::assign(L, subtract(Identity, multiply(stan::model::rvalue(G, stan::model::cons_list(stan::model::index_uni(k_i), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(l_j), stan::model::nil_index_list()))), "G"), stan::model::rvalue(C, stan::model::cons_list(stan::model::index_uni(l_j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "C"))));
                    current_statement_begin__ = 50;
                    stan::math::assign(r, add(multiply(multiply(transpose(stan::model::rvalue(C, stan::model::cons_list(stan::model::index_uni(l_j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "C")), get_base1(Qs_inv, k_i, l_j, "Qs_inv", 1)), get_base1(er, k_i, l_j, "er", 1)), multiply(transpose(L), r)));
                }
            }
            current_statement_begin__ = 53;
            stan::model::assign(xhat_b, 
                        stan::model::cons_list(stan::model::index_uni(k_i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        add(stan::model::rvalue(xhat_s, stan::model::cons_list(stan::model::index_uni(k_i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "xhat_s"), transpose(multiply(stan::model::rvalue(P_s, stan::model::cons_list(stan::model::index_uni(k_i), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "P_s"), r))), 
                        "assigning variable xhat_b");
            current_statement_begin__ = 54;
            stan::math::assign(r, elt_multiply(rhos, r));
        }
        current_statement_begin__ = 56;
        return stan::math::promote_scalar<fun_return_scalar_t__>(xhat_b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct KalmanFilter_back_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T8__, typename T9__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T8__, typename boost::math::tools::promote_args<T9__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& rhos,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& dee,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& R,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& Q,
                      const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& C,
                      const Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic>& P,
                      const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& xhat,
                      const int& Time,
                      const Eigen::Matrix<T8__, Eigen::Dynamic, Eigen::Dynamic>& y,
                      const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& obs, std::ostream* pstream__) const {
        return KalmanFilter_back(rhos, dee, R, Q, C, P, xhat, Time, y, obs, pstream__);
    }
};
 } 
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
KalmanFilter_back(const Eigen::Matrix<double, Eigen::Dynamic, 1>& rhos,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& dee,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& R,
                      const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& Q,
                      const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& C,
                      const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& P,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& xhat,
                      const int& Time,
                      const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& y,
                      const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& obs, std::ostream* pstream__ = 0){
  return 
user_142e939cec9833edba21f82f6cf43f94::KalmanFilter_back<double, double, double, double, double, double, double, double, double>(rhos, dee, R, Q, C, P, xhat, Time, y, obs, pstream__);
}
